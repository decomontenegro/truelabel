#!/bin/bash

# True Label - Deployment Readiness Check
# This script checks if everything is ready for deployment

echo "üîç True Label - Verifica√ß√£o de Prontid√£o para Deploy"
echo "===================================================="
echo ""

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# Counters
PASSED=0
FAILED=0
WARNINGS=0

# Check function
check() {
    if [ $1 -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $2${NC}"
        ((PASSED++))
    else
        echo -e "${RED}‚ùå $2${NC}"
        ((FAILED++))
    fi
}

warn() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
    ((WARNINGS++))
}

# 1. Check essential files
echo "üìÅ Verificando arquivos essenciais..."
if [ -f "vercel.json" ]; then
    check 0 "vercel.json encontrado"
else
    check 1 "vercel.json n√£o encontrado"
fi
[ -f "vercel-build.sh" ] && check 0 "vercel-build.sh encontrado" || check 1 "vercel-build.sh n√£o encontrado"
[ -f "package.json" ] && check 0 "package.json encontrado" || check 1 "package.json n√£o encontrado"
[ -f "server/package.json" ] && check 0 "server/package.json encontrado" || check 1 "server/package.json n√£o encontrado"
[ -f "client/package.json" ] && check 0 "client/package.json encontrado" || check 1 "client/package.json n√£o encontrado"
echo ""

# 2. Check Node.js version
echo "üü¢ Verificando Node.js..."
NODE_VERSION=$(node -v | cut -d'.' -f1 | cut -d'v' -f2)
if [ "$NODE_VERSION" -ge 16 ]; then
    check 0 "Node.js vers√£o $(node -v)"
else
    check 1 "Node.js vers√£o incompat√≠vel (precisa 16+)"
fi
echo ""

# 3. Check Git status
echo "üìù Verificando Git..."
if git rev-parse --git-dir > /dev/null 2>&1; then
    check 0 "Reposit√≥rio Git encontrado"
    
    # Check for uncommitted changes
    if [ -z "$(git status --porcelain)" ]; then
        check 0 "Sem altera√ß√µes n√£o commitadas"
    else
        warn "Existem altera√ß√µes n√£o commitadas"
        git status --short
    fi
    
    # Check remote
    if git remote get-url origin > /dev/null 2>&1; then
        check 0 "Remote origin configurado: $(git remote get-url origin)"
    else
        check 1 "Remote origin n√£o configurado"
    fi
else
    check 1 "N√£o √© um reposit√≥rio Git"
fi
echo ""

# 4. Check environment files
echo "üîê Verificando arquivos de ambiente..."
if [ -f "server/.env" ]; then
    warn "server/.env existe (ser√° ignorado no deploy)"
else
    check 0 "server/.env n√£o existe (bom para deploy)"
fi

if [ -f "client/.env" ]; then
    warn "client/.env existe (ser√° ignorado no deploy)"
else
    check 0 "client/.env n√£o existe (bom para deploy)"
fi

[ -f ".env.example" ] && check 0 ".env.example encontrado" || warn ".env.example n√£o encontrado"
echo ""

# 5. Check build
echo "üèóÔ∏è  Verificando build..."
if [ -x "vercel-build.sh" ]; then
    check 0 "vercel-build.sh √© execut√°vel"
else
    check 1 "vercel-build.sh n√£o √© execut√°vel (execute: chmod +x vercel-build.sh)"
fi

# Try test build
echo "Testando build do cliente..."
cd client
if npm run build > /dev/null 2>&1; then
    check 0 "Build do cliente funcionou"
    rm -rf dist
else
    check 1 "Build do cliente falhou"
fi
cd ..

# Check TypeScript
echo "Verificando TypeScript..."
cd server
if npx tsc --noEmit > /dev/null 2>&1; then
    check 0 "TypeScript sem erros"
else
    warn "TypeScript com erros (pode funcionar mesmo assim)"
fi
cd ..
echo ""

# 6. Check Prisma
echo "üóÑÔ∏è  Verificando Prisma..."
if [ -f "server/prisma/schema.prisma" ]; then
    check 0 "Schema Prisma encontrado"
    
    # Check if SQLite is being used
    if grep -q "provider = \"sqlite\"" server/prisma/schema.prisma; then
        warn "Usando SQLite - mude para PostgreSQL em produ√ß√£o!"
    else
        check 0 "N√£o est√° usando SQLite"
    fi
else
    check 1 "Schema Prisma n√£o encontrado"
fi
echo ""

# 7. Check dependencies
echo "üì¶ Verificando depend√™ncias..."
cd server
if [ -d "node_modules" ]; then
    check 0 "Depend√™ncias do servidor instaladas"
else
    warn "Depend√™ncias do servidor n√£o instaladas (normal para deploy)"
fi
cd ..

cd client
if [ -d "node_modules" ]; then
    check 0 "Depend√™ncias do cliente instaladas"
else
    warn "Depend√™ncias do cliente n√£o instaladas (normal para deploy)"
fi
cd ..
echo ""

# 8. Environment variables check
echo "üîë Vari√°veis de ambiente necess√°rias:"
echo "Certifique-se de configurar no Vercel:"
echo ""
echo "Backend:"
echo "  - DATABASE_URL (PostgreSQL)"
echo "  - JWT_SECRET (32+ caracteres)"
echo "  - NODE_ENV=production"
echo ""
echo "Frontend:"
echo "  - VITE_API_BASE_URL"
echo "  - VITE_QR_BASE_URL"
echo "  - VITE_ENVIRONMENT=production"
echo ""
echo "Email (opcional):"
echo "  - EMAIL_ENABLED"
echo "  - EMAIL_PROVIDER"
echo "  - SENDGRID_API_KEY (se usar SendGrid)"
echo ""
echo "Redis (opcional):"
echo "  - REDIS_ENABLED"
echo "  - REDIS_URL"
echo ""

# Summary
echo "===================================================="
echo "üìä Resumo:"
echo -e "${GREEN}‚úÖ Passou: $PASSED${NC}"
echo -e "${YELLOW}‚ö†Ô∏è  Avisos: $WARNINGS${NC}"
echo -e "${RED}‚ùå Falhou: $FAILED${NC}"
echo ""

if [ $FAILED -eq 0 ]; then
    echo -e "${GREEN}üéâ Pronto para deploy!${NC}"
    echo ""
    echo "Pr√≥ximos passos:"
    echo "1. Configure PostgreSQL (siga SETUP-POSTGRESQL.md)"
    echo "2. Configure Email (siga SETUP-EMAIL.md)"
    echo "3. Configure Redis (siga SETUP-REDIS.md)"
    echo "4. Fa√ßa deploy (siga DEPLOY-VERCEL.md)"
else
    echo -e "${RED}‚ùå Corrija os erros antes do deploy${NC}"
fi