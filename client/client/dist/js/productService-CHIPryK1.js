import{b as t,m as e}from"./index-D7IercYq.js";const a={async getProducts(e={}){const a=new URLSearchParams;Object.entries(e).forEach((([t,e])=>{void 0!==e&&""!==e&&a.append(t,String(e))}));const r=await t.get(`/products?${a.toString()}`),o=r.data.products||[];return{data:o,pagination:r.data.pagination||{page:1,limit:10,total:o.length,totalPages:1}}},getProduct:async e=>(await t.get(`/products/${e}`)).data,async getProductById(e){const a=await t.get(`/products/${e}`);return a.data.product||a.data},async createProduct(a){const r=e(a);return(await t.post("/products",r,{headers:{"Content-Type":"multipart/form-data"}})).data},async updateProduct(a,r){const o=e(r);return(await t.put(`/products/${a}`,o,{headers:{"Content-Type":"multipart/form-data"}})).data},generateQRCode:async e=>(await t.post(`/products/${e}/qr-code`)).data,updateSmartLabelPreference:async(e,a)=>(await t.put(`/products/${e}/smart-label-preference`,{enableSmartLabel:a})).data,deleteProduct:async e=>(await t.delete(`/products/${e}`)).data,getCategories:async()=>["Alimentos","Bebidas","Suplementos","Cosm\xe9ticos","Produtos de Limpeza","Medicamentos","Outros"],getCommonClaims:async()=>["Sem Gl\xfaten","Sem Lactose","Fonte de Prote\xedna","Rico em Fibras","Sem A\xe7\xfacar","Org\xe2nico","Natural","Vegano","Vegetariano","Sem Conservantes","Sem Corantes","Light","Diet","Zero S\xf3dio","Integral"]};export{a as p};
