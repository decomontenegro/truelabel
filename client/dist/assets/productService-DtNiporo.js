import{M as t,a5 as e}from"./index-DeKtUJAc.js";const o={async getProducts(e={}){const o=new URLSearchParams;Object.entries(e).forEach((([t,e])=>{void 0!==e&&""!==e&&o.append(t,String(e))}));const a=await t.get(`/products?${o.toString()}`),r=a.data.products||[];return{data:r,pagination:a.data.pagination||{page:1,limit:10,total:r.length,totalPages:1}}},async getProduct(e){try{return(await t.get(`/products/${e}`)).data}catch(o){const t=JSON.parse(localStorage.getItem("mockProducts")||"[]").find((t=>t.id===e));if(t)return{product:t};throw new Error(`Product with ID ${e} not found`)}},async getProductById(e){try{const o=await t.get(`/products/${e}`);return o.data.product||o.data}catch(o){const t=JSON.parse(localStorage.getItem("mockProducts")||"[]").find((t=>t.id===e));if(t)return t;throw new Error(`Product with ID ${e} not found`)}},async createProduct(e){const o={name:e.name,brand:e.brand,category:e.category,description:e.description||"",claims:e.claims||"",sku:e.sku||`SKU-${Date.now()}`},a=await t.post("/products",o,{headers:{"Content-Type":"application/json"}}),r=a.data.product||a.data;return{product:{id:r.id,name:r.name,brand:r.brand,category:r.category,description:r.description||"",claims:r.claims||"",sku:r.sku||e.sku||`SKU-${Date.now()}`,status:r.status||"PENDING",createdAt:r.createdAt||(new Date).toISOString(),updatedAt:r.updatedAt||(new Date).toISOString(),imageUrl:e.imageUrl||"",nutritionalInfo:e.nutritionalInfo||""},message:a.data.message||"Produto criado com sucesso"}},async updateProduct(o,a){try{const r=e(a);return(await t.put(`/products/${o}`,r,{headers:{"Content-Type":"multipart/form-data"}})).data}catch(r){const t=this.getLocalProducts(),e=t.findIndex((t=>t.id===o));if(-1===e)throw new Error(`Product with ID ${o} not found`);const c={...t[e],...a,updatedAt:(new Date).toISOString()};return t[e]=c,localStorage.setItem("mockProducts",JSON.stringify(t)),{product:c,message:"Produto atualizado com sucesso (modo demonstração)"}}},generateQRCode:async e=>(await t.post(`/products/${e}/qr-code`)).data,updateSmartLabelPreference:async(e,o)=>(await t.put(`/products/${e}/smart-label-preference`,{enableSmartLabel:o})).data,async deleteProduct(e){try{return(await t.delete(`/products/${e}`)).data}catch(o){if(!this.getLocalProducts().some((t=>t.id===e)))throw new Error(`Product with ID ${e} not found`);return this.removeLocalProduct(e),{message:"Produto removido com sucesso (modo demonstração)"}}},getCategories:async()=>["Alimentos","Bebidas","Suplementos","Cosméticos","Produtos de Limpeza","Medicamentos","Outros"],getCommonClaims:async()=>["Sem Glúten","Sem Lactose","Fonte de Proteína","Rico em Fibras","Sem Açúcar","Orgânico","Natural","Vegano","Vegetariano","Sem Conservantes","Sem Corantes","Light","Diet","Zero Sódio","Integral"],getLocalProducts:()=>JSON.parse(localStorage.getItem("mockProducts")||"[]"),saveLocalProduct(t){const e=this.getLocalProducts(),o=e.findIndex((e=>e.id===t.id));o>=0?e[o]=t:e.push(t),localStorage.setItem("mockProducts",JSON.stringify(e))},removeLocalProduct(t){const e=this.getLocalProducts().filter((e=>e.id!==t));localStorage.setItem("mockProducts",JSON.stringify(e))},clearLocalProducts(){localStorage.removeItem("mockProducts")},hasLocalProduct(t){return this.getLocalProducts().some((e=>e.id===t))},debugTest(){const t={id:`test-${Date.now()}`,name:"Test Product",brand:"Test Brand",category:"Test Category",sku:"TEST-001",status:"PENDING",createdAt:(new Date).toISOString(),updatedAt:(new Date).toISOString()},e=JSON.parse(localStorage.getItem("mockProducts")||"[]");e.push(t),localStorage.setItem("mockProducts",JSON.stringify(e));return JSON.parse(localStorage.getItem("mockProducts")||"[]")}};window.debugProductService=o.debugTest,window.productService=o;export{o as p};
