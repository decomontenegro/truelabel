import{U as t,a7 as a}from"./index--pVY8JWu.js";import{f as e,a as i}from"./fallbackService-D-6NybDe.js";const r={async getCertifications(a={}){try{const e=new URLSearchParams;Object.entries(a).forEach((([t,a])=>{void 0!==a&&""!==a&&e.append(t,String(a))}));const i=await t.get(`/certifications?${e.toString()}`);return{data:i.data.certifications||[],pagination:i.data.pagination||{page:1,limit:10,total:0,totalPages:0}}}catch(r){if(e.shouldUseFallback(r)){e.logFallbackUsage("certificationService","getCertifications",r),await e.simulateDelay();let t=[...i.certifications];a.status&&(t=t.filter((t=>t.status===a.status))),a.type&&(t=t.filter((t=>t.type===a.type)));const c=a.page||1,o=a.limit||10,n=(c-1)*o,s=n+o;return{data:t.slice(n,s),pagination:{page:c,limit:o,total:t.length,totalPages:Math.ceil(t.length/o)}}}throw r}},getCertificationById:async a=>(await t.get(`/certifications/${a}`)).data.certification,async createCertification(a){try{return(await t.post("/certifications",a)).data}catch(i){if(e.shouldUseFallback(i)){e.logFallbackUsage("certificationService","createCertification",i),await e.simulateDelay();const t={id:`cert-${Date.now()}`,name:a.name,description:a.description||"",issuer:a.issuer,number:a.number,type:a.type,issueDate:a.issueDate,expiryDate:a.expiryDate||"",status:"ACTIVE",verificationMethod:a.verificationMethod||"MANUAL",verificationUrl:a.verificationUrl||"",scope:a.scope||"",standards:a.standards||[],documentUrl:"",createdAt:(new Date).toISOString(),updatedAt:(new Date).toISOString()},r=JSON.parse(localStorage.getItem("mockCertifications")||"[]");return r.push(t),localStorage.setItem("mockCertifications",JSON.stringify(r)),{certification:t,message:"Certificação criada com sucesso (modo demonstração)"}}throw i}},updateCertification:async(a,e)=>(await t.put(`/certifications/${a}`,e)).data,deleteCertification:async a=>(await t.delete(`/certifications/${a}`)).data,getProductCertifications:async a=>(await t.get(`/products/${a}/certifications`)).data.certifications||[],async addProductCertification(a){try{return(await t.post("/product-certifications",a)).data}catch(i){if(e.shouldUseFallback(i)){e.logFallbackUsage("certificationService","addProductCertification",i),await e.simulateDelay();const t={id:`prod-cert-${Date.now()}`,productId:a.productId,certificationId:a.certificationId,certificateNumber:a.certificateNumber,issueDate:a.issueDate,expiryDate:a.expiryDate||"",status:"ACTIVE",verifiedAt:(new Date).toISOString(),createdAt:(new Date).toISOString(),updatedAt:(new Date).toISOString()},r=JSON.parse(localStorage.getItem("mockProductCertifications")||"[]");return r.push(t),localStorage.setItem("mockProductCertifications",JSON.stringify(r)),{productCertification:t,message:"Certificação adicionada ao produto com sucesso (modo demonstração)"}}throw i}},removeProductCertification:async a=>(await t.delete(`/product-certifications/${a}`)).data,updateProductCertification:async(a,e)=>(await t.put(`/product-certifications/${a}`,e)).data,verifyCertification:async(a,e)=>(await t.post(`/certifications/${a}/verify`,{certificateNumber:e})).data,async getCertificationStatistics(a){try{const e=new URLSearchParams;a&&Object.entries(a).forEach((([t,a])=>{a&&e.append(t,a)}));return(await t.get(`/certifications/statistics?${e.toString()}`)).data}catch(e){return{total:0,active:0,expired:0,expiringSoon:0,byType:{},byIssuer:{},upcomingExpirations:[]}}},getCertificationTimeline:async a=>(await t.get(`/certifications/${a}/timeline`)).data,async uploadCertificateDocument(i,r){try{const e=a({file:r});return(await t.post(`/certifications/${i}/document`,e,{headers:{"Content-Type":"multipart/form-data"}})).data}catch(c){if(e.shouldUseFallback(c)){e.logFallbackUsage("certificationService","uploadCertificateDocument",c),await e.simulateDelay();return{documentUrl:`https://mock-storage.com/certifications/${i}/${r.name}`,message:"Documento enviado com sucesso (modo demonstração)"}}throw c}},generateBadge:async a=>(await t.post("/certifications/badges/generate",a)).data,getCertificationBadges:async a=>(await t.get(`/certifications/${a}/badges`)).data.badges||[],async bulkUploadCertifications(e){const i=a({file:e.file,mapping:JSON.stringify(e.mapping)});return(await t.post("/certifications/bulk-upload",i,{headers:{"Content-Type":"multipart/form-data"}})).data},async getCertificationAlerts(a){try{const e=new URLSearchParams;a&&Object.entries(a).forEach((([t,a])=>{void 0!==a&&e.append(t,String(a))}));return(await t.get(`/certifications/alerts?${e.toString()}`)).data.alerts||[]}catch(e){return[]}},markAlertAsRead:async a=>(await t.put(`/certifications/alerts/${a}/read`)).data,configureAlertSettings:async a=>(await t.put("/certifications/alerts/settings",a)).data,isCertificationExpired:t=>new Date(t)<new Date,getCertificationStatusColor(t){switch(t){case"ACTIVE":return"green";case"EXPIRED":case"REVOKED":return"red";case"PENDING":return"yellow";case"SUSPENDED":return"orange";default:return"gray"}},getCertificationStatusLabel(t){switch(t){case"ACTIVE":return"Ativo";case"EXPIRED":return"Expirado";case"PENDING":return"Pendente";case"SUSPENDED":return"Suspenso";case"REVOKED":return"Revogado";default:return t}},getCertificationTypeLabel:t=>({ISO:"ISO",HACCP:"HACCP",ORGANIC:"Orgânico",FAIRTRADE:"Comércio Justo",KOSHER:"Kosher",HALAL:"Halal",VEGAN:"Vegano",NON_GMO:"Não-OGM",GLUTEN_FREE:"Sem Glúten",RAINFOREST_ALLIANCE:"Rainforest Alliance",BRC:"BRC",IFS:"IFS",OTHER:"Outro"}[t]||t),formatExpiryDate(t){if(!t)return"Data não informada";const a=new Date(t);if(isNaN(a.getTime()))return"Data inválida";const e=new Date,i=a.getTime()-e.getTime(),r=Math.ceil(i/864e5);return r<0?`Expirado há ${Math.abs(r)} dias`:0===r?"Expira hoje":1===r?"Expira amanhã":r<=30?`Expira em ${r} dias`:new Intl.DateTimeFormat("pt-BR").format(a)},getDaysUntilExpiry(t){if(!t)return 0;const a=new Date,e=new Date(t);if(isNaN(e.getTime()))return 0;const i=e.getTime()-a.getTime();return Math.ceil(i/864e5)}};export{r as c};
