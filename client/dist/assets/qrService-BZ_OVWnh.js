import{M as e}from"./index-DeKtUJAc.js";var a={};const t={generateQRCode:async a=>(await e.post("/qr/generate",{productId:a})).data,validateQRCode:async a=>(await e.get(`/qr/validate/${a}`)).data,getQRCodeAccesses:async a=>(await e.get(`/qr/accesses/${a}`)).data,async hasQRCode(a){var t;try{await e.get(`/qr/accesses/${a}`);return!0}catch(r){return null==(t=r.response)||t.status,!1}},generateValidationUrl:e=>`${a.REACT_APP_QR_BASE_URL||window.location.origin}/validation/${e}`,downloadQRCodeImage(e,a){const t=document.createElement("a");t.href=e,t.download=`qr-code-${a.replace(/\s+/g,"-").toLowerCase()}.png`,document.body.appendChild(t),t.click(),document.body.removeChild(t)},async copyValidationUrl(e){try{return await navigator.clipboard.writeText(e),!0}catch(a){const t=document.createElement("textarea");t.value=e,document.body.appendChild(t),t.select();const r=document.execCommand("copy");return document.body.removeChild(t),r}},async shareQRCode(e){if(!navigator.share)return!1;try{return await navigator.share({title:`Validação - ${e.product.name}`,text:`Verifique a autenticidade do produto ${e.product.name} da marca ${e.product.brand}`,url:e.validationUrl}),!0}catch(a){return!1}},formatAccessStats:e=>[{label:"Total",value:e.total,description:"Acessos totais"},{label:"Hoje",value:e.today,description:"Acessos hoje"},{label:"Esta semana",value:e.thisWeek,description:"Acessos nos últimos 7 dias"}],parseUserAgent(e){let a="Desconhecido",t="Desconhecido",r="Desktop";return e.includes("Chrome")?a="Chrome":e.includes("Firefox")?a="Firefox":e.includes("Safari")?a="Safari":e.includes("Edge")&&(a="Edge"),e.includes("Windows")?t="Windows":e.includes("Mac")?t="macOS":e.includes("Linux")?t="Linux":e.includes("Android")?t="Android":e.includes("iOS")&&(t="iOS"),e.includes("Mobile")||e.includes("Android")?r="Mobile":(e.includes("Tablet")||e.includes("iPad"))&&(r="Tablet"),{browser:a,os:t,device:r}},formatAccess(e){const a=this.parseUserAgent(e.userAgent);return{id:e.id,time:new Date(e.accessedAt).toLocaleString("pt-BR"),location:e.location||e.ipAddress,device:`${a.device} (${a.os})`,browser:a.browser}},isValidQRCode:e=>/^[a-f0-9]{16}$/i.test(e),generateTestQRCode:()=>Math.random().toString(16).substring(2,18),getValidationStatusColor(e){switch(e){case"VALIDATED":return"green";case"PENDING":return"yellow";case"REJECTED":return"red";default:return"gray"}},formatValidatedClaims:e=>Object.entries(e).map((([e,a])=>({claim:e,validated:a.validated||!1,icon:a.validated?"✅":"❌"}))),calculateTrustScore(e){if(!e)return{score:0,level:"Não validado",color:"gray"};const a=Object.values(e.claimsValidated).filter((e=>e.validated)).length,t=Object.keys(e.claimsValidated).length,r=t>0?a/t*100:0;let d="Baixo",o="red";return r>=80?(d="Alto",o="green"):r>=60&&(d="Médio",o="yellow"),{score:Math.round(r),level:d,color:o}},batchUpdateStatus:async(a,t,r)=>(await e.put("/qr/batch-update-status",{qrIds:a,status:t,reason:r})).data,getQRCodeLifecycle:async a=>(await e.get(`/qr/${a}/lifecycle`)).data,regenerateQRCode:async(a,t)=>(await e.post("/qr/regenerate",{productId:a,oldQrId:t})).data,getQRCodesByProduct:async a=>(await e.get(`/qr/product/${a}`)).data.qrCodes||[],suspendQRCode:async(a,t)=>(await e.put(`/qr/${a}/suspend`,{reason:t})).data,reactivateQRCode:async a=>(await e.put(`/qr/${a}/reactivate`)).data};export{t as q};
