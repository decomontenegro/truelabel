const axios = require('axios');

async function testPerformance() {
  console.log('‚ö° TESTANDO PERFORMANCE DO SISTEMA\n');

  const BASE_URL = 'http://localhost:3001/api';
  
  // Login
  const loginResponse = await axios.post(`${BASE_URL}/auth/login`, {
    email: 'admin@truelabel.com',
    password: '123456'
  });
  const authToken = loginResponse.data.token;

  // Teste de m√∫ltiplas requisi√ß√µes simult√¢neas
  console.log('1Ô∏è‚É£ TESTANDO M√öLTIPLAS REQUISI√á√ïES SIMULT√ÇNEAS...');
  const startTime = Date.now();
  
  const promises = [];
  for (let i = 0; i < 10; i++) {
    promises.push(
      axios.get(`${BASE_URL}/products`, {
        headers: { Authorization: `Bearer ${authToken}` }
      })
    );
  }

  const results = await Promise.all(promises);
  const endTime = Date.now();
  
  console.log(`‚úÖ 10 requisi√ß√µes simult√¢neas completadas em ${endTime - startTime}ms`);
  console.log(`   M√©dia: ${(endTime - startTime) / 10}ms por requisi√ß√£o\n`);

  // Teste de health check
  console.log('2Ô∏è‚É£ TESTANDO HEALTH CHECK PERFORMANCE...');
  const healthStartTime = Date.now();
  await axios.get('http://localhost:3001/health');
  const healthEndTime = Date.now();
  console.log(`‚úÖ Health check respondeu em ${healthEndTime - healthStartTime}ms\n`);

  // Teste de autentica√ß√£o performance
  console.log('3Ô∏è‚É£ TESTANDO PERFORMANCE DE AUTENTICA√á√ÉO...');
  const authStartTime = Date.now();
  await axios.post(`${BASE_URL}/auth/login`, {
    email: 'admin@truelabel.com',
    password: '123456'
  });
  const authEndTime = Date.now();
  console.log(`‚úÖ Autentica√ß√£o completada em ${authEndTime - authStartTime}ms\n`);

  console.log('üéØ PERFORMANCE ACEIT√ÅVEL PARA DESENVOLVIMENTO!');
}

testPerformance().catch(console.error);
