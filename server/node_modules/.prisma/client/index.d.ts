
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Laboratory
 * 
 */
export type Laboratory = $Result.DefaultSelection<Prisma.$LaboratoryPayload>
/**
 * Model Product
 * 
 */
export type Product = $Result.DefaultSelection<Prisma.$ProductPayload>
/**
 * Model Report
 * 
 */
export type Report = $Result.DefaultSelection<Prisma.$ReportPayload>
/**
 * Model Validation
 * 
 */
export type Validation = $Result.DefaultSelection<Prisma.$ValidationPayload>
/**
 * Model ProductSeal
 * 
 */
export type ProductSeal = $Result.DefaultSelection<Prisma.$ProductSealPayload>
/**
 * Model QRCodeAccess
 * 
 */
export type QRCodeAccess = $Result.DefaultSelection<Prisma.$QRCodeAccessPayload>
/**
 * Model ValidationQueue
 * 
 */
export type ValidationQueue = $Result.DefaultSelection<Prisma.$ValidationQueuePayload>
/**
 * Model ValidationQueueHistory
 * 
 */
export type ValidationQueueHistory = $Result.DefaultSelection<Prisma.$ValidationQueueHistoryPayload>
/**
 * Model AnalyticsEvent
 * 
 */
export type AnalyticsEvent = $Result.DefaultSelection<Prisma.$AnalyticsEventPayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.laboratory`: Exposes CRUD operations for the **Laboratory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Laboratories
    * const laboratories = await prisma.laboratory.findMany()
    * ```
    */
  get laboratory(): Prisma.LaboratoryDelegate<ExtArgs>;

  /**
   * `prisma.product`: Exposes CRUD operations for the **Product** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.product.findMany()
    * ```
    */
  get product(): Prisma.ProductDelegate<ExtArgs>;

  /**
   * `prisma.report`: Exposes CRUD operations for the **Report** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reports
    * const reports = await prisma.report.findMany()
    * ```
    */
  get report(): Prisma.ReportDelegate<ExtArgs>;

  /**
   * `prisma.validation`: Exposes CRUD operations for the **Validation** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Validations
    * const validations = await prisma.validation.findMany()
    * ```
    */
  get validation(): Prisma.ValidationDelegate<ExtArgs>;

  /**
   * `prisma.productSeal`: Exposes CRUD operations for the **ProductSeal** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductSeals
    * const productSeals = await prisma.productSeal.findMany()
    * ```
    */
  get productSeal(): Prisma.ProductSealDelegate<ExtArgs>;

  /**
   * `prisma.qRCodeAccess`: Exposes CRUD operations for the **QRCodeAccess** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more QRCodeAccesses
    * const qRCodeAccesses = await prisma.qRCodeAccess.findMany()
    * ```
    */
  get qRCodeAccess(): Prisma.QRCodeAccessDelegate<ExtArgs>;

  /**
   * `prisma.validationQueue`: Exposes CRUD operations for the **ValidationQueue** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ValidationQueues
    * const validationQueues = await prisma.validationQueue.findMany()
    * ```
    */
  get validationQueue(): Prisma.ValidationQueueDelegate<ExtArgs>;

  /**
   * `prisma.validationQueueHistory`: Exposes CRUD operations for the **ValidationQueueHistory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ValidationQueueHistories
    * const validationQueueHistories = await prisma.validationQueueHistory.findMany()
    * ```
    */
  get validationQueueHistory(): Prisma.ValidationQueueHistoryDelegate<ExtArgs>;

  /**
   * `prisma.analyticsEvent`: Exposes CRUD operations for the **AnalyticsEvent** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AnalyticsEvents
    * const analyticsEvents = await prisma.analyticsEvent.findMany()
    * ```
    */
  get analyticsEvent(): Prisma.AnalyticsEventDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Laboratory: 'Laboratory',
    Product: 'Product',
    Report: 'Report',
    Validation: 'Validation',
    ProductSeal: 'ProductSeal',
    QRCodeAccess: 'QRCodeAccess',
    ValidationQueue: 'ValidationQueue',
    ValidationQueueHistory: 'ValidationQueueHistory',
    AnalyticsEvent: 'AnalyticsEvent'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "laboratory" | "product" | "report" | "validation" | "productSeal" | "qRCodeAccess" | "validationQueue" | "validationQueueHistory" | "analyticsEvent"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Laboratory: {
        payload: Prisma.$LaboratoryPayload<ExtArgs>
        fields: Prisma.LaboratoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LaboratoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaboratoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LaboratoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaboratoryPayload>
          }
          findFirst: {
            args: Prisma.LaboratoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaboratoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LaboratoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaboratoryPayload>
          }
          findMany: {
            args: Prisma.LaboratoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaboratoryPayload>[]
          }
          create: {
            args: Prisma.LaboratoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaboratoryPayload>
          }
          createMany: {
            args: Prisma.LaboratoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LaboratoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaboratoryPayload>[]
          }
          delete: {
            args: Prisma.LaboratoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaboratoryPayload>
          }
          update: {
            args: Prisma.LaboratoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaboratoryPayload>
          }
          deleteMany: {
            args: Prisma.LaboratoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LaboratoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.LaboratoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LaboratoryPayload>
          }
          aggregate: {
            args: Prisma.LaboratoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLaboratory>
          }
          groupBy: {
            args: Prisma.LaboratoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<LaboratoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.LaboratoryCountArgs<ExtArgs>
            result: $Utils.Optional<LaboratoryCountAggregateOutputType> | number
          }
        }
      }
      Product: {
        payload: Prisma.$ProductPayload<ExtArgs>
        fields: Prisma.ProductFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findFirst: {
            args: Prisma.ProductFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          findMany: {
            args: Prisma.ProductFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          create: {
            args: Prisma.ProductCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          createMany: {
            args: Prisma.ProductCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>[]
          }
          delete: {
            args: Prisma.ProductDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          update: {
            args: Prisma.ProductUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          deleteMany: {
            args: Prisma.ProductDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductPayload>
          }
          aggregate: {
            args: Prisma.ProductAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProduct>
          }
          groupBy: {
            args: Prisma.ProductGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductCountArgs<ExtArgs>
            result: $Utils.Optional<ProductCountAggregateOutputType> | number
          }
        }
      }
      Report: {
        payload: Prisma.$ReportPayload<ExtArgs>
        fields: Prisma.ReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findFirst: {
            args: Prisma.ReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findMany: {
            args: Prisma.ReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          create: {
            args: Prisma.ReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          createMany: {
            args: Prisma.ReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          delete: {
            args: Prisma.ReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          update: {
            args: Prisma.ReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          deleteMany: {
            args: Prisma.ReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          aggregate: {
            args: Prisma.ReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReport>
          }
          groupBy: {
            args: Prisma.ReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportCountArgs<ExtArgs>
            result: $Utils.Optional<ReportCountAggregateOutputType> | number
          }
        }
      }
      Validation: {
        payload: Prisma.$ValidationPayload<ExtArgs>
        fields: Prisma.ValidationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ValidationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ValidationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationPayload>
          }
          findFirst: {
            args: Prisma.ValidationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ValidationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationPayload>
          }
          findMany: {
            args: Prisma.ValidationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationPayload>[]
          }
          create: {
            args: Prisma.ValidationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationPayload>
          }
          createMany: {
            args: Prisma.ValidationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ValidationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationPayload>[]
          }
          delete: {
            args: Prisma.ValidationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationPayload>
          }
          update: {
            args: Prisma.ValidationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationPayload>
          }
          deleteMany: {
            args: Prisma.ValidationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ValidationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ValidationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationPayload>
          }
          aggregate: {
            args: Prisma.ValidationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateValidation>
          }
          groupBy: {
            args: Prisma.ValidationGroupByArgs<ExtArgs>
            result: $Utils.Optional<ValidationGroupByOutputType>[]
          }
          count: {
            args: Prisma.ValidationCountArgs<ExtArgs>
            result: $Utils.Optional<ValidationCountAggregateOutputType> | number
          }
        }
      }
      ProductSeal: {
        payload: Prisma.$ProductSealPayload<ExtArgs>
        fields: Prisma.ProductSealFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProductSealFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSealPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProductSealFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSealPayload>
          }
          findFirst: {
            args: Prisma.ProductSealFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSealPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProductSealFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSealPayload>
          }
          findMany: {
            args: Prisma.ProductSealFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSealPayload>[]
          }
          create: {
            args: Prisma.ProductSealCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSealPayload>
          }
          createMany: {
            args: Prisma.ProductSealCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProductSealCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSealPayload>[]
          }
          delete: {
            args: Prisma.ProductSealDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSealPayload>
          }
          update: {
            args: Prisma.ProductSealUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSealPayload>
          }
          deleteMany: {
            args: Prisma.ProductSealDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProductSealUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProductSealUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProductSealPayload>
          }
          aggregate: {
            args: Prisma.ProductSealAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProductSeal>
          }
          groupBy: {
            args: Prisma.ProductSealGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProductSealGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProductSealCountArgs<ExtArgs>
            result: $Utils.Optional<ProductSealCountAggregateOutputType> | number
          }
        }
      }
      QRCodeAccess: {
        payload: Prisma.$QRCodeAccessPayload<ExtArgs>
        fields: Prisma.QRCodeAccessFieldRefs
        operations: {
          findUnique: {
            args: Prisma.QRCodeAccessFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QRCodeAccessPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.QRCodeAccessFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QRCodeAccessPayload>
          }
          findFirst: {
            args: Prisma.QRCodeAccessFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QRCodeAccessPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.QRCodeAccessFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QRCodeAccessPayload>
          }
          findMany: {
            args: Prisma.QRCodeAccessFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QRCodeAccessPayload>[]
          }
          create: {
            args: Prisma.QRCodeAccessCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QRCodeAccessPayload>
          }
          createMany: {
            args: Prisma.QRCodeAccessCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.QRCodeAccessCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QRCodeAccessPayload>[]
          }
          delete: {
            args: Prisma.QRCodeAccessDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QRCodeAccessPayload>
          }
          update: {
            args: Prisma.QRCodeAccessUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QRCodeAccessPayload>
          }
          deleteMany: {
            args: Prisma.QRCodeAccessDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.QRCodeAccessUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.QRCodeAccessUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$QRCodeAccessPayload>
          }
          aggregate: {
            args: Prisma.QRCodeAccessAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateQRCodeAccess>
          }
          groupBy: {
            args: Prisma.QRCodeAccessGroupByArgs<ExtArgs>
            result: $Utils.Optional<QRCodeAccessGroupByOutputType>[]
          }
          count: {
            args: Prisma.QRCodeAccessCountArgs<ExtArgs>
            result: $Utils.Optional<QRCodeAccessCountAggregateOutputType> | number
          }
        }
      }
      ValidationQueue: {
        payload: Prisma.$ValidationQueuePayload<ExtArgs>
        fields: Prisma.ValidationQueueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ValidationQueueFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationQueuePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ValidationQueueFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationQueuePayload>
          }
          findFirst: {
            args: Prisma.ValidationQueueFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationQueuePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ValidationQueueFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationQueuePayload>
          }
          findMany: {
            args: Prisma.ValidationQueueFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationQueuePayload>[]
          }
          create: {
            args: Prisma.ValidationQueueCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationQueuePayload>
          }
          createMany: {
            args: Prisma.ValidationQueueCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ValidationQueueCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationQueuePayload>[]
          }
          delete: {
            args: Prisma.ValidationQueueDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationQueuePayload>
          }
          update: {
            args: Prisma.ValidationQueueUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationQueuePayload>
          }
          deleteMany: {
            args: Prisma.ValidationQueueDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ValidationQueueUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ValidationQueueUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationQueuePayload>
          }
          aggregate: {
            args: Prisma.ValidationQueueAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateValidationQueue>
          }
          groupBy: {
            args: Prisma.ValidationQueueGroupByArgs<ExtArgs>
            result: $Utils.Optional<ValidationQueueGroupByOutputType>[]
          }
          count: {
            args: Prisma.ValidationQueueCountArgs<ExtArgs>
            result: $Utils.Optional<ValidationQueueCountAggregateOutputType> | number
          }
        }
      }
      ValidationQueueHistory: {
        payload: Prisma.$ValidationQueueHistoryPayload<ExtArgs>
        fields: Prisma.ValidationQueueHistoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ValidationQueueHistoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationQueueHistoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ValidationQueueHistoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationQueueHistoryPayload>
          }
          findFirst: {
            args: Prisma.ValidationQueueHistoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationQueueHistoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ValidationQueueHistoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationQueueHistoryPayload>
          }
          findMany: {
            args: Prisma.ValidationQueueHistoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationQueueHistoryPayload>[]
          }
          create: {
            args: Prisma.ValidationQueueHistoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationQueueHistoryPayload>
          }
          createMany: {
            args: Prisma.ValidationQueueHistoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ValidationQueueHistoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationQueueHistoryPayload>[]
          }
          delete: {
            args: Prisma.ValidationQueueHistoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationQueueHistoryPayload>
          }
          update: {
            args: Prisma.ValidationQueueHistoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationQueueHistoryPayload>
          }
          deleteMany: {
            args: Prisma.ValidationQueueHistoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ValidationQueueHistoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ValidationQueueHistoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ValidationQueueHistoryPayload>
          }
          aggregate: {
            args: Prisma.ValidationQueueHistoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateValidationQueueHistory>
          }
          groupBy: {
            args: Prisma.ValidationQueueHistoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ValidationQueueHistoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ValidationQueueHistoryCountArgs<ExtArgs>
            result: $Utils.Optional<ValidationQueueHistoryCountAggregateOutputType> | number
          }
        }
      }
      AnalyticsEvent: {
        payload: Prisma.$AnalyticsEventPayload<ExtArgs>
        fields: Prisma.AnalyticsEventFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AnalyticsEventFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsEventPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AnalyticsEventFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsEventPayload>
          }
          findFirst: {
            args: Prisma.AnalyticsEventFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsEventPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AnalyticsEventFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsEventPayload>
          }
          findMany: {
            args: Prisma.AnalyticsEventFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsEventPayload>[]
          }
          create: {
            args: Prisma.AnalyticsEventCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsEventPayload>
          }
          createMany: {
            args: Prisma.AnalyticsEventCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.AnalyticsEventCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsEventPayload>[]
          }
          delete: {
            args: Prisma.AnalyticsEventDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsEventPayload>
          }
          update: {
            args: Prisma.AnalyticsEventUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsEventPayload>
          }
          deleteMany: {
            args: Prisma.AnalyticsEventDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.AnalyticsEventUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.AnalyticsEventUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$AnalyticsEventPayload>
          }
          aggregate: {
            args: Prisma.AnalyticsEventAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateAnalyticsEvent>
          }
          groupBy: {
            args: Prisma.AnalyticsEventGroupByArgs<ExtArgs>
            result: $Utils.Optional<AnalyticsEventGroupByOutputType>[]
          }
          count: {
            args: Prisma.AnalyticsEventCountArgs<ExtArgs>
            result: $Utils.Optional<AnalyticsEventCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    products: number
    validations: number
    queueRequestedBy: number
    queueAssignedTo: number
    queueHistoryActions: number
    analyticsEvents: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | UserCountOutputTypeCountProductsArgs
    validations?: boolean | UserCountOutputTypeCountValidationsArgs
    queueRequestedBy?: boolean | UserCountOutputTypeCountQueueRequestedByArgs
    queueAssignedTo?: boolean | UserCountOutputTypeCountQueueAssignedToArgs
    queueHistoryActions?: boolean | UserCountOutputTypeCountQueueHistoryActionsArgs
    analyticsEvents?: boolean | UserCountOutputTypeCountAnalyticsEventsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountValidationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ValidationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountQueueRequestedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ValidationQueueWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountQueueAssignedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ValidationQueueWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountQueueHistoryActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ValidationQueueHistoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAnalyticsEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnalyticsEventWhereInput
  }


  /**
   * Count Type LaboratoryCountOutputType
   */

  export type LaboratoryCountOutputType = {
    reports: number
  }

  export type LaboratoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reports?: boolean | LaboratoryCountOutputTypeCountReportsArgs
  }

  // Custom InputTypes
  /**
   * LaboratoryCountOutputType without action
   */
  export type LaboratoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LaboratoryCountOutputType
     */
    select?: LaboratoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LaboratoryCountOutputType without action
   */
  export type LaboratoryCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }


  /**
   * Count Type ProductCountOutputType
   */

  export type ProductCountOutputType = {
    validations: number
    reports: number
    seals: number
    validationQueue: number
  }

  export type ProductCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    validations?: boolean | ProductCountOutputTypeCountValidationsArgs
    reports?: boolean | ProductCountOutputTypeCountReportsArgs
    seals?: boolean | ProductCountOutputTypeCountSealsArgs
    validationQueue?: boolean | ProductCountOutputTypeCountValidationQueueArgs
  }

  // Custom InputTypes
  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductCountOutputType
     */
    select?: ProductCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountValidationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ValidationWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountSealsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductSealWhereInput
  }

  /**
   * ProductCountOutputType without action
   */
  export type ProductCountOutputTypeCountValidationQueueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ValidationQueueWhereInput
  }


  /**
   * Count Type ReportCountOutputType
   */

  export type ReportCountOutputType = {
    validations: number
  }

  export type ReportCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    validations?: boolean | ReportCountOutputTypeCountValidationsArgs
  }

  // Custom InputTypes
  /**
   * ReportCountOutputType without action
   */
  export type ReportCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCountOutputType
     */
    select?: ReportCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReportCountOutputType without action
   */
  export type ReportCountOutputTypeCountValidationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ValidationWhereInput
  }


  /**
   * Count Type ValidationQueueCountOutputType
   */

  export type ValidationQueueCountOutputType = {
    history: number
  }

  export type ValidationQueueCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    history?: boolean | ValidationQueueCountOutputTypeCountHistoryArgs
  }

  // Custom InputTypes
  /**
   * ValidationQueueCountOutputType without action
   */
  export type ValidationQueueCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationQueueCountOutputType
     */
    select?: ValidationQueueCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ValidationQueueCountOutputType without action
   */
  export type ValidationQueueCountOutputTypeCountHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ValidationQueueHistoryWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    password: string | null
    name: string | null
    role: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    password: number
    name: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    password?: true
    name?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    password: string
    name: string
    role: string
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    products?: boolean | User$productsArgs<ExtArgs>
    validations?: boolean | User$validationsArgs<ExtArgs>
    queueRequestedBy?: boolean | User$queueRequestedByArgs<ExtArgs>
    queueAssignedTo?: boolean | User$queueAssignedToArgs<ExtArgs>
    queueHistoryActions?: boolean | User$queueHistoryActionsArgs<ExtArgs>
    analyticsEvents?: boolean | User$analyticsEventsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    password?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    products?: boolean | User$productsArgs<ExtArgs>
    validations?: boolean | User$validationsArgs<ExtArgs>
    queueRequestedBy?: boolean | User$queueRequestedByArgs<ExtArgs>
    queueAssignedTo?: boolean | User$queueAssignedToArgs<ExtArgs>
    queueHistoryActions?: boolean | User$queueHistoryActionsArgs<ExtArgs>
    analyticsEvents?: boolean | User$analyticsEventsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      products: Prisma.$ProductPayload<ExtArgs>[]
      validations: Prisma.$ValidationPayload<ExtArgs>[]
      queueRequestedBy: Prisma.$ValidationQueuePayload<ExtArgs>[]
      queueAssignedTo: Prisma.$ValidationQueuePayload<ExtArgs>[]
      queueHistoryActions: Prisma.$ValidationQueueHistoryPayload<ExtArgs>[]
      analyticsEvents: Prisma.$AnalyticsEventPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      password: string
      name: string
      role: string
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    products<T extends User$productsArgs<ExtArgs> = {}>(args?: Subset<T, User$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany"> | Null>
    validations<T extends User$validationsArgs<ExtArgs> = {}>(args?: Subset<T, User$validationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValidationPayload<ExtArgs>, T, "findMany"> | Null>
    queueRequestedBy<T extends User$queueRequestedByArgs<ExtArgs> = {}>(args?: Subset<T, User$queueRequestedByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValidationQueuePayload<ExtArgs>, T, "findMany"> | Null>
    queueAssignedTo<T extends User$queueAssignedToArgs<ExtArgs> = {}>(args?: Subset<T, User$queueAssignedToArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValidationQueuePayload<ExtArgs>, T, "findMany"> | Null>
    queueHistoryActions<T extends User$queueHistoryActionsArgs<ExtArgs> = {}>(args?: Subset<T, User$queueHistoryActionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValidationQueueHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    analyticsEvents<T extends User$analyticsEventsArgs<ExtArgs> = {}>(args?: Subset<T, User$analyticsEventsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnalyticsEventPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.products
   */
  export type User$productsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    cursor?: ProductWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * User.validations
   */
  export type User$validationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Validation
     */
    select?: ValidationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationInclude<ExtArgs> | null
    where?: ValidationWhereInput
    orderBy?: ValidationOrderByWithRelationInput | ValidationOrderByWithRelationInput[]
    cursor?: ValidationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ValidationScalarFieldEnum | ValidationScalarFieldEnum[]
  }

  /**
   * User.queueRequestedBy
   */
  export type User$queueRequestedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationQueue
     */
    select?: ValidationQueueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationQueueInclude<ExtArgs> | null
    where?: ValidationQueueWhereInput
    orderBy?: ValidationQueueOrderByWithRelationInput | ValidationQueueOrderByWithRelationInput[]
    cursor?: ValidationQueueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ValidationQueueScalarFieldEnum | ValidationQueueScalarFieldEnum[]
  }

  /**
   * User.queueAssignedTo
   */
  export type User$queueAssignedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationQueue
     */
    select?: ValidationQueueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationQueueInclude<ExtArgs> | null
    where?: ValidationQueueWhereInput
    orderBy?: ValidationQueueOrderByWithRelationInput | ValidationQueueOrderByWithRelationInput[]
    cursor?: ValidationQueueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ValidationQueueScalarFieldEnum | ValidationQueueScalarFieldEnum[]
  }

  /**
   * User.queueHistoryActions
   */
  export type User$queueHistoryActionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationQueueHistory
     */
    select?: ValidationQueueHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationQueueHistoryInclude<ExtArgs> | null
    where?: ValidationQueueHistoryWhereInput
    orderBy?: ValidationQueueHistoryOrderByWithRelationInput | ValidationQueueHistoryOrderByWithRelationInput[]
    cursor?: ValidationQueueHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ValidationQueueHistoryScalarFieldEnum | ValidationQueueHistoryScalarFieldEnum[]
  }

  /**
   * User.analyticsEvents
   */
  export type User$analyticsEventsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsEvent
     */
    select?: AnalyticsEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsEventInclude<ExtArgs> | null
    where?: AnalyticsEventWhereInput
    orderBy?: AnalyticsEventOrderByWithRelationInput | AnalyticsEventOrderByWithRelationInput[]
    cursor?: AnalyticsEventWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AnalyticsEventScalarFieldEnum | AnalyticsEventScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Laboratory
   */

  export type AggregateLaboratory = {
    _count: LaboratoryCountAggregateOutputType | null
    _min: LaboratoryMinAggregateOutputType | null
    _max: LaboratoryMaxAggregateOutputType | null
  }

  export type LaboratoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    accreditation: string | null
    email: string | null
    phone: string | null
    address: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LaboratoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    accreditation: string | null
    email: string | null
    phone: string | null
    address: string | null
    isActive: boolean | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type LaboratoryCountAggregateOutputType = {
    id: number
    name: number
    accreditation: number
    email: number
    phone: number
    address: number
    isActive: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type LaboratoryMinAggregateInputType = {
    id?: true
    name?: true
    accreditation?: true
    email?: true
    phone?: true
    address?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LaboratoryMaxAggregateInputType = {
    id?: true
    name?: true
    accreditation?: true
    email?: true
    phone?: true
    address?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
  }

  export type LaboratoryCountAggregateInputType = {
    id?: true
    name?: true
    accreditation?: true
    email?: true
    phone?: true
    address?: true
    isActive?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type LaboratoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Laboratory to aggregate.
     */
    where?: LaboratoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Laboratories to fetch.
     */
    orderBy?: LaboratoryOrderByWithRelationInput | LaboratoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LaboratoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Laboratories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Laboratories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Laboratories
    **/
    _count?: true | LaboratoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LaboratoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LaboratoryMaxAggregateInputType
  }

  export type GetLaboratoryAggregateType<T extends LaboratoryAggregateArgs> = {
        [P in keyof T & keyof AggregateLaboratory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLaboratory[P]>
      : GetScalarType<T[P], AggregateLaboratory[P]>
  }




  export type LaboratoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LaboratoryWhereInput
    orderBy?: LaboratoryOrderByWithAggregationInput | LaboratoryOrderByWithAggregationInput[]
    by: LaboratoryScalarFieldEnum[] | LaboratoryScalarFieldEnum
    having?: LaboratoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LaboratoryCountAggregateInputType | true
    _min?: LaboratoryMinAggregateInputType
    _max?: LaboratoryMaxAggregateInputType
  }

  export type LaboratoryGroupByOutputType = {
    id: string
    name: string
    accreditation: string
    email: string
    phone: string | null
    address: string | null
    isActive: boolean
    createdAt: Date
    updatedAt: Date
    _count: LaboratoryCountAggregateOutputType | null
    _min: LaboratoryMinAggregateOutputType | null
    _max: LaboratoryMaxAggregateOutputType | null
  }

  type GetLaboratoryGroupByPayload<T extends LaboratoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LaboratoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LaboratoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LaboratoryGroupByOutputType[P]>
            : GetScalarType<T[P], LaboratoryGroupByOutputType[P]>
        }
      >
    >


  export type LaboratorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    accreditation?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reports?: boolean | Laboratory$reportsArgs<ExtArgs>
    _count?: boolean | LaboratoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["laboratory"]>

  export type LaboratorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    accreditation?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["laboratory"]>

  export type LaboratorySelectScalar = {
    id?: boolean
    name?: boolean
    accreditation?: boolean
    email?: boolean
    phone?: boolean
    address?: boolean
    isActive?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type LaboratoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reports?: boolean | Laboratory$reportsArgs<ExtArgs>
    _count?: boolean | LaboratoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LaboratoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $LaboratoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Laboratory"
    objects: {
      reports: Prisma.$ReportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      accreditation: string
      email: string
      phone: string | null
      address: string | null
      isActive: boolean
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["laboratory"]>
    composites: {}
  }

  type LaboratoryGetPayload<S extends boolean | null | undefined | LaboratoryDefaultArgs> = $Result.GetResult<Prisma.$LaboratoryPayload, S>

  type LaboratoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<LaboratoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: LaboratoryCountAggregateInputType | true
    }

  export interface LaboratoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Laboratory'], meta: { name: 'Laboratory' } }
    /**
     * Find zero or one Laboratory that matches the filter.
     * @param {LaboratoryFindUniqueArgs} args - Arguments to find a Laboratory
     * @example
     * // Get one Laboratory
     * const laboratory = await prisma.laboratory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LaboratoryFindUniqueArgs>(args: SelectSubset<T, LaboratoryFindUniqueArgs<ExtArgs>>): Prisma__LaboratoryClient<$Result.GetResult<Prisma.$LaboratoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Laboratory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {LaboratoryFindUniqueOrThrowArgs} args - Arguments to find a Laboratory
     * @example
     * // Get one Laboratory
     * const laboratory = await prisma.laboratory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LaboratoryFindUniqueOrThrowArgs>(args: SelectSubset<T, LaboratoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LaboratoryClient<$Result.GetResult<Prisma.$LaboratoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Laboratory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LaboratoryFindFirstArgs} args - Arguments to find a Laboratory
     * @example
     * // Get one Laboratory
     * const laboratory = await prisma.laboratory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LaboratoryFindFirstArgs>(args?: SelectSubset<T, LaboratoryFindFirstArgs<ExtArgs>>): Prisma__LaboratoryClient<$Result.GetResult<Prisma.$LaboratoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Laboratory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LaboratoryFindFirstOrThrowArgs} args - Arguments to find a Laboratory
     * @example
     * // Get one Laboratory
     * const laboratory = await prisma.laboratory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LaboratoryFindFirstOrThrowArgs>(args?: SelectSubset<T, LaboratoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__LaboratoryClient<$Result.GetResult<Prisma.$LaboratoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Laboratories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LaboratoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Laboratories
     * const laboratories = await prisma.laboratory.findMany()
     * 
     * // Get first 10 Laboratories
     * const laboratories = await prisma.laboratory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const laboratoryWithIdOnly = await prisma.laboratory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LaboratoryFindManyArgs>(args?: SelectSubset<T, LaboratoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LaboratoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Laboratory.
     * @param {LaboratoryCreateArgs} args - Arguments to create a Laboratory.
     * @example
     * // Create one Laboratory
     * const Laboratory = await prisma.laboratory.create({
     *   data: {
     *     // ... data to create a Laboratory
     *   }
     * })
     * 
     */
    create<T extends LaboratoryCreateArgs>(args: SelectSubset<T, LaboratoryCreateArgs<ExtArgs>>): Prisma__LaboratoryClient<$Result.GetResult<Prisma.$LaboratoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Laboratories.
     * @param {LaboratoryCreateManyArgs} args - Arguments to create many Laboratories.
     * @example
     * // Create many Laboratories
     * const laboratory = await prisma.laboratory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LaboratoryCreateManyArgs>(args?: SelectSubset<T, LaboratoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Laboratories and returns the data saved in the database.
     * @param {LaboratoryCreateManyAndReturnArgs} args - Arguments to create many Laboratories.
     * @example
     * // Create many Laboratories
     * const laboratory = await prisma.laboratory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Laboratories and only return the `id`
     * const laboratoryWithIdOnly = await prisma.laboratory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LaboratoryCreateManyAndReturnArgs>(args?: SelectSubset<T, LaboratoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LaboratoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Laboratory.
     * @param {LaboratoryDeleteArgs} args - Arguments to delete one Laboratory.
     * @example
     * // Delete one Laboratory
     * const Laboratory = await prisma.laboratory.delete({
     *   where: {
     *     // ... filter to delete one Laboratory
     *   }
     * })
     * 
     */
    delete<T extends LaboratoryDeleteArgs>(args: SelectSubset<T, LaboratoryDeleteArgs<ExtArgs>>): Prisma__LaboratoryClient<$Result.GetResult<Prisma.$LaboratoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Laboratory.
     * @param {LaboratoryUpdateArgs} args - Arguments to update one Laboratory.
     * @example
     * // Update one Laboratory
     * const laboratory = await prisma.laboratory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LaboratoryUpdateArgs>(args: SelectSubset<T, LaboratoryUpdateArgs<ExtArgs>>): Prisma__LaboratoryClient<$Result.GetResult<Prisma.$LaboratoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Laboratories.
     * @param {LaboratoryDeleteManyArgs} args - Arguments to filter Laboratories to delete.
     * @example
     * // Delete a few Laboratories
     * const { count } = await prisma.laboratory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LaboratoryDeleteManyArgs>(args?: SelectSubset<T, LaboratoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Laboratories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LaboratoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Laboratories
     * const laboratory = await prisma.laboratory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LaboratoryUpdateManyArgs>(args: SelectSubset<T, LaboratoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Laboratory.
     * @param {LaboratoryUpsertArgs} args - Arguments to update or create a Laboratory.
     * @example
     * // Update or create a Laboratory
     * const laboratory = await prisma.laboratory.upsert({
     *   create: {
     *     // ... data to create a Laboratory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Laboratory we want to update
     *   }
     * })
     */
    upsert<T extends LaboratoryUpsertArgs>(args: SelectSubset<T, LaboratoryUpsertArgs<ExtArgs>>): Prisma__LaboratoryClient<$Result.GetResult<Prisma.$LaboratoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Laboratories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LaboratoryCountArgs} args - Arguments to filter Laboratories to count.
     * @example
     * // Count the number of Laboratories
     * const count = await prisma.laboratory.count({
     *   where: {
     *     // ... the filter for the Laboratories we want to count
     *   }
     * })
    **/
    count<T extends LaboratoryCountArgs>(
      args?: Subset<T, LaboratoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LaboratoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Laboratory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LaboratoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LaboratoryAggregateArgs>(args: Subset<T, LaboratoryAggregateArgs>): Prisma.PrismaPromise<GetLaboratoryAggregateType<T>>

    /**
     * Group by Laboratory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LaboratoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LaboratoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LaboratoryGroupByArgs['orderBy'] }
        : { orderBy?: LaboratoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LaboratoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLaboratoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Laboratory model
   */
  readonly fields: LaboratoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Laboratory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LaboratoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    reports<T extends Laboratory$reportsArgs<ExtArgs> = {}>(args?: Subset<T, Laboratory$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Laboratory model
   */ 
  interface LaboratoryFieldRefs {
    readonly id: FieldRef<"Laboratory", 'String'>
    readonly name: FieldRef<"Laboratory", 'String'>
    readonly accreditation: FieldRef<"Laboratory", 'String'>
    readonly email: FieldRef<"Laboratory", 'String'>
    readonly phone: FieldRef<"Laboratory", 'String'>
    readonly address: FieldRef<"Laboratory", 'String'>
    readonly isActive: FieldRef<"Laboratory", 'Boolean'>
    readonly createdAt: FieldRef<"Laboratory", 'DateTime'>
    readonly updatedAt: FieldRef<"Laboratory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Laboratory findUnique
   */
  export type LaboratoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Laboratory
     */
    select?: LaboratorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LaboratoryInclude<ExtArgs> | null
    /**
     * Filter, which Laboratory to fetch.
     */
    where: LaboratoryWhereUniqueInput
  }

  /**
   * Laboratory findUniqueOrThrow
   */
  export type LaboratoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Laboratory
     */
    select?: LaboratorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LaboratoryInclude<ExtArgs> | null
    /**
     * Filter, which Laboratory to fetch.
     */
    where: LaboratoryWhereUniqueInput
  }

  /**
   * Laboratory findFirst
   */
  export type LaboratoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Laboratory
     */
    select?: LaboratorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LaboratoryInclude<ExtArgs> | null
    /**
     * Filter, which Laboratory to fetch.
     */
    where?: LaboratoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Laboratories to fetch.
     */
    orderBy?: LaboratoryOrderByWithRelationInput | LaboratoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Laboratories.
     */
    cursor?: LaboratoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Laboratories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Laboratories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Laboratories.
     */
    distinct?: LaboratoryScalarFieldEnum | LaboratoryScalarFieldEnum[]
  }

  /**
   * Laboratory findFirstOrThrow
   */
  export type LaboratoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Laboratory
     */
    select?: LaboratorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LaboratoryInclude<ExtArgs> | null
    /**
     * Filter, which Laboratory to fetch.
     */
    where?: LaboratoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Laboratories to fetch.
     */
    orderBy?: LaboratoryOrderByWithRelationInput | LaboratoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Laboratories.
     */
    cursor?: LaboratoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Laboratories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Laboratories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Laboratories.
     */
    distinct?: LaboratoryScalarFieldEnum | LaboratoryScalarFieldEnum[]
  }

  /**
   * Laboratory findMany
   */
  export type LaboratoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Laboratory
     */
    select?: LaboratorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LaboratoryInclude<ExtArgs> | null
    /**
     * Filter, which Laboratories to fetch.
     */
    where?: LaboratoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Laboratories to fetch.
     */
    orderBy?: LaboratoryOrderByWithRelationInput | LaboratoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Laboratories.
     */
    cursor?: LaboratoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Laboratories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Laboratories.
     */
    skip?: number
    distinct?: LaboratoryScalarFieldEnum | LaboratoryScalarFieldEnum[]
  }

  /**
   * Laboratory create
   */
  export type LaboratoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Laboratory
     */
    select?: LaboratorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LaboratoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Laboratory.
     */
    data: XOR<LaboratoryCreateInput, LaboratoryUncheckedCreateInput>
  }

  /**
   * Laboratory createMany
   */
  export type LaboratoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Laboratories.
     */
    data: LaboratoryCreateManyInput | LaboratoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Laboratory createManyAndReturn
   */
  export type LaboratoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Laboratory
     */
    select?: LaboratorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Laboratories.
     */
    data: LaboratoryCreateManyInput | LaboratoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Laboratory update
   */
  export type LaboratoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Laboratory
     */
    select?: LaboratorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LaboratoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Laboratory.
     */
    data: XOR<LaboratoryUpdateInput, LaboratoryUncheckedUpdateInput>
    /**
     * Choose, which Laboratory to update.
     */
    where: LaboratoryWhereUniqueInput
  }

  /**
   * Laboratory updateMany
   */
  export type LaboratoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Laboratories.
     */
    data: XOR<LaboratoryUpdateManyMutationInput, LaboratoryUncheckedUpdateManyInput>
    /**
     * Filter which Laboratories to update
     */
    where?: LaboratoryWhereInput
  }

  /**
   * Laboratory upsert
   */
  export type LaboratoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Laboratory
     */
    select?: LaboratorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LaboratoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Laboratory to update in case it exists.
     */
    where: LaboratoryWhereUniqueInput
    /**
     * In case the Laboratory found by the `where` argument doesn't exist, create a new Laboratory with this data.
     */
    create: XOR<LaboratoryCreateInput, LaboratoryUncheckedCreateInput>
    /**
     * In case the Laboratory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LaboratoryUpdateInput, LaboratoryUncheckedUpdateInput>
  }

  /**
   * Laboratory delete
   */
  export type LaboratoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Laboratory
     */
    select?: LaboratorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LaboratoryInclude<ExtArgs> | null
    /**
     * Filter which Laboratory to delete.
     */
    where: LaboratoryWhereUniqueInput
  }

  /**
   * Laboratory deleteMany
   */
  export type LaboratoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Laboratories to delete
     */
    where?: LaboratoryWhereInput
  }

  /**
   * Laboratory.reports
   */
  export type Laboratory$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Laboratory without action
   */
  export type LaboratoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Laboratory
     */
    select?: LaboratorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LaboratoryInclude<ExtArgs> | null
  }


  /**
   * Model Product
   */

  export type AggregateProduct = {
    _count: ProductCountAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  export type ProductMinAggregateOutputType = {
    id: string | null
    name: string | null
    brand: string | null
    category: string | null
    description: string | null
    sku: string | null
    batchNumber: string | null
    nutritionalInfo: string | null
    claims: string | null
    imageUrl: string | null
    qrCode: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type ProductMaxAggregateOutputType = {
    id: string | null
    name: string | null
    brand: string | null
    category: string | null
    description: string | null
    sku: string | null
    batchNumber: string | null
    nutritionalInfo: string | null
    claims: string | null
    imageUrl: string | null
    qrCode: string | null
    status: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type ProductCountAggregateOutputType = {
    id: number
    name: number
    brand: number
    category: number
    description: number
    sku: number
    batchNumber: number
    nutritionalInfo: number
    claims: number
    imageUrl: number
    qrCode: number
    status: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type ProductMinAggregateInputType = {
    id?: true
    name?: true
    brand?: true
    category?: true
    description?: true
    sku?: true
    batchNumber?: true
    nutritionalInfo?: true
    claims?: true
    imageUrl?: true
    qrCode?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type ProductMaxAggregateInputType = {
    id?: true
    name?: true
    brand?: true
    category?: true
    description?: true
    sku?: true
    batchNumber?: true
    nutritionalInfo?: true
    claims?: true
    imageUrl?: true
    qrCode?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type ProductCountAggregateInputType = {
    id?: true
    name?: true
    brand?: true
    category?: true
    description?: true
    sku?: true
    batchNumber?: true
    nutritionalInfo?: true
    claims?: true
    imageUrl?: true
    qrCode?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type ProductAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Product to aggregate.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Products
    **/
    _count?: true | ProductCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductMaxAggregateInputType
  }

  export type GetProductAggregateType<T extends ProductAggregateArgs> = {
        [P in keyof T & keyof AggregateProduct]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProduct[P]>
      : GetScalarType<T[P], AggregateProduct[P]>
  }




  export type ProductGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductWhereInput
    orderBy?: ProductOrderByWithAggregationInput | ProductOrderByWithAggregationInput[]
    by: ProductScalarFieldEnum[] | ProductScalarFieldEnum
    having?: ProductScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductCountAggregateInputType | true
    _min?: ProductMinAggregateInputType
    _max?: ProductMaxAggregateInputType
  }

  export type ProductGroupByOutputType = {
    id: string
    name: string
    brand: string
    category: string
    description: string | null
    sku: string
    batchNumber: string | null
    nutritionalInfo: string | null
    claims: string | null
    imageUrl: string | null
    qrCode: string | null
    status: string
    createdAt: Date
    updatedAt: Date
    userId: string
    _count: ProductCountAggregateOutputType | null
    _min: ProductMinAggregateOutputType | null
    _max: ProductMaxAggregateOutputType | null
  }

  type GetProductGroupByPayload<T extends ProductGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductGroupByOutputType[P]>
            : GetScalarType<T[P], ProductGroupByOutputType[P]>
        }
      >
    >


  export type ProductSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    brand?: boolean
    category?: boolean
    description?: boolean
    sku?: boolean
    batchNumber?: boolean
    nutritionalInfo?: boolean
    claims?: boolean
    imageUrl?: boolean
    qrCode?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    validations?: boolean | Product$validationsArgs<ExtArgs>
    reports?: boolean | Product$reportsArgs<ExtArgs>
    seals?: boolean | Product$sealsArgs<ExtArgs>
    validationQueue?: boolean | Product$validationQueueArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    brand?: boolean
    category?: boolean
    description?: boolean
    sku?: boolean
    batchNumber?: boolean
    nutritionalInfo?: boolean
    claims?: boolean
    imageUrl?: boolean
    qrCode?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["product"]>

  export type ProductSelectScalar = {
    id?: boolean
    name?: boolean
    brand?: boolean
    category?: boolean
    description?: boolean
    sku?: boolean
    batchNumber?: boolean
    nutritionalInfo?: boolean
    claims?: boolean
    imageUrl?: boolean
    qrCode?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type ProductInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    validations?: boolean | Product$validationsArgs<ExtArgs>
    reports?: boolean | Product$reportsArgs<ExtArgs>
    seals?: boolean | Product$sealsArgs<ExtArgs>
    validationQueue?: boolean | Product$validationQueueArgs<ExtArgs>
    _count?: boolean | ProductCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ProductIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProductPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Product"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      validations: Prisma.$ValidationPayload<ExtArgs>[]
      reports: Prisma.$ReportPayload<ExtArgs>[]
      seals: Prisma.$ProductSealPayload<ExtArgs>[]
      validationQueue: Prisma.$ValidationQueuePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      brand: string
      category: string
      description: string | null
      sku: string
      batchNumber: string | null
      nutritionalInfo: string | null
      claims: string | null
      imageUrl: string | null
      qrCode: string | null
      status: string
      createdAt: Date
      updatedAt: Date
      userId: string
    }, ExtArgs["result"]["product"]>
    composites: {}
  }

  type ProductGetPayload<S extends boolean | null | undefined | ProductDefaultArgs> = $Result.GetResult<Prisma.$ProductPayload, S>

  type ProductCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductCountAggregateInputType | true
    }

  export interface ProductDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Product'], meta: { name: 'Product' } }
    /**
     * Find zero or one Product that matches the filter.
     * @param {ProductFindUniqueArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductFindUniqueArgs>(args: SelectSubset<T, ProductFindUniqueArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Product that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProductFindUniqueOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Product that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductFindFirstArgs>(args?: SelectSubset<T, ProductFindFirstArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Product that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindFirstOrThrowArgs} args - Arguments to find a Product
     * @example
     * // Get one Product
     * const product = await prisma.product.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.product.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.product.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productWithIdOnly = await prisma.product.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductFindManyArgs>(args?: SelectSubset<T, ProductFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Product.
     * @param {ProductCreateArgs} args - Arguments to create a Product.
     * @example
     * // Create one Product
     * const Product = await prisma.product.create({
     *   data: {
     *     // ... data to create a Product
     *   }
     * })
     * 
     */
    create<T extends ProductCreateArgs>(args: SelectSubset<T, ProductCreateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Products.
     * @param {ProductCreateManyArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductCreateManyArgs>(args?: SelectSubset<T, ProductCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Products and returns the data saved in the database.
     * @param {ProductCreateManyAndReturnArgs} args - Arguments to create many Products.
     * @example
     * // Create many Products
     * const product = await prisma.product.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Products and only return the `id`
     * const productWithIdOnly = await prisma.product.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Product.
     * @param {ProductDeleteArgs} args - Arguments to delete one Product.
     * @example
     * // Delete one Product
     * const Product = await prisma.product.delete({
     *   where: {
     *     // ... filter to delete one Product
     *   }
     * })
     * 
     */
    delete<T extends ProductDeleteArgs>(args: SelectSubset<T, ProductDeleteArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Product.
     * @param {ProductUpdateArgs} args - Arguments to update one Product.
     * @example
     * // Update one Product
     * const product = await prisma.product.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductUpdateArgs>(args: SelectSubset<T, ProductUpdateArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {ProductDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.product.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductDeleteManyArgs>(args?: SelectSubset<T, ProductDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const product = await prisma.product.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductUpdateManyArgs>(args: SelectSubset<T, ProductUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Product.
     * @param {ProductUpsertArgs} args - Arguments to update or create a Product.
     * @example
     * // Update or create a Product
     * const product = await prisma.product.upsert({
     *   create: {
     *     // ... data to create a Product
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Product we want to update
     *   }
     * })
     */
    upsert<T extends ProductUpsertArgs>(args: SelectSubset<T, ProductUpsertArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.product.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends ProductCountArgs>(
      args?: Subset<T, ProductCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductAggregateArgs>(args: Subset<T, ProductAggregateArgs>): Prisma.PrismaPromise<GetProductAggregateType<T>>

    /**
     * Group by Product.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductGroupByArgs['orderBy'] }
        : { orderBy?: ProductGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Product model
   */
  readonly fields: ProductFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Product.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    validations<T extends Product$validationsArgs<ExtArgs> = {}>(args?: Subset<T, Product$validationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValidationPayload<ExtArgs>, T, "findMany"> | Null>
    reports<T extends Product$reportsArgs<ExtArgs> = {}>(args?: Subset<T, Product$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany"> | Null>
    seals<T extends Product$sealsArgs<ExtArgs> = {}>(args?: Subset<T, Product$sealsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductSealPayload<ExtArgs>, T, "findMany"> | Null>
    validationQueue<T extends Product$validationQueueArgs<ExtArgs> = {}>(args?: Subset<T, Product$validationQueueArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValidationQueuePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Product model
   */ 
  interface ProductFieldRefs {
    readonly id: FieldRef<"Product", 'String'>
    readonly name: FieldRef<"Product", 'String'>
    readonly brand: FieldRef<"Product", 'String'>
    readonly category: FieldRef<"Product", 'String'>
    readonly description: FieldRef<"Product", 'String'>
    readonly sku: FieldRef<"Product", 'String'>
    readonly batchNumber: FieldRef<"Product", 'String'>
    readonly nutritionalInfo: FieldRef<"Product", 'String'>
    readonly claims: FieldRef<"Product", 'String'>
    readonly imageUrl: FieldRef<"Product", 'String'>
    readonly qrCode: FieldRef<"Product", 'String'>
    readonly status: FieldRef<"Product", 'String'>
    readonly createdAt: FieldRef<"Product", 'DateTime'>
    readonly updatedAt: FieldRef<"Product", 'DateTime'>
    readonly userId: FieldRef<"Product", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Product findUnique
   */
  export type ProductFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findUniqueOrThrow
   */
  export type ProductFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product findFirst
   */
  export type ProductFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findFirstOrThrow
   */
  export type ProductFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Product to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Products.
     */
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product findMany
   */
  export type ProductFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter, which Products to fetch.
     */
    where?: ProductWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Products to fetch.
     */
    orderBy?: ProductOrderByWithRelationInput | ProductOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Products.
     */
    cursor?: ProductWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Products.
     */
    skip?: number
    distinct?: ProductScalarFieldEnum | ProductScalarFieldEnum[]
  }

  /**
   * Product create
   */
  export type ProductCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to create a Product.
     */
    data: XOR<ProductCreateInput, ProductUncheckedCreateInput>
  }

  /**
   * Product createMany
   */
  export type ProductCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Product createManyAndReturn
   */
  export type ProductCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Products.
     */
    data: ProductCreateManyInput | ProductCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Product update
   */
  export type ProductUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The data needed to update a Product.
     */
    data: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
    /**
     * Choose, which Product to update.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product updateMany
   */
  export type ProductUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Products.
     */
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyInput>
    /**
     * Filter which Products to update
     */
    where?: ProductWhereInput
  }

  /**
   * Product upsert
   */
  export type ProductUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * The filter to search for the Product to update in case it exists.
     */
    where: ProductWhereUniqueInput
    /**
     * In case the Product found by the `where` argument doesn't exist, create a new Product with this data.
     */
    create: XOR<ProductCreateInput, ProductUncheckedCreateInput>
    /**
     * In case the Product was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductUpdateInput, ProductUncheckedUpdateInput>
  }

  /**
   * Product delete
   */
  export type ProductDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
    /**
     * Filter which Product to delete.
     */
    where: ProductWhereUniqueInput
  }

  /**
   * Product deleteMany
   */
  export type ProductDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Products to delete
     */
    where?: ProductWhereInput
  }

  /**
   * Product.validations
   */
  export type Product$validationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Validation
     */
    select?: ValidationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationInclude<ExtArgs> | null
    where?: ValidationWhereInput
    orderBy?: ValidationOrderByWithRelationInput | ValidationOrderByWithRelationInput[]
    cursor?: ValidationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ValidationScalarFieldEnum | ValidationScalarFieldEnum[]
  }

  /**
   * Product.reports
   */
  export type Product$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Product.seals
   */
  export type Product$sealsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSeal
     */
    select?: ProductSealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSealInclude<ExtArgs> | null
    where?: ProductSealWhereInput
    orderBy?: ProductSealOrderByWithRelationInput | ProductSealOrderByWithRelationInput[]
    cursor?: ProductSealWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductSealScalarFieldEnum | ProductSealScalarFieldEnum[]
  }

  /**
   * Product.validationQueue
   */
  export type Product$validationQueueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationQueue
     */
    select?: ValidationQueueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationQueueInclude<ExtArgs> | null
    where?: ValidationQueueWhereInput
    orderBy?: ValidationQueueOrderByWithRelationInput | ValidationQueueOrderByWithRelationInput[]
    cursor?: ValidationQueueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ValidationQueueScalarFieldEnum | ValidationQueueScalarFieldEnum[]
  }

  /**
   * Product without action
   */
  export type ProductDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Product
     */
    select?: ProductSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductInclude<ExtArgs> | null
  }


  /**
   * Model Report
   */

  export type AggregateReport = {
    _count: ReportCountAggregateOutputType | null
    _avg: ReportAvgAggregateOutputType | null
    _sum: ReportSumAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  export type ReportAvgAggregateOutputType = {
    fileSize: number | null
  }

  export type ReportSumAggregateOutputType = {
    fileSize: number | null
  }

  export type ReportMinAggregateOutputType = {
    id: string | null
    fileName: string | null
    originalName: string | null
    filePath: string | null
    fileSize: number | null
    mimeType: string | null
    analysisType: string | null
    results: string | null
    isVerified: boolean | null
    verificationHash: string | null
    createdAt: Date | null
    updatedAt: Date | null
    productId: string | null
    laboratoryId: string | null
  }

  export type ReportMaxAggregateOutputType = {
    id: string | null
    fileName: string | null
    originalName: string | null
    filePath: string | null
    fileSize: number | null
    mimeType: string | null
    analysisType: string | null
    results: string | null
    isVerified: boolean | null
    verificationHash: string | null
    createdAt: Date | null
    updatedAt: Date | null
    productId: string | null
    laboratoryId: string | null
  }

  export type ReportCountAggregateOutputType = {
    id: number
    fileName: number
    originalName: number
    filePath: number
    fileSize: number
    mimeType: number
    analysisType: number
    results: number
    isVerified: number
    verificationHash: number
    createdAt: number
    updatedAt: number
    productId: number
    laboratoryId: number
    _all: number
  }


  export type ReportAvgAggregateInputType = {
    fileSize?: true
  }

  export type ReportSumAggregateInputType = {
    fileSize?: true
  }

  export type ReportMinAggregateInputType = {
    id?: true
    fileName?: true
    originalName?: true
    filePath?: true
    fileSize?: true
    mimeType?: true
    analysisType?: true
    results?: true
    isVerified?: true
    verificationHash?: true
    createdAt?: true
    updatedAt?: true
    productId?: true
    laboratoryId?: true
  }

  export type ReportMaxAggregateInputType = {
    id?: true
    fileName?: true
    originalName?: true
    filePath?: true
    fileSize?: true
    mimeType?: true
    analysisType?: true
    results?: true
    isVerified?: true
    verificationHash?: true
    createdAt?: true
    updatedAt?: true
    productId?: true
    laboratoryId?: true
  }

  export type ReportCountAggregateInputType = {
    id?: true
    fileName?: true
    originalName?: true
    filePath?: true
    fileSize?: true
    mimeType?: true
    analysisType?: true
    results?: true
    isVerified?: true
    verificationHash?: true
    createdAt?: true
    updatedAt?: true
    productId?: true
    laboratoryId?: true
    _all?: true
  }

  export type ReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Report to aggregate.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reports
    **/
    _count?: true | ReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportMaxAggregateInputType
  }

  export type GetReportAggregateType<T extends ReportAggregateArgs> = {
        [P in keyof T & keyof AggregateReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReport[P]>
      : GetScalarType<T[P], AggregateReport[P]>
  }




  export type ReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithAggregationInput | ReportOrderByWithAggregationInput[]
    by: ReportScalarFieldEnum[] | ReportScalarFieldEnum
    having?: ReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportCountAggregateInputType | true
    _avg?: ReportAvgAggregateInputType
    _sum?: ReportSumAggregateInputType
    _min?: ReportMinAggregateInputType
    _max?: ReportMaxAggregateInputType
  }

  export type ReportGroupByOutputType = {
    id: string
    fileName: string
    originalName: string
    filePath: string
    fileSize: number
    mimeType: string
    analysisType: string
    results: string
    isVerified: boolean
    verificationHash: string | null
    createdAt: Date
    updatedAt: Date
    productId: string
    laboratoryId: string
    _count: ReportCountAggregateOutputType | null
    _avg: ReportAvgAggregateOutputType | null
    _sum: ReportSumAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  type GetReportGroupByPayload<T extends ReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportGroupByOutputType[P]>
            : GetScalarType<T[P], ReportGroupByOutputType[P]>
        }
      >
    >


  export type ReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileName?: boolean
    originalName?: boolean
    filePath?: boolean
    fileSize?: boolean
    mimeType?: boolean
    analysisType?: boolean
    results?: boolean
    isVerified?: boolean
    verificationHash?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    productId?: boolean
    laboratoryId?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    laboratory?: boolean | LaboratoryDefaultArgs<ExtArgs>
    validations?: boolean | Report$validationsArgs<ExtArgs>
    _count?: boolean | ReportCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    fileName?: boolean
    originalName?: boolean
    filePath?: boolean
    fileSize?: boolean
    mimeType?: boolean
    analysisType?: boolean
    results?: boolean
    isVerified?: boolean
    verificationHash?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    productId?: boolean
    laboratoryId?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    laboratory?: boolean | LaboratoryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectScalar = {
    id?: boolean
    fileName?: boolean
    originalName?: boolean
    filePath?: boolean
    fileSize?: boolean
    mimeType?: boolean
    analysisType?: boolean
    results?: boolean
    isVerified?: boolean
    verificationHash?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    productId?: boolean
    laboratoryId?: boolean
  }

  export type ReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    laboratory?: boolean | LaboratoryDefaultArgs<ExtArgs>
    validations?: boolean | Report$validationsArgs<ExtArgs>
    _count?: boolean | ReportCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    laboratory?: boolean | LaboratoryDefaultArgs<ExtArgs>
  }

  export type $ReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Report"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
      laboratory: Prisma.$LaboratoryPayload<ExtArgs>
      validations: Prisma.$ValidationPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      fileName: string
      originalName: string
      filePath: string
      fileSize: number
      mimeType: string
      analysisType: string
      results: string
      isVerified: boolean
      verificationHash: string | null
      createdAt: Date
      updatedAt: Date
      productId: string
      laboratoryId: string
    }, ExtArgs["result"]["report"]>
    composites: {}
  }

  type ReportGetPayload<S extends boolean | null | undefined | ReportDefaultArgs> = $Result.GetResult<Prisma.$ReportPayload, S>

  type ReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ReportFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ReportCountAggregateInputType | true
    }

  export interface ReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Report'], meta: { name: 'Report' } }
    /**
     * Find zero or one Report that matches the filter.
     * @param {ReportFindUniqueArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportFindUniqueArgs>(args: SelectSubset<T, ReportFindUniqueArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Report that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ReportFindUniqueOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Report that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportFindFirstArgs>(args?: SelectSubset<T, ReportFindFirstArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Report that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reports
     * const reports = await prisma.report.findMany()
     * 
     * // Get first 10 Reports
     * const reports = await prisma.report.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportWithIdOnly = await prisma.report.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportFindManyArgs>(args?: SelectSubset<T, ReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Report.
     * @param {ReportCreateArgs} args - Arguments to create a Report.
     * @example
     * // Create one Report
     * const Report = await prisma.report.create({
     *   data: {
     *     // ... data to create a Report
     *   }
     * })
     * 
     */
    create<T extends ReportCreateArgs>(args: SelectSubset<T, ReportCreateArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Reports.
     * @param {ReportCreateManyArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const report = await prisma.report.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportCreateManyArgs>(args?: SelectSubset<T, ReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reports and returns the data saved in the database.
     * @param {ReportCreateManyAndReturnArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const report = await prisma.report.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reports and only return the `id`
     * const reportWithIdOnly = await prisma.report.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Report.
     * @param {ReportDeleteArgs} args - Arguments to delete one Report.
     * @example
     * // Delete one Report
     * const Report = await prisma.report.delete({
     *   where: {
     *     // ... filter to delete one Report
     *   }
     * })
     * 
     */
    delete<T extends ReportDeleteArgs>(args: SelectSubset<T, ReportDeleteArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Report.
     * @param {ReportUpdateArgs} args - Arguments to update one Report.
     * @example
     * // Update one Report
     * const report = await prisma.report.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportUpdateArgs>(args: SelectSubset<T, ReportUpdateArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Reports.
     * @param {ReportDeleteManyArgs} args - Arguments to filter Reports to delete.
     * @example
     * // Delete a few Reports
     * const { count } = await prisma.report.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportDeleteManyArgs>(args?: SelectSubset<T, ReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reports
     * const report = await prisma.report.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportUpdateManyArgs>(args: SelectSubset<T, ReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Report.
     * @param {ReportUpsertArgs} args - Arguments to update or create a Report.
     * @example
     * // Update or create a Report
     * const report = await prisma.report.upsert({
     *   create: {
     *     // ... data to create a Report
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Report we want to update
     *   }
     * })
     */
    upsert<T extends ReportUpsertArgs>(args: SelectSubset<T, ReportUpsertArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCountArgs} args - Arguments to filter Reports to count.
     * @example
     * // Count the number of Reports
     * const count = await prisma.report.count({
     *   where: {
     *     // ... the filter for the Reports we want to count
     *   }
     * })
    **/
    count<T extends ReportCountArgs>(
      args?: Subset<T, ReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportAggregateArgs>(args: Subset<T, ReportAggregateArgs>): Prisma.PrismaPromise<GetReportAggregateType<T>>

    /**
     * Group by Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportGroupByArgs['orderBy'] }
        : { orderBy?: ReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Report model
   */
  readonly fields: ReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Report.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    laboratory<T extends LaboratoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LaboratoryDefaultArgs<ExtArgs>>): Prisma__LaboratoryClient<$Result.GetResult<Prisma.$LaboratoryPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    validations<T extends Report$validationsArgs<ExtArgs> = {}>(args?: Subset<T, Report$validationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValidationPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Report model
   */ 
  interface ReportFieldRefs {
    readonly id: FieldRef<"Report", 'String'>
    readonly fileName: FieldRef<"Report", 'String'>
    readonly originalName: FieldRef<"Report", 'String'>
    readonly filePath: FieldRef<"Report", 'String'>
    readonly fileSize: FieldRef<"Report", 'Int'>
    readonly mimeType: FieldRef<"Report", 'String'>
    readonly analysisType: FieldRef<"Report", 'String'>
    readonly results: FieldRef<"Report", 'String'>
    readonly isVerified: FieldRef<"Report", 'Boolean'>
    readonly verificationHash: FieldRef<"Report", 'String'>
    readonly createdAt: FieldRef<"Report", 'DateTime'>
    readonly updatedAt: FieldRef<"Report", 'DateTime'>
    readonly productId: FieldRef<"Report", 'String'>
    readonly laboratoryId: FieldRef<"Report", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Report findUnique
   */
  export type ReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report findUniqueOrThrow
   */
  export type ReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report findFirst
   */
  export type ReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report findFirstOrThrow
   */
  export type ReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report findMany
   */
  export type ReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Reports to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report create
   */
  export type ReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to create a Report.
     */
    data: XOR<ReportCreateInput, ReportUncheckedCreateInput>
  }

  /**
   * Report createMany
   */
  export type ReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reports.
     */
    data: ReportCreateManyInput | ReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Report createManyAndReturn
   */
  export type ReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Reports.
     */
    data: ReportCreateManyInput | ReportCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Report update
   */
  export type ReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to update a Report.
     */
    data: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
    /**
     * Choose, which Report to update.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report updateMany
   */
  export type ReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reports.
     */
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyInput>
    /**
     * Filter which Reports to update
     */
    where?: ReportWhereInput
  }

  /**
   * Report upsert
   */
  export type ReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The filter to search for the Report to update in case it exists.
     */
    where: ReportWhereUniqueInput
    /**
     * In case the Report found by the `where` argument doesn't exist, create a new Report with this data.
     */
    create: XOR<ReportCreateInput, ReportUncheckedCreateInput>
    /**
     * In case the Report was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
  }

  /**
   * Report delete
   */
  export type ReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter which Report to delete.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report deleteMany
   */
  export type ReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reports to delete
     */
    where?: ReportWhereInput
  }

  /**
   * Report.validations
   */
  export type Report$validationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Validation
     */
    select?: ValidationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationInclude<ExtArgs> | null
    where?: ValidationWhereInput
    orderBy?: ValidationOrderByWithRelationInput | ValidationOrderByWithRelationInput[]
    cursor?: ValidationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ValidationScalarFieldEnum | ValidationScalarFieldEnum[]
  }

  /**
   * Report without action
   */
  export type ReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
  }


  /**
   * Model Validation
   */

  export type AggregateValidation = {
    _count: ValidationCountAggregateOutputType | null
    _min: ValidationMinAggregateOutputType | null
    _max: ValidationMaxAggregateOutputType | null
  }

  export type ValidationMinAggregateOutputType = {
    id: string | null
    status: string | null
    type: string | null
    claimsValidated: string | null
    summary: string | null
    notes: string | null
    validatedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    productId: string | null
    reportId: string | null
    userId: string | null
  }

  export type ValidationMaxAggregateOutputType = {
    id: string | null
    status: string | null
    type: string | null
    claimsValidated: string | null
    summary: string | null
    notes: string | null
    validatedAt: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    productId: string | null
    reportId: string | null
    userId: string | null
  }

  export type ValidationCountAggregateOutputType = {
    id: number
    status: number
    type: number
    claimsValidated: number
    summary: number
    notes: number
    validatedAt: number
    createdAt: number
    updatedAt: number
    productId: number
    reportId: number
    userId: number
    _all: number
  }


  export type ValidationMinAggregateInputType = {
    id?: true
    status?: true
    type?: true
    claimsValidated?: true
    summary?: true
    notes?: true
    validatedAt?: true
    createdAt?: true
    updatedAt?: true
    productId?: true
    reportId?: true
    userId?: true
  }

  export type ValidationMaxAggregateInputType = {
    id?: true
    status?: true
    type?: true
    claimsValidated?: true
    summary?: true
    notes?: true
    validatedAt?: true
    createdAt?: true
    updatedAt?: true
    productId?: true
    reportId?: true
    userId?: true
  }

  export type ValidationCountAggregateInputType = {
    id?: true
    status?: true
    type?: true
    claimsValidated?: true
    summary?: true
    notes?: true
    validatedAt?: true
    createdAt?: true
    updatedAt?: true
    productId?: true
    reportId?: true
    userId?: true
    _all?: true
  }

  export type ValidationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Validation to aggregate.
     */
    where?: ValidationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Validations to fetch.
     */
    orderBy?: ValidationOrderByWithRelationInput | ValidationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ValidationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Validations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Validations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Validations
    **/
    _count?: true | ValidationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ValidationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ValidationMaxAggregateInputType
  }

  export type GetValidationAggregateType<T extends ValidationAggregateArgs> = {
        [P in keyof T & keyof AggregateValidation]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateValidation[P]>
      : GetScalarType<T[P], AggregateValidation[P]>
  }




  export type ValidationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ValidationWhereInput
    orderBy?: ValidationOrderByWithAggregationInput | ValidationOrderByWithAggregationInput[]
    by: ValidationScalarFieldEnum[] | ValidationScalarFieldEnum
    having?: ValidationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ValidationCountAggregateInputType | true
    _min?: ValidationMinAggregateInputType
    _max?: ValidationMaxAggregateInputType
  }

  export type ValidationGroupByOutputType = {
    id: string
    status: string
    type: string
    claimsValidated: string | null
    summary: string | null
    notes: string | null
    validatedAt: Date | null
    createdAt: Date
    updatedAt: Date
    productId: string
    reportId: string | null
    userId: string
    _count: ValidationCountAggregateOutputType | null
    _min: ValidationMinAggregateOutputType | null
    _max: ValidationMaxAggregateOutputType | null
  }

  type GetValidationGroupByPayload<T extends ValidationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ValidationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ValidationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ValidationGroupByOutputType[P]>
            : GetScalarType<T[P], ValidationGroupByOutputType[P]>
        }
      >
    >


  export type ValidationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    type?: boolean
    claimsValidated?: boolean
    summary?: boolean
    notes?: boolean
    validatedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    productId?: boolean
    reportId?: boolean
    userId?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    report?: boolean | Validation$reportArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["validation"]>

  export type ValidationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    status?: boolean
    type?: boolean
    claimsValidated?: boolean
    summary?: boolean
    notes?: boolean
    validatedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    productId?: boolean
    reportId?: boolean
    userId?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    report?: boolean | Validation$reportArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["validation"]>

  export type ValidationSelectScalar = {
    id?: boolean
    status?: boolean
    type?: boolean
    claimsValidated?: boolean
    summary?: boolean
    notes?: boolean
    validatedAt?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    productId?: boolean
    reportId?: boolean
    userId?: boolean
  }

  export type ValidationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    report?: boolean | Validation$reportArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ValidationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    report?: boolean | Validation$reportArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ValidationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Validation"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
      report: Prisma.$ReportPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      status: string
      type: string
      claimsValidated: string | null
      summary: string | null
      notes: string | null
      validatedAt: Date | null
      createdAt: Date
      updatedAt: Date
      productId: string
      reportId: string | null
      userId: string
    }, ExtArgs["result"]["validation"]>
    composites: {}
  }

  type ValidationGetPayload<S extends boolean | null | undefined | ValidationDefaultArgs> = $Result.GetResult<Prisma.$ValidationPayload, S>

  type ValidationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ValidationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ValidationCountAggregateInputType | true
    }

  export interface ValidationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Validation'], meta: { name: 'Validation' } }
    /**
     * Find zero or one Validation that matches the filter.
     * @param {ValidationFindUniqueArgs} args - Arguments to find a Validation
     * @example
     * // Get one Validation
     * const validation = await prisma.validation.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ValidationFindUniqueArgs>(args: SelectSubset<T, ValidationFindUniqueArgs<ExtArgs>>): Prisma__ValidationClient<$Result.GetResult<Prisma.$ValidationPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Validation that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ValidationFindUniqueOrThrowArgs} args - Arguments to find a Validation
     * @example
     * // Get one Validation
     * const validation = await prisma.validation.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ValidationFindUniqueOrThrowArgs>(args: SelectSubset<T, ValidationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ValidationClient<$Result.GetResult<Prisma.$ValidationPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Validation that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationFindFirstArgs} args - Arguments to find a Validation
     * @example
     * // Get one Validation
     * const validation = await prisma.validation.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ValidationFindFirstArgs>(args?: SelectSubset<T, ValidationFindFirstArgs<ExtArgs>>): Prisma__ValidationClient<$Result.GetResult<Prisma.$ValidationPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Validation that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationFindFirstOrThrowArgs} args - Arguments to find a Validation
     * @example
     * // Get one Validation
     * const validation = await prisma.validation.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ValidationFindFirstOrThrowArgs>(args?: SelectSubset<T, ValidationFindFirstOrThrowArgs<ExtArgs>>): Prisma__ValidationClient<$Result.GetResult<Prisma.$ValidationPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Validations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Validations
     * const validations = await prisma.validation.findMany()
     * 
     * // Get first 10 Validations
     * const validations = await prisma.validation.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const validationWithIdOnly = await prisma.validation.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ValidationFindManyArgs>(args?: SelectSubset<T, ValidationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValidationPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Validation.
     * @param {ValidationCreateArgs} args - Arguments to create a Validation.
     * @example
     * // Create one Validation
     * const Validation = await prisma.validation.create({
     *   data: {
     *     // ... data to create a Validation
     *   }
     * })
     * 
     */
    create<T extends ValidationCreateArgs>(args: SelectSubset<T, ValidationCreateArgs<ExtArgs>>): Prisma__ValidationClient<$Result.GetResult<Prisma.$ValidationPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Validations.
     * @param {ValidationCreateManyArgs} args - Arguments to create many Validations.
     * @example
     * // Create many Validations
     * const validation = await prisma.validation.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ValidationCreateManyArgs>(args?: SelectSubset<T, ValidationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Validations and returns the data saved in the database.
     * @param {ValidationCreateManyAndReturnArgs} args - Arguments to create many Validations.
     * @example
     * // Create many Validations
     * const validation = await prisma.validation.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Validations and only return the `id`
     * const validationWithIdOnly = await prisma.validation.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ValidationCreateManyAndReturnArgs>(args?: SelectSubset<T, ValidationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValidationPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a Validation.
     * @param {ValidationDeleteArgs} args - Arguments to delete one Validation.
     * @example
     * // Delete one Validation
     * const Validation = await prisma.validation.delete({
     *   where: {
     *     // ... filter to delete one Validation
     *   }
     * })
     * 
     */
    delete<T extends ValidationDeleteArgs>(args: SelectSubset<T, ValidationDeleteArgs<ExtArgs>>): Prisma__ValidationClient<$Result.GetResult<Prisma.$ValidationPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Validation.
     * @param {ValidationUpdateArgs} args - Arguments to update one Validation.
     * @example
     * // Update one Validation
     * const validation = await prisma.validation.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ValidationUpdateArgs>(args: SelectSubset<T, ValidationUpdateArgs<ExtArgs>>): Prisma__ValidationClient<$Result.GetResult<Prisma.$ValidationPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Validations.
     * @param {ValidationDeleteManyArgs} args - Arguments to filter Validations to delete.
     * @example
     * // Delete a few Validations
     * const { count } = await prisma.validation.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ValidationDeleteManyArgs>(args?: SelectSubset<T, ValidationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Validations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Validations
     * const validation = await prisma.validation.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ValidationUpdateManyArgs>(args: SelectSubset<T, ValidationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Validation.
     * @param {ValidationUpsertArgs} args - Arguments to update or create a Validation.
     * @example
     * // Update or create a Validation
     * const validation = await prisma.validation.upsert({
     *   create: {
     *     // ... data to create a Validation
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Validation we want to update
     *   }
     * })
     */
    upsert<T extends ValidationUpsertArgs>(args: SelectSubset<T, ValidationUpsertArgs<ExtArgs>>): Prisma__ValidationClient<$Result.GetResult<Prisma.$ValidationPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Validations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationCountArgs} args - Arguments to filter Validations to count.
     * @example
     * // Count the number of Validations
     * const count = await prisma.validation.count({
     *   where: {
     *     // ... the filter for the Validations we want to count
     *   }
     * })
    **/
    count<T extends ValidationCountArgs>(
      args?: Subset<T, ValidationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ValidationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Validation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ValidationAggregateArgs>(args: Subset<T, ValidationAggregateArgs>): Prisma.PrismaPromise<GetValidationAggregateType<T>>

    /**
     * Group by Validation.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ValidationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ValidationGroupByArgs['orderBy'] }
        : { orderBy?: ValidationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ValidationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetValidationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Validation model
   */
  readonly fields: ValidationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Validation.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ValidationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    report<T extends Validation$reportArgs<ExtArgs> = {}>(args?: Subset<T, Validation$reportArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Validation model
   */ 
  interface ValidationFieldRefs {
    readonly id: FieldRef<"Validation", 'String'>
    readonly status: FieldRef<"Validation", 'String'>
    readonly type: FieldRef<"Validation", 'String'>
    readonly claimsValidated: FieldRef<"Validation", 'String'>
    readonly summary: FieldRef<"Validation", 'String'>
    readonly notes: FieldRef<"Validation", 'String'>
    readonly validatedAt: FieldRef<"Validation", 'DateTime'>
    readonly createdAt: FieldRef<"Validation", 'DateTime'>
    readonly updatedAt: FieldRef<"Validation", 'DateTime'>
    readonly productId: FieldRef<"Validation", 'String'>
    readonly reportId: FieldRef<"Validation", 'String'>
    readonly userId: FieldRef<"Validation", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Validation findUnique
   */
  export type ValidationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Validation
     */
    select?: ValidationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationInclude<ExtArgs> | null
    /**
     * Filter, which Validation to fetch.
     */
    where: ValidationWhereUniqueInput
  }

  /**
   * Validation findUniqueOrThrow
   */
  export type ValidationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Validation
     */
    select?: ValidationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationInclude<ExtArgs> | null
    /**
     * Filter, which Validation to fetch.
     */
    where: ValidationWhereUniqueInput
  }

  /**
   * Validation findFirst
   */
  export type ValidationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Validation
     */
    select?: ValidationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationInclude<ExtArgs> | null
    /**
     * Filter, which Validation to fetch.
     */
    where?: ValidationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Validations to fetch.
     */
    orderBy?: ValidationOrderByWithRelationInput | ValidationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Validations.
     */
    cursor?: ValidationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Validations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Validations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Validations.
     */
    distinct?: ValidationScalarFieldEnum | ValidationScalarFieldEnum[]
  }

  /**
   * Validation findFirstOrThrow
   */
  export type ValidationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Validation
     */
    select?: ValidationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationInclude<ExtArgs> | null
    /**
     * Filter, which Validation to fetch.
     */
    where?: ValidationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Validations to fetch.
     */
    orderBy?: ValidationOrderByWithRelationInput | ValidationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Validations.
     */
    cursor?: ValidationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Validations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Validations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Validations.
     */
    distinct?: ValidationScalarFieldEnum | ValidationScalarFieldEnum[]
  }

  /**
   * Validation findMany
   */
  export type ValidationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Validation
     */
    select?: ValidationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationInclude<ExtArgs> | null
    /**
     * Filter, which Validations to fetch.
     */
    where?: ValidationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Validations to fetch.
     */
    orderBy?: ValidationOrderByWithRelationInput | ValidationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Validations.
     */
    cursor?: ValidationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Validations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Validations.
     */
    skip?: number
    distinct?: ValidationScalarFieldEnum | ValidationScalarFieldEnum[]
  }

  /**
   * Validation create
   */
  export type ValidationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Validation
     */
    select?: ValidationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationInclude<ExtArgs> | null
    /**
     * The data needed to create a Validation.
     */
    data: XOR<ValidationCreateInput, ValidationUncheckedCreateInput>
  }

  /**
   * Validation createMany
   */
  export type ValidationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Validations.
     */
    data: ValidationCreateManyInput | ValidationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Validation createManyAndReturn
   */
  export type ValidationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Validation
     */
    select?: ValidationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many Validations.
     */
    data: ValidationCreateManyInput | ValidationCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Validation update
   */
  export type ValidationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Validation
     */
    select?: ValidationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationInclude<ExtArgs> | null
    /**
     * The data needed to update a Validation.
     */
    data: XOR<ValidationUpdateInput, ValidationUncheckedUpdateInput>
    /**
     * Choose, which Validation to update.
     */
    where: ValidationWhereUniqueInput
  }

  /**
   * Validation updateMany
   */
  export type ValidationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Validations.
     */
    data: XOR<ValidationUpdateManyMutationInput, ValidationUncheckedUpdateManyInput>
    /**
     * Filter which Validations to update
     */
    where?: ValidationWhereInput
  }

  /**
   * Validation upsert
   */
  export type ValidationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Validation
     */
    select?: ValidationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationInclude<ExtArgs> | null
    /**
     * The filter to search for the Validation to update in case it exists.
     */
    where: ValidationWhereUniqueInput
    /**
     * In case the Validation found by the `where` argument doesn't exist, create a new Validation with this data.
     */
    create: XOR<ValidationCreateInput, ValidationUncheckedCreateInput>
    /**
     * In case the Validation was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ValidationUpdateInput, ValidationUncheckedUpdateInput>
  }

  /**
   * Validation delete
   */
  export type ValidationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Validation
     */
    select?: ValidationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationInclude<ExtArgs> | null
    /**
     * Filter which Validation to delete.
     */
    where: ValidationWhereUniqueInput
  }

  /**
   * Validation deleteMany
   */
  export type ValidationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Validations to delete
     */
    where?: ValidationWhereInput
  }

  /**
   * Validation.report
   */
  export type Validation$reportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
  }

  /**
   * Validation without action
   */
  export type ValidationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Validation
     */
    select?: ValidationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationInclude<ExtArgs> | null
  }


  /**
   * Model ProductSeal
   */

  export type AggregateProductSeal = {
    _count: ProductSealCountAggregateOutputType | null
    _min: ProductSealMinAggregateOutputType | null
    _max: ProductSealMaxAggregateOutputType | null
  }

  export type ProductSealMinAggregateOutputType = {
    id: string | null
    productId: string | null
    sealId: string | null
    certificateNumber: string | null
    issuedDate: Date | null
    expiryDate: Date | null
    validatingLaboratory: string | null
    documentUrl: string | null
    status: string | null
    verifiedBy: string | null
    verifiedAt: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductSealMaxAggregateOutputType = {
    id: string | null
    productId: string | null
    sealId: string | null
    certificateNumber: string | null
    issuedDate: Date | null
    expiryDate: Date | null
    validatingLaboratory: string | null
    documentUrl: string | null
    status: string | null
    verifiedBy: string | null
    verifiedAt: Date | null
    notes: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ProductSealCountAggregateOutputType = {
    id: number
    productId: number
    sealId: number
    certificateNumber: number
    issuedDate: number
    expiryDate: number
    validatingLaboratory: number
    documentUrl: number
    status: number
    verifiedBy: number
    verifiedAt: number
    notes: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ProductSealMinAggregateInputType = {
    id?: true
    productId?: true
    sealId?: true
    certificateNumber?: true
    issuedDate?: true
    expiryDate?: true
    validatingLaboratory?: true
    documentUrl?: true
    status?: true
    verifiedBy?: true
    verifiedAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductSealMaxAggregateInputType = {
    id?: true
    productId?: true
    sealId?: true
    certificateNumber?: true
    issuedDate?: true
    expiryDate?: true
    validatingLaboratory?: true
    documentUrl?: true
    status?: true
    verifiedBy?: true
    verifiedAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ProductSealCountAggregateInputType = {
    id?: true
    productId?: true
    sealId?: true
    certificateNumber?: true
    issuedDate?: true
    expiryDate?: true
    validatingLaboratory?: true
    documentUrl?: true
    status?: true
    verifiedBy?: true
    verifiedAt?: true
    notes?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ProductSealAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductSeal to aggregate.
     */
    where?: ProductSealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductSeals to fetch.
     */
    orderBy?: ProductSealOrderByWithRelationInput | ProductSealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProductSealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductSeals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductSeals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProductSeals
    **/
    _count?: true | ProductSealCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductSealMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductSealMaxAggregateInputType
  }

  export type GetProductSealAggregateType<T extends ProductSealAggregateArgs> = {
        [P in keyof T & keyof AggregateProductSeal]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductSeal[P]>
      : GetScalarType<T[P], AggregateProductSeal[P]>
  }




  export type ProductSealGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProductSealWhereInput
    orderBy?: ProductSealOrderByWithAggregationInput | ProductSealOrderByWithAggregationInput[]
    by: ProductSealScalarFieldEnum[] | ProductSealScalarFieldEnum
    having?: ProductSealScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductSealCountAggregateInputType | true
    _min?: ProductSealMinAggregateInputType
    _max?: ProductSealMaxAggregateInputType
  }

  export type ProductSealGroupByOutputType = {
    id: string
    productId: string
    sealId: string
    certificateNumber: string | null
    issuedDate: Date | null
    expiryDate: Date | null
    validatingLaboratory: string | null
    documentUrl: string | null
    status: string
    verifiedBy: string | null
    verifiedAt: Date | null
    notes: string | null
    createdAt: Date
    updatedAt: Date
    _count: ProductSealCountAggregateOutputType | null
    _min: ProductSealMinAggregateOutputType | null
    _max: ProductSealMaxAggregateOutputType | null
  }

  type GetProductSealGroupByPayload<T extends ProductSealGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductSealGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductSealGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductSealGroupByOutputType[P]>
            : GetScalarType<T[P], ProductSealGroupByOutputType[P]>
        }
      >
    >


  export type ProductSealSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    sealId?: boolean
    certificateNumber?: boolean
    issuedDate?: boolean
    expiryDate?: boolean
    validatingLaboratory?: boolean
    documentUrl?: boolean
    status?: boolean
    verifiedBy?: boolean
    verifiedAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productSeal"]>

  export type ProductSealSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    sealId?: boolean
    certificateNumber?: boolean
    issuedDate?: boolean
    expiryDate?: boolean
    validatingLaboratory?: boolean
    documentUrl?: boolean
    status?: boolean
    verifiedBy?: boolean
    verifiedAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productSeal"]>

  export type ProductSealSelectScalar = {
    id?: boolean
    productId?: boolean
    sealId?: boolean
    certificateNumber?: boolean
    issuedDate?: boolean
    expiryDate?: boolean
    validatingLaboratory?: boolean
    documentUrl?: boolean
    status?: boolean
    verifiedBy?: boolean
    verifiedAt?: boolean
    notes?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ProductSealInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }
  export type ProductSealIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
  }

  export type $ProductSealPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProductSeal"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productId: string
      sealId: string
      certificateNumber: string | null
      issuedDate: Date | null
      expiryDate: Date | null
      validatingLaboratory: string | null
      documentUrl: string | null
      status: string
      verifiedBy: string | null
      verifiedAt: Date | null
      notes: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["productSeal"]>
    composites: {}
  }

  type ProductSealGetPayload<S extends boolean | null | undefined | ProductSealDefaultArgs> = $Result.GetResult<Prisma.$ProductSealPayload, S>

  type ProductSealCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProductSealFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProductSealCountAggregateInputType | true
    }

  export interface ProductSealDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProductSeal'], meta: { name: 'ProductSeal' } }
    /**
     * Find zero or one ProductSeal that matches the filter.
     * @param {ProductSealFindUniqueArgs} args - Arguments to find a ProductSeal
     * @example
     * // Get one ProductSeal
     * const productSeal = await prisma.productSeal.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProductSealFindUniqueArgs>(args: SelectSubset<T, ProductSealFindUniqueArgs<ExtArgs>>): Prisma__ProductSealClient<$Result.GetResult<Prisma.$ProductSealPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProductSeal that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProductSealFindUniqueOrThrowArgs} args - Arguments to find a ProductSeal
     * @example
     * // Get one ProductSeal
     * const productSeal = await prisma.productSeal.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProductSealFindUniqueOrThrowArgs>(args: SelectSubset<T, ProductSealFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProductSealClient<$Result.GetResult<Prisma.$ProductSealPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProductSeal that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSealFindFirstArgs} args - Arguments to find a ProductSeal
     * @example
     * // Get one ProductSeal
     * const productSeal = await prisma.productSeal.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProductSealFindFirstArgs>(args?: SelectSubset<T, ProductSealFindFirstArgs<ExtArgs>>): Prisma__ProductSealClient<$Result.GetResult<Prisma.$ProductSealPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProductSeal that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSealFindFirstOrThrowArgs} args - Arguments to find a ProductSeal
     * @example
     * // Get one ProductSeal
     * const productSeal = await prisma.productSeal.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProductSealFindFirstOrThrowArgs>(args?: SelectSubset<T, ProductSealFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProductSealClient<$Result.GetResult<Prisma.$ProductSealPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProductSeals that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSealFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductSeals
     * const productSeals = await prisma.productSeal.findMany()
     * 
     * // Get first 10 ProductSeals
     * const productSeals = await prisma.productSeal.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productSealWithIdOnly = await prisma.productSeal.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProductSealFindManyArgs>(args?: SelectSubset<T, ProductSealFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductSealPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProductSeal.
     * @param {ProductSealCreateArgs} args - Arguments to create a ProductSeal.
     * @example
     * // Create one ProductSeal
     * const ProductSeal = await prisma.productSeal.create({
     *   data: {
     *     // ... data to create a ProductSeal
     *   }
     * })
     * 
     */
    create<T extends ProductSealCreateArgs>(args: SelectSubset<T, ProductSealCreateArgs<ExtArgs>>): Prisma__ProductSealClient<$Result.GetResult<Prisma.$ProductSealPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProductSeals.
     * @param {ProductSealCreateManyArgs} args - Arguments to create many ProductSeals.
     * @example
     * // Create many ProductSeals
     * const productSeal = await prisma.productSeal.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProductSealCreateManyArgs>(args?: SelectSubset<T, ProductSealCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ProductSeals and returns the data saved in the database.
     * @param {ProductSealCreateManyAndReturnArgs} args - Arguments to create many ProductSeals.
     * @example
     * // Create many ProductSeals
     * const productSeal = await prisma.productSeal.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ProductSeals and only return the `id`
     * const productSealWithIdOnly = await prisma.productSeal.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProductSealCreateManyAndReturnArgs>(args?: SelectSubset<T, ProductSealCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProductSealPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ProductSeal.
     * @param {ProductSealDeleteArgs} args - Arguments to delete one ProductSeal.
     * @example
     * // Delete one ProductSeal
     * const ProductSeal = await prisma.productSeal.delete({
     *   where: {
     *     // ... filter to delete one ProductSeal
     *   }
     * })
     * 
     */
    delete<T extends ProductSealDeleteArgs>(args: SelectSubset<T, ProductSealDeleteArgs<ExtArgs>>): Prisma__ProductSealClient<$Result.GetResult<Prisma.$ProductSealPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProductSeal.
     * @param {ProductSealUpdateArgs} args - Arguments to update one ProductSeal.
     * @example
     * // Update one ProductSeal
     * const productSeal = await prisma.productSeal.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProductSealUpdateArgs>(args: SelectSubset<T, ProductSealUpdateArgs<ExtArgs>>): Prisma__ProductSealClient<$Result.GetResult<Prisma.$ProductSealPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProductSeals.
     * @param {ProductSealDeleteManyArgs} args - Arguments to filter ProductSeals to delete.
     * @example
     * // Delete a few ProductSeals
     * const { count } = await prisma.productSeal.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProductSealDeleteManyArgs>(args?: SelectSubset<T, ProductSealDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductSeals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSealUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductSeals
     * const productSeal = await prisma.productSeal.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProductSealUpdateManyArgs>(args: SelectSubset<T, ProductSealUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductSeal.
     * @param {ProductSealUpsertArgs} args - Arguments to update or create a ProductSeal.
     * @example
     * // Update or create a ProductSeal
     * const productSeal = await prisma.productSeal.upsert({
     *   create: {
     *     // ... data to create a ProductSeal
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductSeal we want to update
     *   }
     * })
     */
    upsert<T extends ProductSealUpsertArgs>(args: SelectSubset<T, ProductSealUpsertArgs<ExtArgs>>): Prisma__ProductSealClient<$Result.GetResult<Prisma.$ProductSealPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProductSeals.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSealCountArgs} args - Arguments to filter ProductSeals to count.
     * @example
     * // Count the number of ProductSeals
     * const count = await prisma.productSeal.count({
     *   where: {
     *     // ... the filter for the ProductSeals we want to count
     *   }
     * })
    **/
    count<T extends ProductSealCountArgs>(
      args?: Subset<T, ProductSealCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductSealCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductSeal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSealAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductSealAggregateArgs>(args: Subset<T, ProductSealAggregateArgs>): Prisma.PrismaPromise<GetProductSealAggregateType<T>>

    /**
     * Group by ProductSeal.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductSealGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProductSealGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProductSealGroupByArgs['orderBy'] }
        : { orderBy?: ProductSealGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProductSealGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductSealGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProductSeal model
   */
  readonly fields: ProductSealFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProductSeal.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProductSealClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProductSeal model
   */ 
  interface ProductSealFieldRefs {
    readonly id: FieldRef<"ProductSeal", 'String'>
    readonly productId: FieldRef<"ProductSeal", 'String'>
    readonly sealId: FieldRef<"ProductSeal", 'String'>
    readonly certificateNumber: FieldRef<"ProductSeal", 'String'>
    readonly issuedDate: FieldRef<"ProductSeal", 'DateTime'>
    readonly expiryDate: FieldRef<"ProductSeal", 'DateTime'>
    readonly validatingLaboratory: FieldRef<"ProductSeal", 'String'>
    readonly documentUrl: FieldRef<"ProductSeal", 'String'>
    readonly status: FieldRef<"ProductSeal", 'String'>
    readonly verifiedBy: FieldRef<"ProductSeal", 'String'>
    readonly verifiedAt: FieldRef<"ProductSeal", 'DateTime'>
    readonly notes: FieldRef<"ProductSeal", 'String'>
    readonly createdAt: FieldRef<"ProductSeal", 'DateTime'>
    readonly updatedAt: FieldRef<"ProductSeal", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ProductSeal findUnique
   */
  export type ProductSealFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSeal
     */
    select?: ProductSealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSealInclude<ExtArgs> | null
    /**
     * Filter, which ProductSeal to fetch.
     */
    where: ProductSealWhereUniqueInput
  }

  /**
   * ProductSeal findUniqueOrThrow
   */
  export type ProductSealFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSeal
     */
    select?: ProductSealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSealInclude<ExtArgs> | null
    /**
     * Filter, which ProductSeal to fetch.
     */
    where: ProductSealWhereUniqueInput
  }

  /**
   * ProductSeal findFirst
   */
  export type ProductSealFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSeal
     */
    select?: ProductSealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSealInclude<ExtArgs> | null
    /**
     * Filter, which ProductSeal to fetch.
     */
    where?: ProductSealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductSeals to fetch.
     */
    orderBy?: ProductSealOrderByWithRelationInput | ProductSealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductSeals.
     */
    cursor?: ProductSealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductSeals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductSeals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductSeals.
     */
    distinct?: ProductSealScalarFieldEnum | ProductSealScalarFieldEnum[]
  }

  /**
   * ProductSeal findFirstOrThrow
   */
  export type ProductSealFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSeal
     */
    select?: ProductSealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSealInclude<ExtArgs> | null
    /**
     * Filter, which ProductSeal to fetch.
     */
    where?: ProductSealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductSeals to fetch.
     */
    orderBy?: ProductSealOrderByWithRelationInput | ProductSealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProductSeals.
     */
    cursor?: ProductSealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductSeals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductSeals.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProductSeals.
     */
    distinct?: ProductSealScalarFieldEnum | ProductSealScalarFieldEnum[]
  }

  /**
   * ProductSeal findMany
   */
  export type ProductSealFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSeal
     */
    select?: ProductSealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSealInclude<ExtArgs> | null
    /**
     * Filter, which ProductSeals to fetch.
     */
    where?: ProductSealWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProductSeals to fetch.
     */
    orderBy?: ProductSealOrderByWithRelationInput | ProductSealOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProductSeals.
     */
    cursor?: ProductSealWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProductSeals from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProductSeals.
     */
    skip?: number
    distinct?: ProductSealScalarFieldEnum | ProductSealScalarFieldEnum[]
  }

  /**
   * ProductSeal create
   */
  export type ProductSealCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSeal
     */
    select?: ProductSealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSealInclude<ExtArgs> | null
    /**
     * The data needed to create a ProductSeal.
     */
    data: XOR<ProductSealCreateInput, ProductSealUncheckedCreateInput>
  }

  /**
   * ProductSeal createMany
   */
  export type ProductSealCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProductSeals.
     */
    data: ProductSealCreateManyInput | ProductSealCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProductSeal createManyAndReturn
   */
  export type ProductSealCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSeal
     */
    select?: ProductSealSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ProductSeals.
     */
    data: ProductSealCreateManyInput | ProductSealCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSealIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ProductSeal update
   */
  export type ProductSealUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSeal
     */
    select?: ProductSealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSealInclude<ExtArgs> | null
    /**
     * The data needed to update a ProductSeal.
     */
    data: XOR<ProductSealUpdateInput, ProductSealUncheckedUpdateInput>
    /**
     * Choose, which ProductSeal to update.
     */
    where: ProductSealWhereUniqueInput
  }

  /**
   * ProductSeal updateMany
   */
  export type ProductSealUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProductSeals.
     */
    data: XOR<ProductSealUpdateManyMutationInput, ProductSealUncheckedUpdateManyInput>
    /**
     * Filter which ProductSeals to update
     */
    where?: ProductSealWhereInput
  }

  /**
   * ProductSeal upsert
   */
  export type ProductSealUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSeal
     */
    select?: ProductSealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSealInclude<ExtArgs> | null
    /**
     * The filter to search for the ProductSeal to update in case it exists.
     */
    where: ProductSealWhereUniqueInput
    /**
     * In case the ProductSeal found by the `where` argument doesn't exist, create a new ProductSeal with this data.
     */
    create: XOR<ProductSealCreateInput, ProductSealUncheckedCreateInput>
    /**
     * In case the ProductSeal was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProductSealUpdateInput, ProductSealUncheckedUpdateInput>
  }

  /**
   * ProductSeal delete
   */
  export type ProductSealDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSeal
     */
    select?: ProductSealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSealInclude<ExtArgs> | null
    /**
     * Filter which ProductSeal to delete.
     */
    where: ProductSealWhereUniqueInput
  }

  /**
   * ProductSeal deleteMany
   */
  export type ProductSealDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProductSeals to delete
     */
    where?: ProductSealWhereInput
  }

  /**
   * ProductSeal without action
   */
  export type ProductSealDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductSeal
     */
    select?: ProductSealSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProductSealInclude<ExtArgs> | null
  }


  /**
   * Model QRCodeAccess
   */

  export type AggregateQRCodeAccess = {
    _count: QRCodeAccessCountAggregateOutputType | null
    _min: QRCodeAccessMinAggregateOutputType | null
    _max: QRCodeAccessMaxAggregateOutputType | null
  }

  export type QRCodeAccessMinAggregateOutputType = {
    id: string | null
    qrCode: string | null
    ipAddress: string | null
    userAgent: string | null
    location: string | null
    accessedAt: Date | null
  }

  export type QRCodeAccessMaxAggregateOutputType = {
    id: string | null
    qrCode: string | null
    ipAddress: string | null
    userAgent: string | null
    location: string | null
    accessedAt: Date | null
  }

  export type QRCodeAccessCountAggregateOutputType = {
    id: number
    qrCode: number
    ipAddress: number
    userAgent: number
    location: number
    accessedAt: number
    _all: number
  }


  export type QRCodeAccessMinAggregateInputType = {
    id?: true
    qrCode?: true
    ipAddress?: true
    userAgent?: true
    location?: true
    accessedAt?: true
  }

  export type QRCodeAccessMaxAggregateInputType = {
    id?: true
    qrCode?: true
    ipAddress?: true
    userAgent?: true
    location?: true
    accessedAt?: true
  }

  export type QRCodeAccessCountAggregateInputType = {
    id?: true
    qrCode?: true
    ipAddress?: true
    userAgent?: true
    location?: true
    accessedAt?: true
    _all?: true
  }

  export type QRCodeAccessAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QRCodeAccess to aggregate.
     */
    where?: QRCodeAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QRCodeAccesses to fetch.
     */
    orderBy?: QRCodeAccessOrderByWithRelationInput | QRCodeAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: QRCodeAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QRCodeAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QRCodeAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned QRCodeAccesses
    **/
    _count?: true | QRCodeAccessCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: QRCodeAccessMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: QRCodeAccessMaxAggregateInputType
  }

  export type GetQRCodeAccessAggregateType<T extends QRCodeAccessAggregateArgs> = {
        [P in keyof T & keyof AggregateQRCodeAccess]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateQRCodeAccess[P]>
      : GetScalarType<T[P], AggregateQRCodeAccess[P]>
  }




  export type QRCodeAccessGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: QRCodeAccessWhereInput
    orderBy?: QRCodeAccessOrderByWithAggregationInput | QRCodeAccessOrderByWithAggregationInput[]
    by: QRCodeAccessScalarFieldEnum[] | QRCodeAccessScalarFieldEnum
    having?: QRCodeAccessScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: QRCodeAccessCountAggregateInputType | true
    _min?: QRCodeAccessMinAggregateInputType
    _max?: QRCodeAccessMaxAggregateInputType
  }

  export type QRCodeAccessGroupByOutputType = {
    id: string
    qrCode: string
    ipAddress: string | null
    userAgent: string | null
    location: string | null
    accessedAt: Date
    _count: QRCodeAccessCountAggregateOutputType | null
    _min: QRCodeAccessMinAggregateOutputType | null
    _max: QRCodeAccessMaxAggregateOutputType | null
  }

  type GetQRCodeAccessGroupByPayload<T extends QRCodeAccessGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<QRCodeAccessGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof QRCodeAccessGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], QRCodeAccessGroupByOutputType[P]>
            : GetScalarType<T[P], QRCodeAccessGroupByOutputType[P]>
        }
      >
    >


  export type QRCodeAccessSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    qrCode?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    location?: boolean
    accessedAt?: boolean
  }, ExtArgs["result"]["qRCodeAccess"]>

  export type QRCodeAccessSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    qrCode?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    location?: boolean
    accessedAt?: boolean
  }, ExtArgs["result"]["qRCodeAccess"]>

  export type QRCodeAccessSelectScalar = {
    id?: boolean
    qrCode?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    location?: boolean
    accessedAt?: boolean
  }


  export type $QRCodeAccessPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "QRCodeAccess"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
      qrCode: string
      ipAddress: string | null
      userAgent: string | null
      location: string | null
      accessedAt: Date
    }, ExtArgs["result"]["qRCodeAccess"]>
    composites: {}
  }

  type QRCodeAccessGetPayload<S extends boolean | null | undefined | QRCodeAccessDefaultArgs> = $Result.GetResult<Prisma.$QRCodeAccessPayload, S>

  type QRCodeAccessCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<QRCodeAccessFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: QRCodeAccessCountAggregateInputType | true
    }

  export interface QRCodeAccessDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['QRCodeAccess'], meta: { name: 'QRCodeAccess' } }
    /**
     * Find zero or one QRCodeAccess that matches the filter.
     * @param {QRCodeAccessFindUniqueArgs} args - Arguments to find a QRCodeAccess
     * @example
     * // Get one QRCodeAccess
     * const qRCodeAccess = await prisma.qRCodeAccess.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends QRCodeAccessFindUniqueArgs>(args: SelectSubset<T, QRCodeAccessFindUniqueArgs<ExtArgs>>): Prisma__QRCodeAccessClient<$Result.GetResult<Prisma.$QRCodeAccessPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one QRCodeAccess that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {QRCodeAccessFindUniqueOrThrowArgs} args - Arguments to find a QRCodeAccess
     * @example
     * // Get one QRCodeAccess
     * const qRCodeAccess = await prisma.qRCodeAccess.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends QRCodeAccessFindUniqueOrThrowArgs>(args: SelectSubset<T, QRCodeAccessFindUniqueOrThrowArgs<ExtArgs>>): Prisma__QRCodeAccessClient<$Result.GetResult<Prisma.$QRCodeAccessPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first QRCodeAccess that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QRCodeAccessFindFirstArgs} args - Arguments to find a QRCodeAccess
     * @example
     * // Get one QRCodeAccess
     * const qRCodeAccess = await prisma.qRCodeAccess.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends QRCodeAccessFindFirstArgs>(args?: SelectSubset<T, QRCodeAccessFindFirstArgs<ExtArgs>>): Prisma__QRCodeAccessClient<$Result.GetResult<Prisma.$QRCodeAccessPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first QRCodeAccess that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QRCodeAccessFindFirstOrThrowArgs} args - Arguments to find a QRCodeAccess
     * @example
     * // Get one QRCodeAccess
     * const qRCodeAccess = await prisma.qRCodeAccess.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends QRCodeAccessFindFirstOrThrowArgs>(args?: SelectSubset<T, QRCodeAccessFindFirstOrThrowArgs<ExtArgs>>): Prisma__QRCodeAccessClient<$Result.GetResult<Prisma.$QRCodeAccessPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more QRCodeAccesses that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QRCodeAccessFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all QRCodeAccesses
     * const qRCodeAccesses = await prisma.qRCodeAccess.findMany()
     * 
     * // Get first 10 QRCodeAccesses
     * const qRCodeAccesses = await prisma.qRCodeAccess.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const qRCodeAccessWithIdOnly = await prisma.qRCodeAccess.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends QRCodeAccessFindManyArgs>(args?: SelectSubset<T, QRCodeAccessFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QRCodeAccessPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a QRCodeAccess.
     * @param {QRCodeAccessCreateArgs} args - Arguments to create a QRCodeAccess.
     * @example
     * // Create one QRCodeAccess
     * const QRCodeAccess = await prisma.qRCodeAccess.create({
     *   data: {
     *     // ... data to create a QRCodeAccess
     *   }
     * })
     * 
     */
    create<T extends QRCodeAccessCreateArgs>(args: SelectSubset<T, QRCodeAccessCreateArgs<ExtArgs>>): Prisma__QRCodeAccessClient<$Result.GetResult<Prisma.$QRCodeAccessPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many QRCodeAccesses.
     * @param {QRCodeAccessCreateManyArgs} args - Arguments to create many QRCodeAccesses.
     * @example
     * // Create many QRCodeAccesses
     * const qRCodeAccess = await prisma.qRCodeAccess.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends QRCodeAccessCreateManyArgs>(args?: SelectSubset<T, QRCodeAccessCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many QRCodeAccesses and returns the data saved in the database.
     * @param {QRCodeAccessCreateManyAndReturnArgs} args - Arguments to create many QRCodeAccesses.
     * @example
     * // Create many QRCodeAccesses
     * const qRCodeAccess = await prisma.qRCodeAccess.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many QRCodeAccesses and only return the `id`
     * const qRCodeAccessWithIdOnly = await prisma.qRCodeAccess.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends QRCodeAccessCreateManyAndReturnArgs>(args?: SelectSubset<T, QRCodeAccessCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$QRCodeAccessPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a QRCodeAccess.
     * @param {QRCodeAccessDeleteArgs} args - Arguments to delete one QRCodeAccess.
     * @example
     * // Delete one QRCodeAccess
     * const QRCodeAccess = await prisma.qRCodeAccess.delete({
     *   where: {
     *     // ... filter to delete one QRCodeAccess
     *   }
     * })
     * 
     */
    delete<T extends QRCodeAccessDeleteArgs>(args: SelectSubset<T, QRCodeAccessDeleteArgs<ExtArgs>>): Prisma__QRCodeAccessClient<$Result.GetResult<Prisma.$QRCodeAccessPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one QRCodeAccess.
     * @param {QRCodeAccessUpdateArgs} args - Arguments to update one QRCodeAccess.
     * @example
     * // Update one QRCodeAccess
     * const qRCodeAccess = await prisma.qRCodeAccess.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends QRCodeAccessUpdateArgs>(args: SelectSubset<T, QRCodeAccessUpdateArgs<ExtArgs>>): Prisma__QRCodeAccessClient<$Result.GetResult<Prisma.$QRCodeAccessPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more QRCodeAccesses.
     * @param {QRCodeAccessDeleteManyArgs} args - Arguments to filter QRCodeAccesses to delete.
     * @example
     * // Delete a few QRCodeAccesses
     * const { count } = await prisma.qRCodeAccess.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends QRCodeAccessDeleteManyArgs>(args?: SelectSubset<T, QRCodeAccessDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more QRCodeAccesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QRCodeAccessUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many QRCodeAccesses
     * const qRCodeAccess = await prisma.qRCodeAccess.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends QRCodeAccessUpdateManyArgs>(args: SelectSubset<T, QRCodeAccessUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one QRCodeAccess.
     * @param {QRCodeAccessUpsertArgs} args - Arguments to update or create a QRCodeAccess.
     * @example
     * // Update or create a QRCodeAccess
     * const qRCodeAccess = await prisma.qRCodeAccess.upsert({
     *   create: {
     *     // ... data to create a QRCodeAccess
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the QRCodeAccess we want to update
     *   }
     * })
     */
    upsert<T extends QRCodeAccessUpsertArgs>(args: SelectSubset<T, QRCodeAccessUpsertArgs<ExtArgs>>): Prisma__QRCodeAccessClient<$Result.GetResult<Prisma.$QRCodeAccessPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of QRCodeAccesses.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QRCodeAccessCountArgs} args - Arguments to filter QRCodeAccesses to count.
     * @example
     * // Count the number of QRCodeAccesses
     * const count = await prisma.qRCodeAccess.count({
     *   where: {
     *     // ... the filter for the QRCodeAccesses we want to count
     *   }
     * })
    **/
    count<T extends QRCodeAccessCountArgs>(
      args?: Subset<T, QRCodeAccessCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], QRCodeAccessCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a QRCodeAccess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QRCodeAccessAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends QRCodeAccessAggregateArgs>(args: Subset<T, QRCodeAccessAggregateArgs>): Prisma.PrismaPromise<GetQRCodeAccessAggregateType<T>>

    /**
     * Group by QRCodeAccess.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {QRCodeAccessGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends QRCodeAccessGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: QRCodeAccessGroupByArgs['orderBy'] }
        : { orderBy?: QRCodeAccessGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, QRCodeAccessGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetQRCodeAccessGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the QRCodeAccess model
   */
  readonly fields: QRCodeAccessFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for QRCodeAccess.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__QRCodeAccessClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the QRCodeAccess model
   */ 
  interface QRCodeAccessFieldRefs {
    readonly id: FieldRef<"QRCodeAccess", 'String'>
    readonly qrCode: FieldRef<"QRCodeAccess", 'String'>
    readonly ipAddress: FieldRef<"QRCodeAccess", 'String'>
    readonly userAgent: FieldRef<"QRCodeAccess", 'String'>
    readonly location: FieldRef<"QRCodeAccess", 'String'>
    readonly accessedAt: FieldRef<"QRCodeAccess", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * QRCodeAccess findUnique
   */
  export type QRCodeAccessFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QRCodeAccess
     */
    select?: QRCodeAccessSelect<ExtArgs> | null
    /**
     * Filter, which QRCodeAccess to fetch.
     */
    where: QRCodeAccessWhereUniqueInput
  }

  /**
   * QRCodeAccess findUniqueOrThrow
   */
  export type QRCodeAccessFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QRCodeAccess
     */
    select?: QRCodeAccessSelect<ExtArgs> | null
    /**
     * Filter, which QRCodeAccess to fetch.
     */
    where: QRCodeAccessWhereUniqueInput
  }

  /**
   * QRCodeAccess findFirst
   */
  export type QRCodeAccessFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QRCodeAccess
     */
    select?: QRCodeAccessSelect<ExtArgs> | null
    /**
     * Filter, which QRCodeAccess to fetch.
     */
    where?: QRCodeAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QRCodeAccesses to fetch.
     */
    orderBy?: QRCodeAccessOrderByWithRelationInput | QRCodeAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QRCodeAccesses.
     */
    cursor?: QRCodeAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QRCodeAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QRCodeAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QRCodeAccesses.
     */
    distinct?: QRCodeAccessScalarFieldEnum | QRCodeAccessScalarFieldEnum[]
  }

  /**
   * QRCodeAccess findFirstOrThrow
   */
  export type QRCodeAccessFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QRCodeAccess
     */
    select?: QRCodeAccessSelect<ExtArgs> | null
    /**
     * Filter, which QRCodeAccess to fetch.
     */
    where?: QRCodeAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QRCodeAccesses to fetch.
     */
    orderBy?: QRCodeAccessOrderByWithRelationInput | QRCodeAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for QRCodeAccesses.
     */
    cursor?: QRCodeAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QRCodeAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QRCodeAccesses.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of QRCodeAccesses.
     */
    distinct?: QRCodeAccessScalarFieldEnum | QRCodeAccessScalarFieldEnum[]
  }

  /**
   * QRCodeAccess findMany
   */
  export type QRCodeAccessFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QRCodeAccess
     */
    select?: QRCodeAccessSelect<ExtArgs> | null
    /**
     * Filter, which QRCodeAccesses to fetch.
     */
    where?: QRCodeAccessWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of QRCodeAccesses to fetch.
     */
    orderBy?: QRCodeAccessOrderByWithRelationInput | QRCodeAccessOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing QRCodeAccesses.
     */
    cursor?: QRCodeAccessWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` QRCodeAccesses from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` QRCodeAccesses.
     */
    skip?: number
    distinct?: QRCodeAccessScalarFieldEnum | QRCodeAccessScalarFieldEnum[]
  }

  /**
   * QRCodeAccess create
   */
  export type QRCodeAccessCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QRCodeAccess
     */
    select?: QRCodeAccessSelect<ExtArgs> | null
    /**
     * The data needed to create a QRCodeAccess.
     */
    data: XOR<QRCodeAccessCreateInput, QRCodeAccessUncheckedCreateInput>
  }

  /**
   * QRCodeAccess createMany
   */
  export type QRCodeAccessCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many QRCodeAccesses.
     */
    data: QRCodeAccessCreateManyInput | QRCodeAccessCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QRCodeAccess createManyAndReturn
   */
  export type QRCodeAccessCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QRCodeAccess
     */
    select?: QRCodeAccessSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many QRCodeAccesses.
     */
    data: QRCodeAccessCreateManyInput | QRCodeAccessCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * QRCodeAccess update
   */
  export type QRCodeAccessUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QRCodeAccess
     */
    select?: QRCodeAccessSelect<ExtArgs> | null
    /**
     * The data needed to update a QRCodeAccess.
     */
    data: XOR<QRCodeAccessUpdateInput, QRCodeAccessUncheckedUpdateInput>
    /**
     * Choose, which QRCodeAccess to update.
     */
    where: QRCodeAccessWhereUniqueInput
  }

  /**
   * QRCodeAccess updateMany
   */
  export type QRCodeAccessUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update QRCodeAccesses.
     */
    data: XOR<QRCodeAccessUpdateManyMutationInput, QRCodeAccessUncheckedUpdateManyInput>
    /**
     * Filter which QRCodeAccesses to update
     */
    where?: QRCodeAccessWhereInput
  }

  /**
   * QRCodeAccess upsert
   */
  export type QRCodeAccessUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QRCodeAccess
     */
    select?: QRCodeAccessSelect<ExtArgs> | null
    /**
     * The filter to search for the QRCodeAccess to update in case it exists.
     */
    where: QRCodeAccessWhereUniqueInput
    /**
     * In case the QRCodeAccess found by the `where` argument doesn't exist, create a new QRCodeAccess with this data.
     */
    create: XOR<QRCodeAccessCreateInput, QRCodeAccessUncheckedCreateInput>
    /**
     * In case the QRCodeAccess was found with the provided `where` argument, update it with this data.
     */
    update: XOR<QRCodeAccessUpdateInput, QRCodeAccessUncheckedUpdateInput>
  }

  /**
   * QRCodeAccess delete
   */
  export type QRCodeAccessDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QRCodeAccess
     */
    select?: QRCodeAccessSelect<ExtArgs> | null
    /**
     * Filter which QRCodeAccess to delete.
     */
    where: QRCodeAccessWhereUniqueInput
  }

  /**
   * QRCodeAccess deleteMany
   */
  export type QRCodeAccessDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which QRCodeAccesses to delete
     */
    where?: QRCodeAccessWhereInput
  }

  /**
   * QRCodeAccess without action
   */
  export type QRCodeAccessDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the QRCodeAccess
     */
    select?: QRCodeAccessSelect<ExtArgs> | null
  }


  /**
   * Model ValidationQueue
   */

  export type AggregateValidationQueue = {
    _count: ValidationQueueCountAggregateOutputType | null
    _avg: ValidationQueueAvgAggregateOutputType | null
    _sum: ValidationQueueSumAggregateOutputType | null
    _min: ValidationQueueMinAggregateOutputType | null
    _max: ValidationQueueMaxAggregateOutputType | null
  }

  export type ValidationQueueAvgAggregateOutputType = {
    estimatedDuration: number | null
    actualDuration: number | null
  }

  export type ValidationQueueSumAggregateOutputType = {
    estimatedDuration: number | null
    actualDuration: number | null
  }

  export type ValidationQueueMinAggregateOutputType = {
    id: string | null
    productId: string | null
    requestedById: string | null
    assignedToId: string | null
    status: string | null
    priority: string | null
    category: string | null
    estimatedDuration: number | null
    actualDuration: number | null
    assignedAt: Date | null
    startedAt: Date | null
    completedAt: Date | null
    dueDate: Date | null
    notes: string | null
    metadata: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ValidationQueueMaxAggregateOutputType = {
    id: string | null
    productId: string | null
    requestedById: string | null
    assignedToId: string | null
    status: string | null
    priority: string | null
    category: string | null
    estimatedDuration: number | null
    actualDuration: number | null
    assignedAt: Date | null
    startedAt: Date | null
    completedAt: Date | null
    dueDate: Date | null
    notes: string | null
    metadata: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type ValidationQueueCountAggregateOutputType = {
    id: number
    productId: number
    requestedById: number
    assignedToId: number
    status: number
    priority: number
    category: number
    estimatedDuration: number
    actualDuration: number
    assignedAt: number
    startedAt: number
    completedAt: number
    dueDate: number
    notes: number
    metadata: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type ValidationQueueAvgAggregateInputType = {
    estimatedDuration?: true
    actualDuration?: true
  }

  export type ValidationQueueSumAggregateInputType = {
    estimatedDuration?: true
    actualDuration?: true
  }

  export type ValidationQueueMinAggregateInputType = {
    id?: true
    productId?: true
    requestedById?: true
    assignedToId?: true
    status?: true
    priority?: true
    category?: true
    estimatedDuration?: true
    actualDuration?: true
    assignedAt?: true
    startedAt?: true
    completedAt?: true
    dueDate?: true
    notes?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ValidationQueueMaxAggregateInputType = {
    id?: true
    productId?: true
    requestedById?: true
    assignedToId?: true
    status?: true
    priority?: true
    category?: true
    estimatedDuration?: true
    actualDuration?: true
    assignedAt?: true
    startedAt?: true
    completedAt?: true
    dueDate?: true
    notes?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
  }

  export type ValidationQueueCountAggregateInputType = {
    id?: true
    productId?: true
    requestedById?: true
    assignedToId?: true
    status?: true
    priority?: true
    category?: true
    estimatedDuration?: true
    actualDuration?: true
    assignedAt?: true
    startedAt?: true
    completedAt?: true
    dueDate?: true
    notes?: true
    metadata?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type ValidationQueueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ValidationQueue to aggregate.
     */
    where?: ValidationQueueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ValidationQueues to fetch.
     */
    orderBy?: ValidationQueueOrderByWithRelationInput | ValidationQueueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ValidationQueueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ValidationQueues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ValidationQueues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ValidationQueues
    **/
    _count?: true | ValidationQueueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ValidationQueueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ValidationQueueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ValidationQueueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ValidationQueueMaxAggregateInputType
  }

  export type GetValidationQueueAggregateType<T extends ValidationQueueAggregateArgs> = {
        [P in keyof T & keyof AggregateValidationQueue]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateValidationQueue[P]>
      : GetScalarType<T[P], AggregateValidationQueue[P]>
  }




  export type ValidationQueueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ValidationQueueWhereInput
    orderBy?: ValidationQueueOrderByWithAggregationInput | ValidationQueueOrderByWithAggregationInput[]
    by: ValidationQueueScalarFieldEnum[] | ValidationQueueScalarFieldEnum
    having?: ValidationQueueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ValidationQueueCountAggregateInputType | true
    _avg?: ValidationQueueAvgAggregateInputType
    _sum?: ValidationQueueSumAggregateInputType
    _min?: ValidationQueueMinAggregateInputType
    _max?: ValidationQueueMaxAggregateInputType
  }

  export type ValidationQueueGroupByOutputType = {
    id: string
    productId: string
    requestedById: string
    assignedToId: string | null
    status: string
    priority: string
    category: string
    estimatedDuration: number | null
    actualDuration: number | null
    assignedAt: Date | null
    startedAt: Date | null
    completedAt: Date | null
    dueDate: Date | null
    notes: string | null
    metadata: string | null
    createdAt: Date
    updatedAt: Date
    _count: ValidationQueueCountAggregateOutputType | null
    _avg: ValidationQueueAvgAggregateOutputType | null
    _sum: ValidationQueueSumAggregateOutputType | null
    _min: ValidationQueueMinAggregateOutputType | null
    _max: ValidationQueueMaxAggregateOutputType | null
  }

  type GetValidationQueueGroupByPayload<T extends ValidationQueueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ValidationQueueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ValidationQueueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ValidationQueueGroupByOutputType[P]>
            : GetScalarType<T[P], ValidationQueueGroupByOutputType[P]>
        }
      >
    >


  export type ValidationQueueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    requestedById?: boolean
    assignedToId?: boolean
    status?: boolean
    priority?: boolean
    category?: boolean
    estimatedDuration?: boolean
    actualDuration?: boolean
    assignedAt?: boolean
    startedAt?: boolean
    completedAt?: boolean
    dueDate?: boolean
    notes?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    requestedBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedTo?: boolean | ValidationQueue$assignedToArgs<ExtArgs>
    history?: boolean | ValidationQueue$historyArgs<ExtArgs>
    _count?: boolean | ValidationQueueCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["validationQueue"]>

  export type ValidationQueueSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    requestedById?: boolean
    assignedToId?: boolean
    status?: boolean
    priority?: boolean
    category?: boolean
    estimatedDuration?: boolean
    actualDuration?: boolean
    assignedAt?: boolean
    startedAt?: boolean
    completedAt?: boolean
    dueDate?: boolean
    notes?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    product?: boolean | ProductDefaultArgs<ExtArgs>
    requestedBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedTo?: boolean | ValidationQueue$assignedToArgs<ExtArgs>
  }, ExtArgs["result"]["validationQueue"]>

  export type ValidationQueueSelectScalar = {
    id?: boolean
    productId?: boolean
    requestedById?: boolean
    assignedToId?: boolean
    status?: boolean
    priority?: boolean
    category?: boolean
    estimatedDuration?: boolean
    actualDuration?: boolean
    assignedAt?: boolean
    startedAt?: boolean
    completedAt?: boolean
    dueDate?: boolean
    notes?: boolean
    metadata?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type ValidationQueueInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    requestedBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedTo?: boolean | ValidationQueue$assignedToArgs<ExtArgs>
    history?: boolean | ValidationQueue$historyArgs<ExtArgs>
    _count?: boolean | ValidationQueueCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ValidationQueueIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    product?: boolean | ProductDefaultArgs<ExtArgs>
    requestedBy?: boolean | UserDefaultArgs<ExtArgs>
    assignedTo?: boolean | ValidationQueue$assignedToArgs<ExtArgs>
  }

  export type $ValidationQueuePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ValidationQueue"
    objects: {
      product: Prisma.$ProductPayload<ExtArgs>
      requestedBy: Prisma.$UserPayload<ExtArgs>
      assignedTo: Prisma.$UserPayload<ExtArgs> | null
      history: Prisma.$ValidationQueueHistoryPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      productId: string
      requestedById: string
      assignedToId: string | null
      status: string
      priority: string
      category: string
      estimatedDuration: number | null
      actualDuration: number | null
      assignedAt: Date | null
      startedAt: Date | null
      completedAt: Date | null
      dueDate: Date | null
      notes: string | null
      metadata: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["validationQueue"]>
    composites: {}
  }

  type ValidationQueueGetPayload<S extends boolean | null | undefined | ValidationQueueDefaultArgs> = $Result.GetResult<Prisma.$ValidationQueuePayload, S>

  type ValidationQueueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ValidationQueueFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ValidationQueueCountAggregateInputType | true
    }

  export interface ValidationQueueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ValidationQueue'], meta: { name: 'ValidationQueue' } }
    /**
     * Find zero or one ValidationQueue that matches the filter.
     * @param {ValidationQueueFindUniqueArgs} args - Arguments to find a ValidationQueue
     * @example
     * // Get one ValidationQueue
     * const validationQueue = await prisma.validationQueue.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ValidationQueueFindUniqueArgs>(args: SelectSubset<T, ValidationQueueFindUniqueArgs<ExtArgs>>): Prisma__ValidationQueueClient<$Result.GetResult<Prisma.$ValidationQueuePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ValidationQueue that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ValidationQueueFindUniqueOrThrowArgs} args - Arguments to find a ValidationQueue
     * @example
     * // Get one ValidationQueue
     * const validationQueue = await prisma.validationQueue.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ValidationQueueFindUniqueOrThrowArgs>(args: SelectSubset<T, ValidationQueueFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ValidationQueueClient<$Result.GetResult<Prisma.$ValidationQueuePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ValidationQueue that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationQueueFindFirstArgs} args - Arguments to find a ValidationQueue
     * @example
     * // Get one ValidationQueue
     * const validationQueue = await prisma.validationQueue.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ValidationQueueFindFirstArgs>(args?: SelectSubset<T, ValidationQueueFindFirstArgs<ExtArgs>>): Prisma__ValidationQueueClient<$Result.GetResult<Prisma.$ValidationQueuePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ValidationQueue that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationQueueFindFirstOrThrowArgs} args - Arguments to find a ValidationQueue
     * @example
     * // Get one ValidationQueue
     * const validationQueue = await prisma.validationQueue.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ValidationQueueFindFirstOrThrowArgs>(args?: SelectSubset<T, ValidationQueueFindFirstOrThrowArgs<ExtArgs>>): Prisma__ValidationQueueClient<$Result.GetResult<Prisma.$ValidationQueuePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ValidationQueues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationQueueFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ValidationQueues
     * const validationQueues = await prisma.validationQueue.findMany()
     * 
     * // Get first 10 ValidationQueues
     * const validationQueues = await prisma.validationQueue.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const validationQueueWithIdOnly = await prisma.validationQueue.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ValidationQueueFindManyArgs>(args?: SelectSubset<T, ValidationQueueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValidationQueuePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ValidationQueue.
     * @param {ValidationQueueCreateArgs} args - Arguments to create a ValidationQueue.
     * @example
     * // Create one ValidationQueue
     * const ValidationQueue = await prisma.validationQueue.create({
     *   data: {
     *     // ... data to create a ValidationQueue
     *   }
     * })
     * 
     */
    create<T extends ValidationQueueCreateArgs>(args: SelectSubset<T, ValidationQueueCreateArgs<ExtArgs>>): Prisma__ValidationQueueClient<$Result.GetResult<Prisma.$ValidationQueuePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ValidationQueues.
     * @param {ValidationQueueCreateManyArgs} args - Arguments to create many ValidationQueues.
     * @example
     * // Create many ValidationQueues
     * const validationQueue = await prisma.validationQueue.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ValidationQueueCreateManyArgs>(args?: SelectSubset<T, ValidationQueueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ValidationQueues and returns the data saved in the database.
     * @param {ValidationQueueCreateManyAndReturnArgs} args - Arguments to create many ValidationQueues.
     * @example
     * // Create many ValidationQueues
     * const validationQueue = await prisma.validationQueue.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ValidationQueues and only return the `id`
     * const validationQueueWithIdOnly = await prisma.validationQueue.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ValidationQueueCreateManyAndReturnArgs>(args?: SelectSubset<T, ValidationQueueCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValidationQueuePayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ValidationQueue.
     * @param {ValidationQueueDeleteArgs} args - Arguments to delete one ValidationQueue.
     * @example
     * // Delete one ValidationQueue
     * const ValidationQueue = await prisma.validationQueue.delete({
     *   where: {
     *     // ... filter to delete one ValidationQueue
     *   }
     * })
     * 
     */
    delete<T extends ValidationQueueDeleteArgs>(args: SelectSubset<T, ValidationQueueDeleteArgs<ExtArgs>>): Prisma__ValidationQueueClient<$Result.GetResult<Prisma.$ValidationQueuePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ValidationQueue.
     * @param {ValidationQueueUpdateArgs} args - Arguments to update one ValidationQueue.
     * @example
     * // Update one ValidationQueue
     * const validationQueue = await prisma.validationQueue.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ValidationQueueUpdateArgs>(args: SelectSubset<T, ValidationQueueUpdateArgs<ExtArgs>>): Prisma__ValidationQueueClient<$Result.GetResult<Prisma.$ValidationQueuePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ValidationQueues.
     * @param {ValidationQueueDeleteManyArgs} args - Arguments to filter ValidationQueues to delete.
     * @example
     * // Delete a few ValidationQueues
     * const { count } = await prisma.validationQueue.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ValidationQueueDeleteManyArgs>(args?: SelectSubset<T, ValidationQueueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ValidationQueues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationQueueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ValidationQueues
     * const validationQueue = await prisma.validationQueue.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ValidationQueueUpdateManyArgs>(args: SelectSubset<T, ValidationQueueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ValidationQueue.
     * @param {ValidationQueueUpsertArgs} args - Arguments to update or create a ValidationQueue.
     * @example
     * // Update or create a ValidationQueue
     * const validationQueue = await prisma.validationQueue.upsert({
     *   create: {
     *     // ... data to create a ValidationQueue
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ValidationQueue we want to update
     *   }
     * })
     */
    upsert<T extends ValidationQueueUpsertArgs>(args: SelectSubset<T, ValidationQueueUpsertArgs<ExtArgs>>): Prisma__ValidationQueueClient<$Result.GetResult<Prisma.$ValidationQueuePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ValidationQueues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationQueueCountArgs} args - Arguments to filter ValidationQueues to count.
     * @example
     * // Count the number of ValidationQueues
     * const count = await prisma.validationQueue.count({
     *   where: {
     *     // ... the filter for the ValidationQueues we want to count
     *   }
     * })
    **/
    count<T extends ValidationQueueCountArgs>(
      args?: Subset<T, ValidationQueueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ValidationQueueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ValidationQueue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationQueueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ValidationQueueAggregateArgs>(args: Subset<T, ValidationQueueAggregateArgs>): Prisma.PrismaPromise<GetValidationQueueAggregateType<T>>

    /**
     * Group by ValidationQueue.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationQueueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ValidationQueueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ValidationQueueGroupByArgs['orderBy'] }
        : { orderBy?: ValidationQueueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ValidationQueueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetValidationQueueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ValidationQueue model
   */
  readonly fields: ValidationQueueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ValidationQueue.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ValidationQueueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    product<T extends ProductDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ProductDefaultArgs<ExtArgs>>): Prisma__ProductClient<$Result.GetResult<Prisma.$ProductPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    requestedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    assignedTo<T extends ValidationQueue$assignedToArgs<ExtArgs> = {}>(args?: Subset<T, ValidationQueue$assignedToArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    history<T extends ValidationQueue$historyArgs<ExtArgs> = {}>(args?: Subset<T, ValidationQueue$historyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValidationQueueHistoryPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ValidationQueue model
   */ 
  interface ValidationQueueFieldRefs {
    readonly id: FieldRef<"ValidationQueue", 'String'>
    readonly productId: FieldRef<"ValidationQueue", 'String'>
    readonly requestedById: FieldRef<"ValidationQueue", 'String'>
    readonly assignedToId: FieldRef<"ValidationQueue", 'String'>
    readonly status: FieldRef<"ValidationQueue", 'String'>
    readonly priority: FieldRef<"ValidationQueue", 'String'>
    readonly category: FieldRef<"ValidationQueue", 'String'>
    readonly estimatedDuration: FieldRef<"ValidationQueue", 'Int'>
    readonly actualDuration: FieldRef<"ValidationQueue", 'Int'>
    readonly assignedAt: FieldRef<"ValidationQueue", 'DateTime'>
    readonly startedAt: FieldRef<"ValidationQueue", 'DateTime'>
    readonly completedAt: FieldRef<"ValidationQueue", 'DateTime'>
    readonly dueDate: FieldRef<"ValidationQueue", 'DateTime'>
    readonly notes: FieldRef<"ValidationQueue", 'String'>
    readonly metadata: FieldRef<"ValidationQueue", 'String'>
    readonly createdAt: FieldRef<"ValidationQueue", 'DateTime'>
    readonly updatedAt: FieldRef<"ValidationQueue", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ValidationQueue findUnique
   */
  export type ValidationQueueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationQueue
     */
    select?: ValidationQueueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationQueueInclude<ExtArgs> | null
    /**
     * Filter, which ValidationQueue to fetch.
     */
    where: ValidationQueueWhereUniqueInput
  }

  /**
   * ValidationQueue findUniqueOrThrow
   */
  export type ValidationQueueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationQueue
     */
    select?: ValidationQueueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationQueueInclude<ExtArgs> | null
    /**
     * Filter, which ValidationQueue to fetch.
     */
    where: ValidationQueueWhereUniqueInput
  }

  /**
   * ValidationQueue findFirst
   */
  export type ValidationQueueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationQueue
     */
    select?: ValidationQueueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationQueueInclude<ExtArgs> | null
    /**
     * Filter, which ValidationQueue to fetch.
     */
    where?: ValidationQueueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ValidationQueues to fetch.
     */
    orderBy?: ValidationQueueOrderByWithRelationInput | ValidationQueueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ValidationQueues.
     */
    cursor?: ValidationQueueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ValidationQueues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ValidationQueues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ValidationQueues.
     */
    distinct?: ValidationQueueScalarFieldEnum | ValidationQueueScalarFieldEnum[]
  }

  /**
   * ValidationQueue findFirstOrThrow
   */
  export type ValidationQueueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationQueue
     */
    select?: ValidationQueueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationQueueInclude<ExtArgs> | null
    /**
     * Filter, which ValidationQueue to fetch.
     */
    where?: ValidationQueueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ValidationQueues to fetch.
     */
    orderBy?: ValidationQueueOrderByWithRelationInput | ValidationQueueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ValidationQueues.
     */
    cursor?: ValidationQueueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ValidationQueues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ValidationQueues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ValidationQueues.
     */
    distinct?: ValidationQueueScalarFieldEnum | ValidationQueueScalarFieldEnum[]
  }

  /**
   * ValidationQueue findMany
   */
  export type ValidationQueueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationQueue
     */
    select?: ValidationQueueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationQueueInclude<ExtArgs> | null
    /**
     * Filter, which ValidationQueues to fetch.
     */
    where?: ValidationQueueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ValidationQueues to fetch.
     */
    orderBy?: ValidationQueueOrderByWithRelationInput | ValidationQueueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ValidationQueues.
     */
    cursor?: ValidationQueueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ValidationQueues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ValidationQueues.
     */
    skip?: number
    distinct?: ValidationQueueScalarFieldEnum | ValidationQueueScalarFieldEnum[]
  }

  /**
   * ValidationQueue create
   */
  export type ValidationQueueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationQueue
     */
    select?: ValidationQueueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationQueueInclude<ExtArgs> | null
    /**
     * The data needed to create a ValidationQueue.
     */
    data: XOR<ValidationQueueCreateInput, ValidationQueueUncheckedCreateInput>
  }

  /**
   * ValidationQueue createMany
   */
  export type ValidationQueueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ValidationQueues.
     */
    data: ValidationQueueCreateManyInput | ValidationQueueCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ValidationQueue createManyAndReturn
   */
  export type ValidationQueueCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationQueue
     */
    select?: ValidationQueueSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ValidationQueues.
     */
    data: ValidationQueueCreateManyInput | ValidationQueueCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationQueueIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ValidationQueue update
   */
  export type ValidationQueueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationQueue
     */
    select?: ValidationQueueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationQueueInclude<ExtArgs> | null
    /**
     * The data needed to update a ValidationQueue.
     */
    data: XOR<ValidationQueueUpdateInput, ValidationQueueUncheckedUpdateInput>
    /**
     * Choose, which ValidationQueue to update.
     */
    where: ValidationQueueWhereUniqueInput
  }

  /**
   * ValidationQueue updateMany
   */
  export type ValidationQueueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ValidationQueues.
     */
    data: XOR<ValidationQueueUpdateManyMutationInput, ValidationQueueUncheckedUpdateManyInput>
    /**
     * Filter which ValidationQueues to update
     */
    where?: ValidationQueueWhereInput
  }

  /**
   * ValidationQueue upsert
   */
  export type ValidationQueueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationQueue
     */
    select?: ValidationQueueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationQueueInclude<ExtArgs> | null
    /**
     * The filter to search for the ValidationQueue to update in case it exists.
     */
    where: ValidationQueueWhereUniqueInput
    /**
     * In case the ValidationQueue found by the `where` argument doesn't exist, create a new ValidationQueue with this data.
     */
    create: XOR<ValidationQueueCreateInput, ValidationQueueUncheckedCreateInput>
    /**
     * In case the ValidationQueue was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ValidationQueueUpdateInput, ValidationQueueUncheckedUpdateInput>
  }

  /**
   * ValidationQueue delete
   */
  export type ValidationQueueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationQueue
     */
    select?: ValidationQueueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationQueueInclude<ExtArgs> | null
    /**
     * Filter which ValidationQueue to delete.
     */
    where: ValidationQueueWhereUniqueInput
  }

  /**
   * ValidationQueue deleteMany
   */
  export type ValidationQueueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ValidationQueues to delete
     */
    where?: ValidationQueueWhereInput
  }

  /**
   * ValidationQueue.assignedTo
   */
  export type ValidationQueue$assignedToArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ValidationQueue.history
   */
  export type ValidationQueue$historyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationQueueHistory
     */
    select?: ValidationQueueHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationQueueHistoryInclude<ExtArgs> | null
    where?: ValidationQueueHistoryWhereInput
    orderBy?: ValidationQueueHistoryOrderByWithRelationInput | ValidationQueueHistoryOrderByWithRelationInput[]
    cursor?: ValidationQueueHistoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ValidationQueueHistoryScalarFieldEnum | ValidationQueueHistoryScalarFieldEnum[]
  }

  /**
   * ValidationQueue without action
   */
  export type ValidationQueueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationQueue
     */
    select?: ValidationQueueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationQueueInclude<ExtArgs> | null
  }


  /**
   * Model ValidationQueueHistory
   */

  export type AggregateValidationQueueHistory = {
    _count: ValidationQueueHistoryCountAggregateOutputType | null
    _min: ValidationQueueHistoryMinAggregateOutputType | null
    _max: ValidationQueueHistoryMaxAggregateOutputType | null
  }

  export type ValidationQueueHistoryMinAggregateOutputType = {
    id: string | null
    queueId: string | null
    action: string | null
    previousStatus: string | null
    newStatus: string | null
    performedById: string | null
    reason: string | null
    metadata: string | null
    createdAt: Date | null
  }

  export type ValidationQueueHistoryMaxAggregateOutputType = {
    id: string | null
    queueId: string | null
    action: string | null
    previousStatus: string | null
    newStatus: string | null
    performedById: string | null
    reason: string | null
    metadata: string | null
    createdAt: Date | null
  }

  export type ValidationQueueHistoryCountAggregateOutputType = {
    id: number
    queueId: number
    action: number
    previousStatus: number
    newStatus: number
    performedById: number
    reason: number
    metadata: number
    createdAt: number
    _all: number
  }


  export type ValidationQueueHistoryMinAggregateInputType = {
    id?: true
    queueId?: true
    action?: true
    previousStatus?: true
    newStatus?: true
    performedById?: true
    reason?: true
    metadata?: true
    createdAt?: true
  }

  export type ValidationQueueHistoryMaxAggregateInputType = {
    id?: true
    queueId?: true
    action?: true
    previousStatus?: true
    newStatus?: true
    performedById?: true
    reason?: true
    metadata?: true
    createdAt?: true
  }

  export type ValidationQueueHistoryCountAggregateInputType = {
    id?: true
    queueId?: true
    action?: true
    previousStatus?: true
    newStatus?: true
    performedById?: true
    reason?: true
    metadata?: true
    createdAt?: true
    _all?: true
  }

  export type ValidationQueueHistoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ValidationQueueHistory to aggregate.
     */
    where?: ValidationQueueHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ValidationQueueHistories to fetch.
     */
    orderBy?: ValidationQueueHistoryOrderByWithRelationInput | ValidationQueueHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ValidationQueueHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ValidationQueueHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ValidationQueueHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ValidationQueueHistories
    **/
    _count?: true | ValidationQueueHistoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ValidationQueueHistoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ValidationQueueHistoryMaxAggregateInputType
  }

  export type GetValidationQueueHistoryAggregateType<T extends ValidationQueueHistoryAggregateArgs> = {
        [P in keyof T & keyof AggregateValidationQueueHistory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateValidationQueueHistory[P]>
      : GetScalarType<T[P], AggregateValidationQueueHistory[P]>
  }




  export type ValidationQueueHistoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ValidationQueueHistoryWhereInput
    orderBy?: ValidationQueueHistoryOrderByWithAggregationInput | ValidationQueueHistoryOrderByWithAggregationInput[]
    by: ValidationQueueHistoryScalarFieldEnum[] | ValidationQueueHistoryScalarFieldEnum
    having?: ValidationQueueHistoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ValidationQueueHistoryCountAggregateInputType | true
    _min?: ValidationQueueHistoryMinAggregateInputType
    _max?: ValidationQueueHistoryMaxAggregateInputType
  }

  export type ValidationQueueHistoryGroupByOutputType = {
    id: string
    queueId: string
    action: string
    previousStatus: string | null
    newStatus: string | null
    performedById: string
    reason: string | null
    metadata: string | null
    createdAt: Date
    _count: ValidationQueueHistoryCountAggregateOutputType | null
    _min: ValidationQueueHistoryMinAggregateOutputType | null
    _max: ValidationQueueHistoryMaxAggregateOutputType | null
  }

  type GetValidationQueueHistoryGroupByPayload<T extends ValidationQueueHistoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ValidationQueueHistoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ValidationQueueHistoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ValidationQueueHistoryGroupByOutputType[P]>
            : GetScalarType<T[P], ValidationQueueHistoryGroupByOutputType[P]>
        }
      >
    >


  export type ValidationQueueHistorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    queueId?: boolean
    action?: boolean
    previousStatus?: boolean
    newStatus?: boolean
    performedById?: boolean
    reason?: boolean
    metadata?: boolean
    createdAt?: boolean
    queue?: boolean | ValidationQueueDefaultArgs<ExtArgs>
    performedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["validationQueueHistory"]>

  export type ValidationQueueHistorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    queueId?: boolean
    action?: boolean
    previousStatus?: boolean
    newStatus?: boolean
    performedById?: boolean
    reason?: boolean
    metadata?: boolean
    createdAt?: boolean
    queue?: boolean | ValidationQueueDefaultArgs<ExtArgs>
    performedBy?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["validationQueueHistory"]>

  export type ValidationQueueHistorySelectScalar = {
    id?: boolean
    queueId?: boolean
    action?: boolean
    previousStatus?: boolean
    newStatus?: boolean
    performedById?: boolean
    reason?: boolean
    metadata?: boolean
    createdAt?: boolean
  }

  export type ValidationQueueHistoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    queue?: boolean | ValidationQueueDefaultArgs<ExtArgs>
    performedBy?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ValidationQueueHistoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    queue?: boolean | ValidationQueueDefaultArgs<ExtArgs>
    performedBy?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ValidationQueueHistoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ValidationQueueHistory"
    objects: {
      queue: Prisma.$ValidationQueuePayload<ExtArgs>
      performedBy: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      queueId: string
      action: string
      previousStatus: string | null
      newStatus: string | null
      performedById: string
      reason: string | null
      metadata: string | null
      createdAt: Date
    }, ExtArgs["result"]["validationQueueHistory"]>
    composites: {}
  }

  type ValidationQueueHistoryGetPayload<S extends boolean | null | undefined | ValidationQueueHistoryDefaultArgs> = $Result.GetResult<Prisma.$ValidationQueueHistoryPayload, S>

  type ValidationQueueHistoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ValidationQueueHistoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ValidationQueueHistoryCountAggregateInputType | true
    }

  export interface ValidationQueueHistoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ValidationQueueHistory'], meta: { name: 'ValidationQueueHistory' } }
    /**
     * Find zero or one ValidationQueueHistory that matches the filter.
     * @param {ValidationQueueHistoryFindUniqueArgs} args - Arguments to find a ValidationQueueHistory
     * @example
     * // Get one ValidationQueueHistory
     * const validationQueueHistory = await prisma.validationQueueHistory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ValidationQueueHistoryFindUniqueArgs>(args: SelectSubset<T, ValidationQueueHistoryFindUniqueArgs<ExtArgs>>): Prisma__ValidationQueueHistoryClient<$Result.GetResult<Prisma.$ValidationQueueHistoryPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ValidationQueueHistory that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ValidationQueueHistoryFindUniqueOrThrowArgs} args - Arguments to find a ValidationQueueHistory
     * @example
     * // Get one ValidationQueueHistory
     * const validationQueueHistory = await prisma.validationQueueHistory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ValidationQueueHistoryFindUniqueOrThrowArgs>(args: SelectSubset<T, ValidationQueueHistoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ValidationQueueHistoryClient<$Result.GetResult<Prisma.$ValidationQueueHistoryPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ValidationQueueHistory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationQueueHistoryFindFirstArgs} args - Arguments to find a ValidationQueueHistory
     * @example
     * // Get one ValidationQueueHistory
     * const validationQueueHistory = await prisma.validationQueueHistory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ValidationQueueHistoryFindFirstArgs>(args?: SelectSubset<T, ValidationQueueHistoryFindFirstArgs<ExtArgs>>): Prisma__ValidationQueueHistoryClient<$Result.GetResult<Prisma.$ValidationQueueHistoryPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ValidationQueueHistory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationQueueHistoryFindFirstOrThrowArgs} args - Arguments to find a ValidationQueueHistory
     * @example
     * // Get one ValidationQueueHistory
     * const validationQueueHistory = await prisma.validationQueueHistory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ValidationQueueHistoryFindFirstOrThrowArgs>(args?: SelectSubset<T, ValidationQueueHistoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ValidationQueueHistoryClient<$Result.GetResult<Prisma.$ValidationQueueHistoryPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ValidationQueueHistories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationQueueHistoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ValidationQueueHistories
     * const validationQueueHistories = await prisma.validationQueueHistory.findMany()
     * 
     * // Get first 10 ValidationQueueHistories
     * const validationQueueHistories = await prisma.validationQueueHistory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const validationQueueHistoryWithIdOnly = await prisma.validationQueueHistory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ValidationQueueHistoryFindManyArgs>(args?: SelectSubset<T, ValidationQueueHistoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValidationQueueHistoryPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ValidationQueueHistory.
     * @param {ValidationQueueHistoryCreateArgs} args - Arguments to create a ValidationQueueHistory.
     * @example
     * // Create one ValidationQueueHistory
     * const ValidationQueueHistory = await prisma.validationQueueHistory.create({
     *   data: {
     *     // ... data to create a ValidationQueueHistory
     *   }
     * })
     * 
     */
    create<T extends ValidationQueueHistoryCreateArgs>(args: SelectSubset<T, ValidationQueueHistoryCreateArgs<ExtArgs>>): Prisma__ValidationQueueHistoryClient<$Result.GetResult<Prisma.$ValidationQueueHistoryPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ValidationQueueHistories.
     * @param {ValidationQueueHistoryCreateManyArgs} args - Arguments to create many ValidationQueueHistories.
     * @example
     * // Create many ValidationQueueHistories
     * const validationQueueHistory = await prisma.validationQueueHistory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ValidationQueueHistoryCreateManyArgs>(args?: SelectSubset<T, ValidationQueueHistoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ValidationQueueHistories and returns the data saved in the database.
     * @param {ValidationQueueHistoryCreateManyAndReturnArgs} args - Arguments to create many ValidationQueueHistories.
     * @example
     * // Create many ValidationQueueHistories
     * const validationQueueHistory = await prisma.validationQueueHistory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ValidationQueueHistories and only return the `id`
     * const validationQueueHistoryWithIdOnly = await prisma.validationQueueHistory.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ValidationQueueHistoryCreateManyAndReturnArgs>(args?: SelectSubset<T, ValidationQueueHistoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ValidationQueueHistoryPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a ValidationQueueHistory.
     * @param {ValidationQueueHistoryDeleteArgs} args - Arguments to delete one ValidationQueueHistory.
     * @example
     * // Delete one ValidationQueueHistory
     * const ValidationQueueHistory = await prisma.validationQueueHistory.delete({
     *   where: {
     *     // ... filter to delete one ValidationQueueHistory
     *   }
     * })
     * 
     */
    delete<T extends ValidationQueueHistoryDeleteArgs>(args: SelectSubset<T, ValidationQueueHistoryDeleteArgs<ExtArgs>>): Prisma__ValidationQueueHistoryClient<$Result.GetResult<Prisma.$ValidationQueueHistoryPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ValidationQueueHistory.
     * @param {ValidationQueueHistoryUpdateArgs} args - Arguments to update one ValidationQueueHistory.
     * @example
     * // Update one ValidationQueueHistory
     * const validationQueueHistory = await prisma.validationQueueHistory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ValidationQueueHistoryUpdateArgs>(args: SelectSubset<T, ValidationQueueHistoryUpdateArgs<ExtArgs>>): Prisma__ValidationQueueHistoryClient<$Result.GetResult<Prisma.$ValidationQueueHistoryPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ValidationQueueHistories.
     * @param {ValidationQueueHistoryDeleteManyArgs} args - Arguments to filter ValidationQueueHistories to delete.
     * @example
     * // Delete a few ValidationQueueHistories
     * const { count } = await prisma.validationQueueHistory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ValidationQueueHistoryDeleteManyArgs>(args?: SelectSubset<T, ValidationQueueHistoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ValidationQueueHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationQueueHistoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ValidationQueueHistories
     * const validationQueueHistory = await prisma.validationQueueHistory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ValidationQueueHistoryUpdateManyArgs>(args: SelectSubset<T, ValidationQueueHistoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ValidationQueueHistory.
     * @param {ValidationQueueHistoryUpsertArgs} args - Arguments to update or create a ValidationQueueHistory.
     * @example
     * // Update or create a ValidationQueueHistory
     * const validationQueueHistory = await prisma.validationQueueHistory.upsert({
     *   create: {
     *     // ... data to create a ValidationQueueHistory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ValidationQueueHistory we want to update
     *   }
     * })
     */
    upsert<T extends ValidationQueueHistoryUpsertArgs>(args: SelectSubset<T, ValidationQueueHistoryUpsertArgs<ExtArgs>>): Prisma__ValidationQueueHistoryClient<$Result.GetResult<Prisma.$ValidationQueueHistoryPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ValidationQueueHistories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationQueueHistoryCountArgs} args - Arguments to filter ValidationQueueHistories to count.
     * @example
     * // Count the number of ValidationQueueHistories
     * const count = await prisma.validationQueueHistory.count({
     *   where: {
     *     // ... the filter for the ValidationQueueHistories we want to count
     *   }
     * })
    **/
    count<T extends ValidationQueueHistoryCountArgs>(
      args?: Subset<T, ValidationQueueHistoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ValidationQueueHistoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ValidationQueueHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationQueueHistoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ValidationQueueHistoryAggregateArgs>(args: Subset<T, ValidationQueueHistoryAggregateArgs>): Prisma.PrismaPromise<GetValidationQueueHistoryAggregateType<T>>

    /**
     * Group by ValidationQueueHistory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ValidationQueueHistoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ValidationQueueHistoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ValidationQueueHistoryGroupByArgs['orderBy'] }
        : { orderBy?: ValidationQueueHistoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ValidationQueueHistoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetValidationQueueHistoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ValidationQueueHistory model
   */
  readonly fields: ValidationQueueHistoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ValidationQueueHistory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ValidationQueueHistoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    queue<T extends ValidationQueueDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ValidationQueueDefaultArgs<ExtArgs>>): Prisma__ValidationQueueClient<$Result.GetResult<Prisma.$ValidationQueuePayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    performedBy<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ValidationQueueHistory model
   */ 
  interface ValidationQueueHistoryFieldRefs {
    readonly id: FieldRef<"ValidationQueueHistory", 'String'>
    readonly queueId: FieldRef<"ValidationQueueHistory", 'String'>
    readonly action: FieldRef<"ValidationQueueHistory", 'String'>
    readonly previousStatus: FieldRef<"ValidationQueueHistory", 'String'>
    readonly newStatus: FieldRef<"ValidationQueueHistory", 'String'>
    readonly performedById: FieldRef<"ValidationQueueHistory", 'String'>
    readonly reason: FieldRef<"ValidationQueueHistory", 'String'>
    readonly metadata: FieldRef<"ValidationQueueHistory", 'String'>
    readonly createdAt: FieldRef<"ValidationQueueHistory", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * ValidationQueueHistory findUnique
   */
  export type ValidationQueueHistoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationQueueHistory
     */
    select?: ValidationQueueHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationQueueHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ValidationQueueHistory to fetch.
     */
    where: ValidationQueueHistoryWhereUniqueInput
  }

  /**
   * ValidationQueueHistory findUniqueOrThrow
   */
  export type ValidationQueueHistoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationQueueHistory
     */
    select?: ValidationQueueHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationQueueHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ValidationQueueHistory to fetch.
     */
    where: ValidationQueueHistoryWhereUniqueInput
  }

  /**
   * ValidationQueueHistory findFirst
   */
  export type ValidationQueueHistoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationQueueHistory
     */
    select?: ValidationQueueHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationQueueHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ValidationQueueHistory to fetch.
     */
    where?: ValidationQueueHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ValidationQueueHistories to fetch.
     */
    orderBy?: ValidationQueueHistoryOrderByWithRelationInput | ValidationQueueHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ValidationQueueHistories.
     */
    cursor?: ValidationQueueHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ValidationQueueHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ValidationQueueHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ValidationQueueHistories.
     */
    distinct?: ValidationQueueHistoryScalarFieldEnum | ValidationQueueHistoryScalarFieldEnum[]
  }

  /**
   * ValidationQueueHistory findFirstOrThrow
   */
  export type ValidationQueueHistoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationQueueHistory
     */
    select?: ValidationQueueHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationQueueHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ValidationQueueHistory to fetch.
     */
    where?: ValidationQueueHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ValidationQueueHistories to fetch.
     */
    orderBy?: ValidationQueueHistoryOrderByWithRelationInput | ValidationQueueHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ValidationQueueHistories.
     */
    cursor?: ValidationQueueHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ValidationQueueHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ValidationQueueHistories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ValidationQueueHistories.
     */
    distinct?: ValidationQueueHistoryScalarFieldEnum | ValidationQueueHistoryScalarFieldEnum[]
  }

  /**
   * ValidationQueueHistory findMany
   */
  export type ValidationQueueHistoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationQueueHistory
     */
    select?: ValidationQueueHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationQueueHistoryInclude<ExtArgs> | null
    /**
     * Filter, which ValidationQueueHistories to fetch.
     */
    where?: ValidationQueueHistoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ValidationQueueHistories to fetch.
     */
    orderBy?: ValidationQueueHistoryOrderByWithRelationInput | ValidationQueueHistoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ValidationQueueHistories.
     */
    cursor?: ValidationQueueHistoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ValidationQueueHistories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ValidationQueueHistories.
     */
    skip?: number
    distinct?: ValidationQueueHistoryScalarFieldEnum | ValidationQueueHistoryScalarFieldEnum[]
  }

  /**
   * ValidationQueueHistory create
   */
  export type ValidationQueueHistoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationQueueHistory
     */
    select?: ValidationQueueHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationQueueHistoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ValidationQueueHistory.
     */
    data: XOR<ValidationQueueHistoryCreateInput, ValidationQueueHistoryUncheckedCreateInput>
  }

  /**
   * ValidationQueueHistory createMany
   */
  export type ValidationQueueHistoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ValidationQueueHistories.
     */
    data: ValidationQueueHistoryCreateManyInput | ValidationQueueHistoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ValidationQueueHistory createManyAndReturn
   */
  export type ValidationQueueHistoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationQueueHistory
     */
    select?: ValidationQueueHistorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many ValidationQueueHistories.
     */
    data: ValidationQueueHistoryCreateManyInput | ValidationQueueHistoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationQueueHistoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ValidationQueueHistory update
   */
  export type ValidationQueueHistoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationQueueHistory
     */
    select?: ValidationQueueHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationQueueHistoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ValidationQueueHistory.
     */
    data: XOR<ValidationQueueHistoryUpdateInput, ValidationQueueHistoryUncheckedUpdateInput>
    /**
     * Choose, which ValidationQueueHistory to update.
     */
    where: ValidationQueueHistoryWhereUniqueInput
  }

  /**
   * ValidationQueueHistory updateMany
   */
  export type ValidationQueueHistoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ValidationQueueHistories.
     */
    data: XOR<ValidationQueueHistoryUpdateManyMutationInput, ValidationQueueHistoryUncheckedUpdateManyInput>
    /**
     * Filter which ValidationQueueHistories to update
     */
    where?: ValidationQueueHistoryWhereInput
  }

  /**
   * ValidationQueueHistory upsert
   */
  export type ValidationQueueHistoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationQueueHistory
     */
    select?: ValidationQueueHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationQueueHistoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ValidationQueueHistory to update in case it exists.
     */
    where: ValidationQueueHistoryWhereUniqueInput
    /**
     * In case the ValidationQueueHistory found by the `where` argument doesn't exist, create a new ValidationQueueHistory with this data.
     */
    create: XOR<ValidationQueueHistoryCreateInput, ValidationQueueHistoryUncheckedCreateInput>
    /**
     * In case the ValidationQueueHistory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ValidationQueueHistoryUpdateInput, ValidationQueueHistoryUncheckedUpdateInput>
  }

  /**
   * ValidationQueueHistory delete
   */
  export type ValidationQueueHistoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationQueueHistory
     */
    select?: ValidationQueueHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationQueueHistoryInclude<ExtArgs> | null
    /**
     * Filter which ValidationQueueHistory to delete.
     */
    where: ValidationQueueHistoryWhereUniqueInput
  }

  /**
   * ValidationQueueHistory deleteMany
   */
  export type ValidationQueueHistoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ValidationQueueHistories to delete
     */
    where?: ValidationQueueHistoryWhereInput
  }

  /**
   * ValidationQueueHistory without action
   */
  export type ValidationQueueHistoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ValidationQueueHistory
     */
    select?: ValidationQueueHistorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ValidationQueueHistoryInclude<ExtArgs> | null
  }


  /**
   * Model AnalyticsEvent
   */

  export type AggregateAnalyticsEvent = {
    _count: AnalyticsEventCountAggregateOutputType | null
    _min: AnalyticsEventMinAggregateOutputType | null
    _max: AnalyticsEventMaxAggregateOutputType | null
  }

  export type AnalyticsEventMinAggregateOutputType = {
    id: string | null
    eventType: string | null
    entityType: string | null
    entityId: string | null
    userId: string | null
    sessionId: string | null
    data: string | null
    ipAddress: string | null
    userAgent: string | null
    timestamp: Date | null
  }

  export type AnalyticsEventMaxAggregateOutputType = {
    id: string | null
    eventType: string | null
    entityType: string | null
    entityId: string | null
    userId: string | null
    sessionId: string | null
    data: string | null
    ipAddress: string | null
    userAgent: string | null
    timestamp: Date | null
  }

  export type AnalyticsEventCountAggregateOutputType = {
    id: number
    eventType: number
    entityType: number
    entityId: number
    userId: number
    sessionId: number
    data: number
    ipAddress: number
    userAgent: number
    timestamp: number
    _all: number
  }


  export type AnalyticsEventMinAggregateInputType = {
    id?: true
    eventType?: true
    entityType?: true
    entityId?: true
    userId?: true
    sessionId?: true
    data?: true
    ipAddress?: true
    userAgent?: true
    timestamp?: true
  }

  export type AnalyticsEventMaxAggregateInputType = {
    id?: true
    eventType?: true
    entityType?: true
    entityId?: true
    userId?: true
    sessionId?: true
    data?: true
    ipAddress?: true
    userAgent?: true
    timestamp?: true
  }

  export type AnalyticsEventCountAggregateInputType = {
    id?: true
    eventType?: true
    entityType?: true
    entityId?: true
    userId?: true
    sessionId?: true
    data?: true
    ipAddress?: true
    userAgent?: true
    timestamp?: true
    _all?: true
  }

  export type AnalyticsEventAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnalyticsEvent to aggregate.
     */
    where?: AnalyticsEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnalyticsEvents to fetch.
     */
    orderBy?: AnalyticsEventOrderByWithRelationInput | AnalyticsEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AnalyticsEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnalyticsEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnalyticsEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AnalyticsEvents
    **/
    _count?: true | AnalyticsEventCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AnalyticsEventMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AnalyticsEventMaxAggregateInputType
  }

  export type GetAnalyticsEventAggregateType<T extends AnalyticsEventAggregateArgs> = {
        [P in keyof T & keyof AggregateAnalyticsEvent]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAnalyticsEvent[P]>
      : GetScalarType<T[P], AggregateAnalyticsEvent[P]>
  }




  export type AnalyticsEventGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AnalyticsEventWhereInput
    orderBy?: AnalyticsEventOrderByWithAggregationInput | AnalyticsEventOrderByWithAggregationInput[]
    by: AnalyticsEventScalarFieldEnum[] | AnalyticsEventScalarFieldEnum
    having?: AnalyticsEventScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AnalyticsEventCountAggregateInputType | true
    _min?: AnalyticsEventMinAggregateInputType
    _max?: AnalyticsEventMaxAggregateInputType
  }

  export type AnalyticsEventGroupByOutputType = {
    id: string
    eventType: string
    entityType: string
    entityId: string
    userId: string | null
    sessionId: string | null
    data: string | null
    ipAddress: string | null
    userAgent: string | null
    timestamp: Date
    _count: AnalyticsEventCountAggregateOutputType | null
    _min: AnalyticsEventMinAggregateOutputType | null
    _max: AnalyticsEventMaxAggregateOutputType | null
  }

  type GetAnalyticsEventGroupByPayload<T extends AnalyticsEventGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AnalyticsEventGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AnalyticsEventGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AnalyticsEventGroupByOutputType[P]>
            : GetScalarType<T[P], AnalyticsEventGroupByOutputType[P]>
        }
      >
    >


  export type AnalyticsEventSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventType?: boolean
    entityType?: boolean
    entityId?: boolean
    userId?: boolean
    sessionId?: boolean
    data?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    timestamp?: boolean
    user?: boolean | AnalyticsEvent$userArgs<ExtArgs>
  }, ExtArgs["result"]["analyticsEvent"]>

  export type AnalyticsEventSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    eventType?: boolean
    entityType?: boolean
    entityId?: boolean
    userId?: boolean
    sessionId?: boolean
    data?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    timestamp?: boolean
    user?: boolean | AnalyticsEvent$userArgs<ExtArgs>
  }, ExtArgs["result"]["analyticsEvent"]>

  export type AnalyticsEventSelectScalar = {
    id?: boolean
    eventType?: boolean
    entityType?: boolean
    entityId?: boolean
    userId?: boolean
    sessionId?: boolean
    data?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    timestamp?: boolean
  }

  export type AnalyticsEventInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AnalyticsEvent$userArgs<ExtArgs>
  }
  export type AnalyticsEventIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | AnalyticsEvent$userArgs<ExtArgs>
  }

  export type $AnalyticsEventPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "AnalyticsEvent"
    objects: {
      user: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      eventType: string
      entityType: string
      entityId: string
      userId: string | null
      sessionId: string | null
      data: string | null
      ipAddress: string | null
      userAgent: string | null
      timestamp: Date
    }, ExtArgs["result"]["analyticsEvent"]>
    composites: {}
  }

  type AnalyticsEventGetPayload<S extends boolean | null | undefined | AnalyticsEventDefaultArgs> = $Result.GetResult<Prisma.$AnalyticsEventPayload, S>

  type AnalyticsEventCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AnalyticsEventFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AnalyticsEventCountAggregateInputType | true
    }

  export interface AnalyticsEventDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AnalyticsEvent'], meta: { name: 'AnalyticsEvent' } }
    /**
     * Find zero or one AnalyticsEvent that matches the filter.
     * @param {AnalyticsEventFindUniqueArgs} args - Arguments to find a AnalyticsEvent
     * @example
     * // Get one AnalyticsEvent
     * const analyticsEvent = await prisma.analyticsEvent.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends AnalyticsEventFindUniqueArgs>(args: SelectSubset<T, AnalyticsEventFindUniqueArgs<ExtArgs>>): Prisma__AnalyticsEventClient<$Result.GetResult<Prisma.$AnalyticsEventPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one AnalyticsEvent that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {AnalyticsEventFindUniqueOrThrowArgs} args - Arguments to find a AnalyticsEvent
     * @example
     * // Get one AnalyticsEvent
     * const analyticsEvent = await prisma.analyticsEvent.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends AnalyticsEventFindUniqueOrThrowArgs>(args: SelectSubset<T, AnalyticsEventFindUniqueOrThrowArgs<ExtArgs>>): Prisma__AnalyticsEventClient<$Result.GetResult<Prisma.$AnalyticsEventPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first AnalyticsEvent that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsEventFindFirstArgs} args - Arguments to find a AnalyticsEvent
     * @example
     * // Get one AnalyticsEvent
     * const analyticsEvent = await prisma.analyticsEvent.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends AnalyticsEventFindFirstArgs>(args?: SelectSubset<T, AnalyticsEventFindFirstArgs<ExtArgs>>): Prisma__AnalyticsEventClient<$Result.GetResult<Prisma.$AnalyticsEventPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first AnalyticsEvent that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsEventFindFirstOrThrowArgs} args - Arguments to find a AnalyticsEvent
     * @example
     * // Get one AnalyticsEvent
     * const analyticsEvent = await prisma.analyticsEvent.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends AnalyticsEventFindFirstOrThrowArgs>(args?: SelectSubset<T, AnalyticsEventFindFirstOrThrowArgs<ExtArgs>>): Prisma__AnalyticsEventClient<$Result.GetResult<Prisma.$AnalyticsEventPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more AnalyticsEvents that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsEventFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AnalyticsEvents
     * const analyticsEvents = await prisma.analyticsEvent.findMany()
     * 
     * // Get first 10 AnalyticsEvents
     * const analyticsEvents = await prisma.analyticsEvent.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const analyticsEventWithIdOnly = await prisma.analyticsEvent.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends AnalyticsEventFindManyArgs>(args?: SelectSubset<T, AnalyticsEventFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnalyticsEventPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a AnalyticsEvent.
     * @param {AnalyticsEventCreateArgs} args - Arguments to create a AnalyticsEvent.
     * @example
     * // Create one AnalyticsEvent
     * const AnalyticsEvent = await prisma.analyticsEvent.create({
     *   data: {
     *     // ... data to create a AnalyticsEvent
     *   }
     * })
     * 
     */
    create<T extends AnalyticsEventCreateArgs>(args: SelectSubset<T, AnalyticsEventCreateArgs<ExtArgs>>): Prisma__AnalyticsEventClient<$Result.GetResult<Prisma.$AnalyticsEventPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many AnalyticsEvents.
     * @param {AnalyticsEventCreateManyArgs} args - Arguments to create many AnalyticsEvents.
     * @example
     * // Create many AnalyticsEvents
     * const analyticsEvent = await prisma.analyticsEvent.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends AnalyticsEventCreateManyArgs>(args?: SelectSubset<T, AnalyticsEventCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many AnalyticsEvents and returns the data saved in the database.
     * @param {AnalyticsEventCreateManyAndReturnArgs} args - Arguments to create many AnalyticsEvents.
     * @example
     * // Create many AnalyticsEvents
     * const analyticsEvent = await prisma.analyticsEvent.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many AnalyticsEvents and only return the `id`
     * const analyticsEventWithIdOnly = await prisma.analyticsEvent.createManyAndReturn({ 
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends AnalyticsEventCreateManyAndReturnArgs>(args?: SelectSubset<T, AnalyticsEventCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AnalyticsEventPayload<ExtArgs>, T, "createManyAndReturn">>

    /**
     * Delete a AnalyticsEvent.
     * @param {AnalyticsEventDeleteArgs} args - Arguments to delete one AnalyticsEvent.
     * @example
     * // Delete one AnalyticsEvent
     * const AnalyticsEvent = await prisma.analyticsEvent.delete({
     *   where: {
     *     // ... filter to delete one AnalyticsEvent
     *   }
     * })
     * 
     */
    delete<T extends AnalyticsEventDeleteArgs>(args: SelectSubset<T, AnalyticsEventDeleteArgs<ExtArgs>>): Prisma__AnalyticsEventClient<$Result.GetResult<Prisma.$AnalyticsEventPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one AnalyticsEvent.
     * @param {AnalyticsEventUpdateArgs} args - Arguments to update one AnalyticsEvent.
     * @example
     * // Update one AnalyticsEvent
     * const analyticsEvent = await prisma.analyticsEvent.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends AnalyticsEventUpdateArgs>(args: SelectSubset<T, AnalyticsEventUpdateArgs<ExtArgs>>): Prisma__AnalyticsEventClient<$Result.GetResult<Prisma.$AnalyticsEventPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more AnalyticsEvents.
     * @param {AnalyticsEventDeleteManyArgs} args - Arguments to filter AnalyticsEvents to delete.
     * @example
     * // Delete a few AnalyticsEvents
     * const { count } = await prisma.analyticsEvent.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends AnalyticsEventDeleteManyArgs>(args?: SelectSubset<T, AnalyticsEventDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AnalyticsEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsEventUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AnalyticsEvents
     * const analyticsEvent = await prisma.analyticsEvent.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends AnalyticsEventUpdateManyArgs>(args: SelectSubset<T, AnalyticsEventUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AnalyticsEvent.
     * @param {AnalyticsEventUpsertArgs} args - Arguments to update or create a AnalyticsEvent.
     * @example
     * // Update or create a AnalyticsEvent
     * const analyticsEvent = await prisma.analyticsEvent.upsert({
     *   create: {
     *     // ... data to create a AnalyticsEvent
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AnalyticsEvent we want to update
     *   }
     * })
     */
    upsert<T extends AnalyticsEventUpsertArgs>(args: SelectSubset<T, AnalyticsEventUpsertArgs<ExtArgs>>): Prisma__AnalyticsEventClient<$Result.GetResult<Prisma.$AnalyticsEventPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of AnalyticsEvents.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsEventCountArgs} args - Arguments to filter AnalyticsEvents to count.
     * @example
     * // Count the number of AnalyticsEvents
     * const count = await prisma.analyticsEvent.count({
     *   where: {
     *     // ... the filter for the AnalyticsEvents we want to count
     *   }
     * })
    **/
    count<T extends AnalyticsEventCountArgs>(
      args?: Subset<T, AnalyticsEventCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AnalyticsEventCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AnalyticsEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsEventAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AnalyticsEventAggregateArgs>(args: Subset<T, AnalyticsEventAggregateArgs>): Prisma.PrismaPromise<GetAnalyticsEventAggregateType<T>>

    /**
     * Group by AnalyticsEvent.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AnalyticsEventGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AnalyticsEventGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AnalyticsEventGroupByArgs['orderBy'] }
        : { orderBy?: AnalyticsEventGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AnalyticsEventGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAnalyticsEventGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the AnalyticsEvent model
   */
  readonly fields: AnalyticsEventFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for AnalyticsEvent.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AnalyticsEventClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends AnalyticsEvent$userArgs<ExtArgs> = {}>(args?: Subset<T, AnalyticsEvent$userArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | null, null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the AnalyticsEvent model
   */ 
  interface AnalyticsEventFieldRefs {
    readonly id: FieldRef<"AnalyticsEvent", 'String'>
    readonly eventType: FieldRef<"AnalyticsEvent", 'String'>
    readonly entityType: FieldRef<"AnalyticsEvent", 'String'>
    readonly entityId: FieldRef<"AnalyticsEvent", 'String'>
    readonly userId: FieldRef<"AnalyticsEvent", 'String'>
    readonly sessionId: FieldRef<"AnalyticsEvent", 'String'>
    readonly data: FieldRef<"AnalyticsEvent", 'String'>
    readonly ipAddress: FieldRef<"AnalyticsEvent", 'String'>
    readonly userAgent: FieldRef<"AnalyticsEvent", 'String'>
    readonly timestamp: FieldRef<"AnalyticsEvent", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * AnalyticsEvent findUnique
   */
  export type AnalyticsEventFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsEvent
     */
    select?: AnalyticsEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsEventInclude<ExtArgs> | null
    /**
     * Filter, which AnalyticsEvent to fetch.
     */
    where: AnalyticsEventWhereUniqueInput
  }

  /**
   * AnalyticsEvent findUniqueOrThrow
   */
  export type AnalyticsEventFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsEvent
     */
    select?: AnalyticsEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsEventInclude<ExtArgs> | null
    /**
     * Filter, which AnalyticsEvent to fetch.
     */
    where: AnalyticsEventWhereUniqueInput
  }

  /**
   * AnalyticsEvent findFirst
   */
  export type AnalyticsEventFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsEvent
     */
    select?: AnalyticsEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsEventInclude<ExtArgs> | null
    /**
     * Filter, which AnalyticsEvent to fetch.
     */
    where?: AnalyticsEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnalyticsEvents to fetch.
     */
    orderBy?: AnalyticsEventOrderByWithRelationInput | AnalyticsEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnalyticsEvents.
     */
    cursor?: AnalyticsEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnalyticsEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnalyticsEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnalyticsEvents.
     */
    distinct?: AnalyticsEventScalarFieldEnum | AnalyticsEventScalarFieldEnum[]
  }

  /**
   * AnalyticsEvent findFirstOrThrow
   */
  export type AnalyticsEventFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsEvent
     */
    select?: AnalyticsEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsEventInclude<ExtArgs> | null
    /**
     * Filter, which AnalyticsEvent to fetch.
     */
    where?: AnalyticsEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnalyticsEvents to fetch.
     */
    orderBy?: AnalyticsEventOrderByWithRelationInput | AnalyticsEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AnalyticsEvents.
     */
    cursor?: AnalyticsEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnalyticsEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnalyticsEvents.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AnalyticsEvents.
     */
    distinct?: AnalyticsEventScalarFieldEnum | AnalyticsEventScalarFieldEnum[]
  }

  /**
   * AnalyticsEvent findMany
   */
  export type AnalyticsEventFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsEvent
     */
    select?: AnalyticsEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsEventInclude<ExtArgs> | null
    /**
     * Filter, which AnalyticsEvents to fetch.
     */
    where?: AnalyticsEventWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AnalyticsEvents to fetch.
     */
    orderBy?: AnalyticsEventOrderByWithRelationInput | AnalyticsEventOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AnalyticsEvents.
     */
    cursor?: AnalyticsEventWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AnalyticsEvents from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AnalyticsEvents.
     */
    skip?: number
    distinct?: AnalyticsEventScalarFieldEnum | AnalyticsEventScalarFieldEnum[]
  }

  /**
   * AnalyticsEvent create
   */
  export type AnalyticsEventCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsEvent
     */
    select?: AnalyticsEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsEventInclude<ExtArgs> | null
    /**
     * The data needed to create a AnalyticsEvent.
     */
    data: XOR<AnalyticsEventCreateInput, AnalyticsEventUncheckedCreateInput>
  }

  /**
   * AnalyticsEvent createMany
   */
  export type AnalyticsEventCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AnalyticsEvents.
     */
    data: AnalyticsEventCreateManyInput | AnalyticsEventCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * AnalyticsEvent createManyAndReturn
   */
  export type AnalyticsEventCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsEvent
     */
    select?: AnalyticsEventSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * The data used to create many AnalyticsEvents.
     */
    data: AnalyticsEventCreateManyInput | AnalyticsEventCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsEventIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * AnalyticsEvent update
   */
  export type AnalyticsEventUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsEvent
     */
    select?: AnalyticsEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsEventInclude<ExtArgs> | null
    /**
     * The data needed to update a AnalyticsEvent.
     */
    data: XOR<AnalyticsEventUpdateInput, AnalyticsEventUncheckedUpdateInput>
    /**
     * Choose, which AnalyticsEvent to update.
     */
    where: AnalyticsEventWhereUniqueInput
  }

  /**
   * AnalyticsEvent updateMany
   */
  export type AnalyticsEventUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AnalyticsEvents.
     */
    data: XOR<AnalyticsEventUpdateManyMutationInput, AnalyticsEventUncheckedUpdateManyInput>
    /**
     * Filter which AnalyticsEvents to update
     */
    where?: AnalyticsEventWhereInput
  }

  /**
   * AnalyticsEvent upsert
   */
  export type AnalyticsEventUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsEvent
     */
    select?: AnalyticsEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsEventInclude<ExtArgs> | null
    /**
     * The filter to search for the AnalyticsEvent to update in case it exists.
     */
    where: AnalyticsEventWhereUniqueInput
    /**
     * In case the AnalyticsEvent found by the `where` argument doesn't exist, create a new AnalyticsEvent with this data.
     */
    create: XOR<AnalyticsEventCreateInput, AnalyticsEventUncheckedCreateInput>
    /**
     * In case the AnalyticsEvent was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AnalyticsEventUpdateInput, AnalyticsEventUncheckedUpdateInput>
  }

  /**
   * AnalyticsEvent delete
   */
  export type AnalyticsEventDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsEvent
     */
    select?: AnalyticsEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsEventInclude<ExtArgs> | null
    /**
     * Filter which AnalyticsEvent to delete.
     */
    where: AnalyticsEventWhereUniqueInput
  }

  /**
   * AnalyticsEvent deleteMany
   */
  export type AnalyticsEventDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which AnalyticsEvents to delete
     */
    where?: AnalyticsEventWhereInput
  }

  /**
   * AnalyticsEvent.user
   */
  export type AnalyticsEvent$userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * AnalyticsEvent without action
   */
  export type AnalyticsEventDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AnalyticsEvent
     */
    select?: AnalyticsEventSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AnalyticsEventInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    password: 'password',
    name: 'name',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const LaboratoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    accreditation: 'accreditation',
    email: 'email',
    phone: 'phone',
    address: 'address',
    isActive: 'isActive',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type LaboratoryScalarFieldEnum = (typeof LaboratoryScalarFieldEnum)[keyof typeof LaboratoryScalarFieldEnum]


  export const ProductScalarFieldEnum: {
    id: 'id',
    name: 'name',
    brand: 'brand',
    category: 'category',
    description: 'description',
    sku: 'sku',
    batchNumber: 'batchNumber',
    nutritionalInfo: 'nutritionalInfo',
    claims: 'claims',
    imageUrl: 'imageUrl',
    qrCode: 'qrCode',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type ProductScalarFieldEnum = (typeof ProductScalarFieldEnum)[keyof typeof ProductScalarFieldEnum]


  export const ReportScalarFieldEnum: {
    id: 'id',
    fileName: 'fileName',
    originalName: 'originalName',
    filePath: 'filePath',
    fileSize: 'fileSize',
    mimeType: 'mimeType',
    analysisType: 'analysisType',
    results: 'results',
    isVerified: 'isVerified',
    verificationHash: 'verificationHash',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    productId: 'productId',
    laboratoryId: 'laboratoryId'
  };

  export type ReportScalarFieldEnum = (typeof ReportScalarFieldEnum)[keyof typeof ReportScalarFieldEnum]


  export const ValidationScalarFieldEnum: {
    id: 'id',
    status: 'status',
    type: 'type',
    claimsValidated: 'claimsValidated',
    summary: 'summary',
    notes: 'notes',
    validatedAt: 'validatedAt',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    productId: 'productId',
    reportId: 'reportId',
    userId: 'userId'
  };

  export type ValidationScalarFieldEnum = (typeof ValidationScalarFieldEnum)[keyof typeof ValidationScalarFieldEnum]


  export const ProductSealScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    sealId: 'sealId',
    certificateNumber: 'certificateNumber',
    issuedDate: 'issuedDate',
    expiryDate: 'expiryDate',
    validatingLaboratory: 'validatingLaboratory',
    documentUrl: 'documentUrl',
    status: 'status',
    verifiedBy: 'verifiedBy',
    verifiedAt: 'verifiedAt',
    notes: 'notes',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ProductSealScalarFieldEnum = (typeof ProductSealScalarFieldEnum)[keyof typeof ProductSealScalarFieldEnum]


  export const QRCodeAccessScalarFieldEnum: {
    id: 'id',
    qrCode: 'qrCode',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    location: 'location',
    accessedAt: 'accessedAt'
  };

  export type QRCodeAccessScalarFieldEnum = (typeof QRCodeAccessScalarFieldEnum)[keyof typeof QRCodeAccessScalarFieldEnum]


  export const ValidationQueueScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    requestedById: 'requestedById',
    assignedToId: 'assignedToId',
    status: 'status',
    priority: 'priority',
    category: 'category',
    estimatedDuration: 'estimatedDuration',
    actualDuration: 'actualDuration',
    assignedAt: 'assignedAt',
    startedAt: 'startedAt',
    completedAt: 'completedAt',
    dueDate: 'dueDate',
    notes: 'notes',
    metadata: 'metadata',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type ValidationQueueScalarFieldEnum = (typeof ValidationQueueScalarFieldEnum)[keyof typeof ValidationQueueScalarFieldEnum]


  export const ValidationQueueHistoryScalarFieldEnum: {
    id: 'id',
    queueId: 'queueId',
    action: 'action',
    previousStatus: 'previousStatus',
    newStatus: 'newStatus',
    performedById: 'performedById',
    reason: 'reason',
    metadata: 'metadata',
    createdAt: 'createdAt'
  };

  export type ValidationQueueHistoryScalarFieldEnum = (typeof ValidationQueueHistoryScalarFieldEnum)[keyof typeof ValidationQueueHistoryScalarFieldEnum]


  export const AnalyticsEventScalarFieldEnum: {
    id: 'id',
    eventType: 'eventType',
    entityType: 'entityType',
    entityId: 'entityId',
    userId: 'userId',
    sessionId: 'sessionId',
    data: 'data',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    timestamp: 'timestamp'
  };

  export type AnalyticsEventScalarFieldEnum = (typeof AnalyticsEventScalarFieldEnum)[keyof typeof AnalyticsEventScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    products?: ProductListRelationFilter
    validations?: ValidationListRelationFilter
    queueRequestedBy?: ValidationQueueListRelationFilter
    queueAssignedTo?: ValidationQueueListRelationFilter
    queueHistoryActions?: ValidationQueueHistoryListRelationFilter
    analyticsEvents?: AnalyticsEventListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    products?: ProductOrderByRelationAggregateInput
    validations?: ValidationOrderByRelationAggregateInput
    queueRequestedBy?: ValidationQueueOrderByRelationAggregateInput
    queueAssignedTo?: ValidationQueueOrderByRelationAggregateInput
    queueHistoryActions?: ValidationQueueHistoryOrderByRelationAggregateInput
    analyticsEvents?: AnalyticsEventOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: StringFilter<"User"> | string
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    products?: ProductListRelationFilter
    validations?: ValidationListRelationFilter
    queueRequestedBy?: ValidationQueueListRelationFilter
    queueAssignedTo?: ValidationQueueListRelationFilter
    queueHistoryActions?: ValidationQueueHistoryListRelationFilter
    analyticsEvents?: AnalyticsEventListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    role?: StringWithAggregatesFilter<"User"> | string
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type LaboratoryWhereInput = {
    AND?: LaboratoryWhereInput | LaboratoryWhereInput[]
    OR?: LaboratoryWhereInput[]
    NOT?: LaboratoryWhereInput | LaboratoryWhereInput[]
    id?: StringFilter<"Laboratory"> | string
    name?: StringFilter<"Laboratory"> | string
    accreditation?: StringFilter<"Laboratory"> | string
    email?: StringFilter<"Laboratory"> | string
    phone?: StringNullableFilter<"Laboratory"> | string | null
    address?: StringNullableFilter<"Laboratory"> | string | null
    isActive?: BoolFilter<"Laboratory"> | boolean
    createdAt?: DateTimeFilter<"Laboratory"> | Date | string
    updatedAt?: DateTimeFilter<"Laboratory"> | Date | string
    reports?: ReportListRelationFilter
  }

  export type LaboratoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    accreditation?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reports?: ReportOrderByRelationAggregateInput
  }

  export type LaboratoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: LaboratoryWhereInput | LaboratoryWhereInput[]
    OR?: LaboratoryWhereInput[]
    NOT?: LaboratoryWhereInput | LaboratoryWhereInput[]
    name?: StringFilter<"Laboratory"> | string
    accreditation?: StringFilter<"Laboratory"> | string
    phone?: StringNullableFilter<"Laboratory"> | string | null
    address?: StringNullableFilter<"Laboratory"> | string | null
    isActive?: BoolFilter<"Laboratory"> | boolean
    createdAt?: DateTimeFilter<"Laboratory"> | Date | string
    updatedAt?: DateTimeFilter<"Laboratory"> | Date | string
    reports?: ReportListRelationFilter
  }, "id" | "email">

  export type LaboratoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    accreditation?: SortOrder
    email?: SortOrder
    phone?: SortOrderInput | SortOrder
    address?: SortOrderInput | SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: LaboratoryCountOrderByAggregateInput
    _max?: LaboratoryMaxOrderByAggregateInput
    _min?: LaboratoryMinOrderByAggregateInput
  }

  export type LaboratoryScalarWhereWithAggregatesInput = {
    AND?: LaboratoryScalarWhereWithAggregatesInput | LaboratoryScalarWhereWithAggregatesInput[]
    OR?: LaboratoryScalarWhereWithAggregatesInput[]
    NOT?: LaboratoryScalarWhereWithAggregatesInput | LaboratoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Laboratory"> | string
    name?: StringWithAggregatesFilter<"Laboratory"> | string
    accreditation?: StringWithAggregatesFilter<"Laboratory"> | string
    email?: StringWithAggregatesFilter<"Laboratory"> | string
    phone?: StringNullableWithAggregatesFilter<"Laboratory"> | string | null
    address?: StringNullableWithAggregatesFilter<"Laboratory"> | string | null
    isActive?: BoolWithAggregatesFilter<"Laboratory"> | boolean
    createdAt?: DateTimeWithAggregatesFilter<"Laboratory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Laboratory"> | Date | string
  }

  export type ProductWhereInput = {
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    id?: StringFilter<"Product"> | string
    name?: StringFilter<"Product"> | string
    brand?: StringFilter<"Product"> | string
    category?: StringFilter<"Product"> | string
    description?: StringNullableFilter<"Product"> | string | null
    sku?: StringFilter<"Product"> | string
    batchNumber?: StringNullableFilter<"Product"> | string | null
    nutritionalInfo?: StringNullableFilter<"Product"> | string | null
    claims?: StringNullableFilter<"Product"> | string | null
    imageUrl?: StringNullableFilter<"Product"> | string | null
    qrCode?: StringNullableFilter<"Product"> | string | null
    status?: StringFilter<"Product"> | string
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    userId?: StringFilter<"Product"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    validations?: ValidationListRelationFilter
    reports?: ReportListRelationFilter
    seals?: ProductSealListRelationFilter
    validationQueue?: ValidationQueueListRelationFilter
  }

  export type ProductOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    category?: SortOrder
    description?: SortOrderInput | SortOrder
    sku?: SortOrder
    batchNumber?: SortOrderInput | SortOrder
    nutritionalInfo?: SortOrderInput | SortOrder
    claims?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    qrCode?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    validations?: ValidationOrderByRelationAggregateInput
    reports?: ReportOrderByRelationAggregateInput
    seals?: ProductSealOrderByRelationAggregateInput
    validationQueue?: ValidationQueueOrderByRelationAggregateInput
  }

  export type ProductWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sku?: string
    qrCode?: string
    AND?: ProductWhereInput | ProductWhereInput[]
    OR?: ProductWhereInput[]
    NOT?: ProductWhereInput | ProductWhereInput[]
    name?: StringFilter<"Product"> | string
    brand?: StringFilter<"Product"> | string
    category?: StringFilter<"Product"> | string
    description?: StringNullableFilter<"Product"> | string | null
    batchNumber?: StringNullableFilter<"Product"> | string | null
    nutritionalInfo?: StringNullableFilter<"Product"> | string | null
    claims?: StringNullableFilter<"Product"> | string | null
    imageUrl?: StringNullableFilter<"Product"> | string | null
    status?: StringFilter<"Product"> | string
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    userId?: StringFilter<"Product"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    validations?: ValidationListRelationFilter
    reports?: ReportListRelationFilter
    seals?: ProductSealListRelationFilter
    validationQueue?: ValidationQueueListRelationFilter
  }, "id" | "sku" | "qrCode">

  export type ProductOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    category?: SortOrder
    description?: SortOrderInput | SortOrder
    sku?: SortOrder
    batchNumber?: SortOrderInput | SortOrder
    nutritionalInfo?: SortOrderInput | SortOrder
    claims?: SortOrderInput | SortOrder
    imageUrl?: SortOrderInput | SortOrder
    qrCode?: SortOrderInput | SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: ProductCountOrderByAggregateInput
    _max?: ProductMaxOrderByAggregateInput
    _min?: ProductMinOrderByAggregateInput
  }

  export type ProductScalarWhereWithAggregatesInput = {
    AND?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    OR?: ProductScalarWhereWithAggregatesInput[]
    NOT?: ProductScalarWhereWithAggregatesInput | ProductScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Product"> | string
    name?: StringWithAggregatesFilter<"Product"> | string
    brand?: StringWithAggregatesFilter<"Product"> | string
    category?: StringWithAggregatesFilter<"Product"> | string
    description?: StringNullableWithAggregatesFilter<"Product"> | string | null
    sku?: StringWithAggregatesFilter<"Product"> | string
    batchNumber?: StringNullableWithAggregatesFilter<"Product"> | string | null
    nutritionalInfo?: StringNullableWithAggregatesFilter<"Product"> | string | null
    claims?: StringNullableWithAggregatesFilter<"Product"> | string | null
    imageUrl?: StringNullableWithAggregatesFilter<"Product"> | string | null
    qrCode?: StringNullableWithAggregatesFilter<"Product"> | string | null
    status?: StringWithAggregatesFilter<"Product"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Product"> | Date | string
    userId?: StringWithAggregatesFilter<"Product"> | string
  }

  export type ReportWhereInput = {
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    id?: StringFilter<"Report"> | string
    fileName?: StringFilter<"Report"> | string
    originalName?: StringFilter<"Report"> | string
    filePath?: StringFilter<"Report"> | string
    fileSize?: IntFilter<"Report"> | number
    mimeType?: StringFilter<"Report"> | string
    analysisType?: StringFilter<"Report"> | string
    results?: StringFilter<"Report"> | string
    isVerified?: BoolFilter<"Report"> | boolean
    verificationHash?: StringNullableFilter<"Report"> | string | null
    createdAt?: DateTimeFilter<"Report"> | Date | string
    updatedAt?: DateTimeFilter<"Report"> | Date | string
    productId?: StringFilter<"Report"> | string
    laboratoryId?: StringFilter<"Report"> | string
    product?: XOR<ProductRelationFilter, ProductWhereInput>
    laboratory?: XOR<LaboratoryRelationFilter, LaboratoryWhereInput>
    validations?: ValidationListRelationFilter
  }

  export type ReportOrderByWithRelationInput = {
    id?: SortOrder
    fileName?: SortOrder
    originalName?: SortOrder
    filePath?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    analysisType?: SortOrder
    results?: SortOrder
    isVerified?: SortOrder
    verificationHash?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    productId?: SortOrder
    laboratoryId?: SortOrder
    product?: ProductOrderByWithRelationInput
    laboratory?: LaboratoryOrderByWithRelationInput
    validations?: ValidationOrderByRelationAggregateInput
  }

  export type ReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    fileName?: StringFilter<"Report"> | string
    originalName?: StringFilter<"Report"> | string
    filePath?: StringFilter<"Report"> | string
    fileSize?: IntFilter<"Report"> | number
    mimeType?: StringFilter<"Report"> | string
    analysisType?: StringFilter<"Report"> | string
    results?: StringFilter<"Report"> | string
    isVerified?: BoolFilter<"Report"> | boolean
    verificationHash?: StringNullableFilter<"Report"> | string | null
    createdAt?: DateTimeFilter<"Report"> | Date | string
    updatedAt?: DateTimeFilter<"Report"> | Date | string
    productId?: StringFilter<"Report"> | string
    laboratoryId?: StringFilter<"Report"> | string
    product?: XOR<ProductRelationFilter, ProductWhereInput>
    laboratory?: XOR<LaboratoryRelationFilter, LaboratoryWhereInput>
    validations?: ValidationListRelationFilter
  }, "id">

  export type ReportOrderByWithAggregationInput = {
    id?: SortOrder
    fileName?: SortOrder
    originalName?: SortOrder
    filePath?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    analysisType?: SortOrder
    results?: SortOrder
    isVerified?: SortOrder
    verificationHash?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    productId?: SortOrder
    laboratoryId?: SortOrder
    _count?: ReportCountOrderByAggregateInput
    _avg?: ReportAvgOrderByAggregateInput
    _max?: ReportMaxOrderByAggregateInput
    _min?: ReportMinOrderByAggregateInput
    _sum?: ReportSumOrderByAggregateInput
  }

  export type ReportScalarWhereWithAggregatesInput = {
    AND?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    OR?: ReportScalarWhereWithAggregatesInput[]
    NOT?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Report"> | string
    fileName?: StringWithAggregatesFilter<"Report"> | string
    originalName?: StringWithAggregatesFilter<"Report"> | string
    filePath?: StringWithAggregatesFilter<"Report"> | string
    fileSize?: IntWithAggregatesFilter<"Report"> | number
    mimeType?: StringWithAggregatesFilter<"Report"> | string
    analysisType?: StringWithAggregatesFilter<"Report"> | string
    results?: StringWithAggregatesFilter<"Report"> | string
    isVerified?: BoolWithAggregatesFilter<"Report"> | boolean
    verificationHash?: StringNullableWithAggregatesFilter<"Report"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Report"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Report"> | Date | string
    productId?: StringWithAggregatesFilter<"Report"> | string
    laboratoryId?: StringWithAggregatesFilter<"Report"> | string
  }

  export type ValidationWhereInput = {
    AND?: ValidationWhereInput | ValidationWhereInput[]
    OR?: ValidationWhereInput[]
    NOT?: ValidationWhereInput | ValidationWhereInput[]
    id?: StringFilter<"Validation"> | string
    status?: StringFilter<"Validation"> | string
    type?: StringFilter<"Validation"> | string
    claimsValidated?: StringNullableFilter<"Validation"> | string | null
    summary?: StringNullableFilter<"Validation"> | string | null
    notes?: StringNullableFilter<"Validation"> | string | null
    validatedAt?: DateTimeNullableFilter<"Validation"> | Date | string | null
    createdAt?: DateTimeFilter<"Validation"> | Date | string
    updatedAt?: DateTimeFilter<"Validation"> | Date | string
    productId?: StringFilter<"Validation"> | string
    reportId?: StringNullableFilter<"Validation"> | string | null
    userId?: StringFilter<"Validation"> | string
    product?: XOR<ProductRelationFilter, ProductWhereInput>
    report?: XOR<ReportNullableRelationFilter, ReportWhereInput> | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ValidationOrderByWithRelationInput = {
    id?: SortOrder
    status?: SortOrder
    type?: SortOrder
    claimsValidated?: SortOrderInput | SortOrder
    summary?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    validatedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    productId?: SortOrder
    reportId?: SortOrderInput | SortOrder
    userId?: SortOrder
    product?: ProductOrderByWithRelationInput
    report?: ReportOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ValidationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ValidationWhereInput | ValidationWhereInput[]
    OR?: ValidationWhereInput[]
    NOT?: ValidationWhereInput | ValidationWhereInput[]
    status?: StringFilter<"Validation"> | string
    type?: StringFilter<"Validation"> | string
    claimsValidated?: StringNullableFilter<"Validation"> | string | null
    summary?: StringNullableFilter<"Validation"> | string | null
    notes?: StringNullableFilter<"Validation"> | string | null
    validatedAt?: DateTimeNullableFilter<"Validation"> | Date | string | null
    createdAt?: DateTimeFilter<"Validation"> | Date | string
    updatedAt?: DateTimeFilter<"Validation"> | Date | string
    productId?: StringFilter<"Validation"> | string
    reportId?: StringNullableFilter<"Validation"> | string | null
    userId?: StringFilter<"Validation"> | string
    product?: XOR<ProductRelationFilter, ProductWhereInput>
    report?: XOR<ReportNullableRelationFilter, ReportWhereInput> | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type ValidationOrderByWithAggregationInput = {
    id?: SortOrder
    status?: SortOrder
    type?: SortOrder
    claimsValidated?: SortOrderInput | SortOrder
    summary?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    validatedAt?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    productId?: SortOrder
    reportId?: SortOrderInput | SortOrder
    userId?: SortOrder
    _count?: ValidationCountOrderByAggregateInput
    _max?: ValidationMaxOrderByAggregateInput
    _min?: ValidationMinOrderByAggregateInput
  }

  export type ValidationScalarWhereWithAggregatesInput = {
    AND?: ValidationScalarWhereWithAggregatesInput | ValidationScalarWhereWithAggregatesInput[]
    OR?: ValidationScalarWhereWithAggregatesInput[]
    NOT?: ValidationScalarWhereWithAggregatesInput | ValidationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Validation"> | string
    status?: StringWithAggregatesFilter<"Validation"> | string
    type?: StringWithAggregatesFilter<"Validation"> | string
    claimsValidated?: StringNullableWithAggregatesFilter<"Validation"> | string | null
    summary?: StringNullableWithAggregatesFilter<"Validation"> | string | null
    notes?: StringNullableWithAggregatesFilter<"Validation"> | string | null
    validatedAt?: DateTimeNullableWithAggregatesFilter<"Validation"> | Date | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Validation"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Validation"> | Date | string
    productId?: StringWithAggregatesFilter<"Validation"> | string
    reportId?: StringNullableWithAggregatesFilter<"Validation"> | string | null
    userId?: StringWithAggregatesFilter<"Validation"> | string
  }

  export type ProductSealWhereInput = {
    AND?: ProductSealWhereInput | ProductSealWhereInput[]
    OR?: ProductSealWhereInput[]
    NOT?: ProductSealWhereInput | ProductSealWhereInput[]
    id?: StringFilter<"ProductSeal"> | string
    productId?: StringFilter<"ProductSeal"> | string
    sealId?: StringFilter<"ProductSeal"> | string
    certificateNumber?: StringNullableFilter<"ProductSeal"> | string | null
    issuedDate?: DateTimeNullableFilter<"ProductSeal"> | Date | string | null
    expiryDate?: DateTimeNullableFilter<"ProductSeal"> | Date | string | null
    validatingLaboratory?: StringNullableFilter<"ProductSeal"> | string | null
    documentUrl?: StringNullableFilter<"ProductSeal"> | string | null
    status?: StringFilter<"ProductSeal"> | string
    verifiedBy?: StringNullableFilter<"ProductSeal"> | string | null
    verifiedAt?: DateTimeNullableFilter<"ProductSeal"> | Date | string | null
    notes?: StringNullableFilter<"ProductSeal"> | string | null
    createdAt?: DateTimeFilter<"ProductSeal"> | Date | string
    updatedAt?: DateTimeFilter<"ProductSeal"> | Date | string
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }

  export type ProductSealOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    sealId?: SortOrder
    certificateNumber?: SortOrderInput | SortOrder
    issuedDate?: SortOrderInput | SortOrder
    expiryDate?: SortOrderInput | SortOrder
    validatingLaboratory?: SortOrderInput | SortOrder
    documentUrl?: SortOrderInput | SortOrder
    status?: SortOrder
    verifiedBy?: SortOrderInput | SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    product?: ProductOrderByWithRelationInput
  }

  export type ProductSealWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProductSealWhereInput | ProductSealWhereInput[]
    OR?: ProductSealWhereInput[]
    NOT?: ProductSealWhereInput | ProductSealWhereInput[]
    productId?: StringFilter<"ProductSeal"> | string
    sealId?: StringFilter<"ProductSeal"> | string
    certificateNumber?: StringNullableFilter<"ProductSeal"> | string | null
    issuedDate?: DateTimeNullableFilter<"ProductSeal"> | Date | string | null
    expiryDate?: DateTimeNullableFilter<"ProductSeal"> | Date | string | null
    validatingLaboratory?: StringNullableFilter<"ProductSeal"> | string | null
    documentUrl?: StringNullableFilter<"ProductSeal"> | string | null
    status?: StringFilter<"ProductSeal"> | string
    verifiedBy?: StringNullableFilter<"ProductSeal"> | string | null
    verifiedAt?: DateTimeNullableFilter<"ProductSeal"> | Date | string | null
    notes?: StringNullableFilter<"ProductSeal"> | string | null
    createdAt?: DateTimeFilter<"ProductSeal"> | Date | string
    updatedAt?: DateTimeFilter<"ProductSeal"> | Date | string
    product?: XOR<ProductRelationFilter, ProductWhereInput>
  }, "id">

  export type ProductSealOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    sealId?: SortOrder
    certificateNumber?: SortOrderInput | SortOrder
    issuedDate?: SortOrderInput | SortOrder
    expiryDate?: SortOrderInput | SortOrder
    validatingLaboratory?: SortOrderInput | SortOrder
    documentUrl?: SortOrderInput | SortOrder
    status?: SortOrder
    verifiedBy?: SortOrderInput | SortOrder
    verifiedAt?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ProductSealCountOrderByAggregateInput
    _max?: ProductSealMaxOrderByAggregateInput
    _min?: ProductSealMinOrderByAggregateInput
  }

  export type ProductSealScalarWhereWithAggregatesInput = {
    AND?: ProductSealScalarWhereWithAggregatesInput | ProductSealScalarWhereWithAggregatesInput[]
    OR?: ProductSealScalarWhereWithAggregatesInput[]
    NOT?: ProductSealScalarWhereWithAggregatesInput | ProductSealScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ProductSeal"> | string
    productId?: StringWithAggregatesFilter<"ProductSeal"> | string
    sealId?: StringWithAggregatesFilter<"ProductSeal"> | string
    certificateNumber?: StringNullableWithAggregatesFilter<"ProductSeal"> | string | null
    issuedDate?: DateTimeNullableWithAggregatesFilter<"ProductSeal"> | Date | string | null
    expiryDate?: DateTimeNullableWithAggregatesFilter<"ProductSeal"> | Date | string | null
    validatingLaboratory?: StringNullableWithAggregatesFilter<"ProductSeal"> | string | null
    documentUrl?: StringNullableWithAggregatesFilter<"ProductSeal"> | string | null
    status?: StringWithAggregatesFilter<"ProductSeal"> | string
    verifiedBy?: StringNullableWithAggregatesFilter<"ProductSeal"> | string | null
    verifiedAt?: DateTimeNullableWithAggregatesFilter<"ProductSeal"> | Date | string | null
    notes?: StringNullableWithAggregatesFilter<"ProductSeal"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ProductSeal"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ProductSeal"> | Date | string
  }

  export type QRCodeAccessWhereInput = {
    AND?: QRCodeAccessWhereInput | QRCodeAccessWhereInput[]
    OR?: QRCodeAccessWhereInput[]
    NOT?: QRCodeAccessWhereInput | QRCodeAccessWhereInput[]
    id?: StringFilter<"QRCodeAccess"> | string
    qrCode?: StringFilter<"QRCodeAccess"> | string
    ipAddress?: StringNullableFilter<"QRCodeAccess"> | string | null
    userAgent?: StringNullableFilter<"QRCodeAccess"> | string | null
    location?: StringNullableFilter<"QRCodeAccess"> | string | null
    accessedAt?: DateTimeFilter<"QRCodeAccess"> | Date | string
  }

  export type QRCodeAccessOrderByWithRelationInput = {
    id?: SortOrder
    qrCode?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    accessedAt?: SortOrder
  }

  export type QRCodeAccessWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: QRCodeAccessWhereInput | QRCodeAccessWhereInput[]
    OR?: QRCodeAccessWhereInput[]
    NOT?: QRCodeAccessWhereInput | QRCodeAccessWhereInput[]
    qrCode?: StringFilter<"QRCodeAccess"> | string
    ipAddress?: StringNullableFilter<"QRCodeAccess"> | string | null
    userAgent?: StringNullableFilter<"QRCodeAccess"> | string | null
    location?: StringNullableFilter<"QRCodeAccess"> | string | null
    accessedAt?: DateTimeFilter<"QRCodeAccess"> | Date | string
  }, "id">

  export type QRCodeAccessOrderByWithAggregationInput = {
    id?: SortOrder
    qrCode?: SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    location?: SortOrderInput | SortOrder
    accessedAt?: SortOrder
    _count?: QRCodeAccessCountOrderByAggregateInput
    _max?: QRCodeAccessMaxOrderByAggregateInput
    _min?: QRCodeAccessMinOrderByAggregateInput
  }

  export type QRCodeAccessScalarWhereWithAggregatesInput = {
    AND?: QRCodeAccessScalarWhereWithAggregatesInput | QRCodeAccessScalarWhereWithAggregatesInput[]
    OR?: QRCodeAccessScalarWhereWithAggregatesInput[]
    NOT?: QRCodeAccessScalarWhereWithAggregatesInput | QRCodeAccessScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"QRCodeAccess"> | string
    qrCode?: StringWithAggregatesFilter<"QRCodeAccess"> | string
    ipAddress?: StringNullableWithAggregatesFilter<"QRCodeAccess"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"QRCodeAccess"> | string | null
    location?: StringNullableWithAggregatesFilter<"QRCodeAccess"> | string | null
    accessedAt?: DateTimeWithAggregatesFilter<"QRCodeAccess"> | Date | string
  }

  export type ValidationQueueWhereInput = {
    AND?: ValidationQueueWhereInput | ValidationQueueWhereInput[]
    OR?: ValidationQueueWhereInput[]
    NOT?: ValidationQueueWhereInput | ValidationQueueWhereInput[]
    id?: StringFilter<"ValidationQueue"> | string
    productId?: StringFilter<"ValidationQueue"> | string
    requestedById?: StringFilter<"ValidationQueue"> | string
    assignedToId?: StringNullableFilter<"ValidationQueue"> | string | null
    status?: StringFilter<"ValidationQueue"> | string
    priority?: StringFilter<"ValidationQueue"> | string
    category?: StringFilter<"ValidationQueue"> | string
    estimatedDuration?: IntNullableFilter<"ValidationQueue"> | number | null
    actualDuration?: IntNullableFilter<"ValidationQueue"> | number | null
    assignedAt?: DateTimeNullableFilter<"ValidationQueue"> | Date | string | null
    startedAt?: DateTimeNullableFilter<"ValidationQueue"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"ValidationQueue"> | Date | string | null
    dueDate?: DateTimeNullableFilter<"ValidationQueue"> | Date | string | null
    notes?: StringNullableFilter<"ValidationQueue"> | string | null
    metadata?: StringNullableFilter<"ValidationQueue"> | string | null
    createdAt?: DateTimeFilter<"ValidationQueue"> | Date | string
    updatedAt?: DateTimeFilter<"ValidationQueue"> | Date | string
    product?: XOR<ProductRelationFilter, ProductWhereInput>
    requestedBy?: XOR<UserRelationFilter, UserWhereInput>
    assignedTo?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    history?: ValidationQueueHistoryListRelationFilter
  }

  export type ValidationQueueOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    requestedById?: SortOrder
    assignedToId?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    category?: SortOrder
    estimatedDuration?: SortOrderInput | SortOrder
    actualDuration?: SortOrderInput | SortOrder
    assignedAt?: SortOrderInput | SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    product?: ProductOrderByWithRelationInput
    requestedBy?: UserOrderByWithRelationInput
    assignedTo?: UserOrderByWithRelationInput
    history?: ValidationQueueHistoryOrderByRelationAggregateInput
  }

  export type ValidationQueueWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ValidationQueueWhereInput | ValidationQueueWhereInput[]
    OR?: ValidationQueueWhereInput[]
    NOT?: ValidationQueueWhereInput | ValidationQueueWhereInput[]
    productId?: StringFilter<"ValidationQueue"> | string
    requestedById?: StringFilter<"ValidationQueue"> | string
    assignedToId?: StringNullableFilter<"ValidationQueue"> | string | null
    status?: StringFilter<"ValidationQueue"> | string
    priority?: StringFilter<"ValidationQueue"> | string
    category?: StringFilter<"ValidationQueue"> | string
    estimatedDuration?: IntNullableFilter<"ValidationQueue"> | number | null
    actualDuration?: IntNullableFilter<"ValidationQueue"> | number | null
    assignedAt?: DateTimeNullableFilter<"ValidationQueue"> | Date | string | null
    startedAt?: DateTimeNullableFilter<"ValidationQueue"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"ValidationQueue"> | Date | string | null
    dueDate?: DateTimeNullableFilter<"ValidationQueue"> | Date | string | null
    notes?: StringNullableFilter<"ValidationQueue"> | string | null
    metadata?: StringNullableFilter<"ValidationQueue"> | string | null
    createdAt?: DateTimeFilter<"ValidationQueue"> | Date | string
    updatedAt?: DateTimeFilter<"ValidationQueue"> | Date | string
    product?: XOR<ProductRelationFilter, ProductWhereInput>
    requestedBy?: XOR<UserRelationFilter, UserWhereInput>
    assignedTo?: XOR<UserNullableRelationFilter, UserWhereInput> | null
    history?: ValidationQueueHistoryListRelationFilter
  }, "id">

  export type ValidationQueueOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    requestedById?: SortOrder
    assignedToId?: SortOrderInput | SortOrder
    status?: SortOrder
    priority?: SortOrder
    category?: SortOrder
    estimatedDuration?: SortOrderInput | SortOrder
    actualDuration?: SortOrderInput | SortOrder
    assignedAt?: SortOrderInput | SortOrder
    startedAt?: SortOrderInput | SortOrder
    completedAt?: SortOrderInput | SortOrder
    dueDate?: SortOrderInput | SortOrder
    notes?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: ValidationQueueCountOrderByAggregateInput
    _avg?: ValidationQueueAvgOrderByAggregateInput
    _max?: ValidationQueueMaxOrderByAggregateInput
    _min?: ValidationQueueMinOrderByAggregateInput
    _sum?: ValidationQueueSumOrderByAggregateInput
  }

  export type ValidationQueueScalarWhereWithAggregatesInput = {
    AND?: ValidationQueueScalarWhereWithAggregatesInput | ValidationQueueScalarWhereWithAggregatesInput[]
    OR?: ValidationQueueScalarWhereWithAggregatesInput[]
    NOT?: ValidationQueueScalarWhereWithAggregatesInput | ValidationQueueScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ValidationQueue"> | string
    productId?: StringWithAggregatesFilter<"ValidationQueue"> | string
    requestedById?: StringWithAggregatesFilter<"ValidationQueue"> | string
    assignedToId?: StringNullableWithAggregatesFilter<"ValidationQueue"> | string | null
    status?: StringWithAggregatesFilter<"ValidationQueue"> | string
    priority?: StringWithAggregatesFilter<"ValidationQueue"> | string
    category?: StringWithAggregatesFilter<"ValidationQueue"> | string
    estimatedDuration?: IntNullableWithAggregatesFilter<"ValidationQueue"> | number | null
    actualDuration?: IntNullableWithAggregatesFilter<"ValidationQueue"> | number | null
    assignedAt?: DateTimeNullableWithAggregatesFilter<"ValidationQueue"> | Date | string | null
    startedAt?: DateTimeNullableWithAggregatesFilter<"ValidationQueue"> | Date | string | null
    completedAt?: DateTimeNullableWithAggregatesFilter<"ValidationQueue"> | Date | string | null
    dueDate?: DateTimeNullableWithAggregatesFilter<"ValidationQueue"> | Date | string | null
    notes?: StringNullableWithAggregatesFilter<"ValidationQueue"> | string | null
    metadata?: StringNullableWithAggregatesFilter<"ValidationQueue"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ValidationQueue"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ValidationQueue"> | Date | string
  }

  export type ValidationQueueHistoryWhereInput = {
    AND?: ValidationQueueHistoryWhereInput | ValidationQueueHistoryWhereInput[]
    OR?: ValidationQueueHistoryWhereInput[]
    NOT?: ValidationQueueHistoryWhereInput | ValidationQueueHistoryWhereInput[]
    id?: StringFilter<"ValidationQueueHistory"> | string
    queueId?: StringFilter<"ValidationQueueHistory"> | string
    action?: StringFilter<"ValidationQueueHistory"> | string
    previousStatus?: StringNullableFilter<"ValidationQueueHistory"> | string | null
    newStatus?: StringNullableFilter<"ValidationQueueHistory"> | string | null
    performedById?: StringFilter<"ValidationQueueHistory"> | string
    reason?: StringNullableFilter<"ValidationQueueHistory"> | string | null
    metadata?: StringNullableFilter<"ValidationQueueHistory"> | string | null
    createdAt?: DateTimeFilter<"ValidationQueueHistory"> | Date | string
    queue?: XOR<ValidationQueueRelationFilter, ValidationQueueWhereInput>
    performedBy?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ValidationQueueHistoryOrderByWithRelationInput = {
    id?: SortOrder
    queueId?: SortOrder
    action?: SortOrder
    previousStatus?: SortOrderInput | SortOrder
    newStatus?: SortOrderInput | SortOrder
    performedById?: SortOrder
    reason?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    queue?: ValidationQueueOrderByWithRelationInput
    performedBy?: UserOrderByWithRelationInput
  }

  export type ValidationQueueHistoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ValidationQueueHistoryWhereInput | ValidationQueueHistoryWhereInput[]
    OR?: ValidationQueueHistoryWhereInput[]
    NOT?: ValidationQueueHistoryWhereInput | ValidationQueueHistoryWhereInput[]
    queueId?: StringFilter<"ValidationQueueHistory"> | string
    action?: StringFilter<"ValidationQueueHistory"> | string
    previousStatus?: StringNullableFilter<"ValidationQueueHistory"> | string | null
    newStatus?: StringNullableFilter<"ValidationQueueHistory"> | string | null
    performedById?: StringFilter<"ValidationQueueHistory"> | string
    reason?: StringNullableFilter<"ValidationQueueHistory"> | string | null
    metadata?: StringNullableFilter<"ValidationQueueHistory"> | string | null
    createdAt?: DateTimeFilter<"ValidationQueueHistory"> | Date | string
    queue?: XOR<ValidationQueueRelationFilter, ValidationQueueWhereInput>
    performedBy?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type ValidationQueueHistoryOrderByWithAggregationInput = {
    id?: SortOrder
    queueId?: SortOrder
    action?: SortOrder
    previousStatus?: SortOrderInput | SortOrder
    newStatus?: SortOrderInput | SortOrder
    performedById?: SortOrder
    reason?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    _count?: ValidationQueueHistoryCountOrderByAggregateInput
    _max?: ValidationQueueHistoryMaxOrderByAggregateInput
    _min?: ValidationQueueHistoryMinOrderByAggregateInput
  }

  export type ValidationQueueHistoryScalarWhereWithAggregatesInput = {
    AND?: ValidationQueueHistoryScalarWhereWithAggregatesInput | ValidationQueueHistoryScalarWhereWithAggregatesInput[]
    OR?: ValidationQueueHistoryScalarWhereWithAggregatesInput[]
    NOT?: ValidationQueueHistoryScalarWhereWithAggregatesInput | ValidationQueueHistoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ValidationQueueHistory"> | string
    queueId?: StringWithAggregatesFilter<"ValidationQueueHistory"> | string
    action?: StringWithAggregatesFilter<"ValidationQueueHistory"> | string
    previousStatus?: StringNullableWithAggregatesFilter<"ValidationQueueHistory"> | string | null
    newStatus?: StringNullableWithAggregatesFilter<"ValidationQueueHistory"> | string | null
    performedById?: StringWithAggregatesFilter<"ValidationQueueHistory"> | string
    reason?: StringNullableWithAggregatesFilter<"ValidationQueueHistory"> | string | null
    metadata?: StringNullableWithAggregatesFilter<"ValidationQueueHistory"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ValidationQueueHistory"> | Date | string
  }

  export type AnalyticsEventWhereInput = {
    AND?: AnalyticsEventWhereInput | AnalyticsEventWhereInput[]
    OR?: AnalyticsEventWhereInput[]
    NOT?: AnalyticsEventWhereInput | AnalyticsEventWhereInput[]
    id?: StringFilter<"AnalyticsEvent"> | string
    eventType?: StringFilter<"AnalyticsEvent"> | string
    entityType?: StringFilter<"AnalyticsEvent"> | string
    entityId?: StringFilter<"AnalyticsEvent"> | string
    userId?: StringNullableFilter<"AnalyticsEvent"> | string | null
    sessionId?: StringNullableFilter<"AnalyticsEvent"> | string | null
    data?: StringNullableFilter<"AnalyticsEvent"> | string | null
    ipAddress?: StringNullableFilter<"AnalyticsEvent"> | string | null
    userAgent?: StringNullableFilter<"AnalyticsEvent"> | string | null
    timestamp?: DateTimeFilter<"AnalyticsEvent"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type AnalyticsEventOrderByWithRelationInput = {
    id?: SortOrder
    eventType?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    userId?: SortOrderInput | SortOrder
    sessionId?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AnalyticsEventWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: AnalyticsEventWhereInput | AnalyticsEventWhereInput[]
    OR?: AnalyticsEventWhereInput[]
    NOT?: AnalyticsEventWhereInput | AnalyticsEventWhereInput[]
    eventType?: StringFilter<"AnalyticsEvent"> | string
    entityType?: StringFilter<"AnalyticsEvent"> | string
    entityId?: StringFilter<"AnalyticsEvent"> | string
    userId?: StringNullableFilter<"AnalyticsEvent"> | string | null
    sessionId?: StringNullableFilter<"AnalyticsEvent"> | string | null
    data?: StringNullableFilter<"AnalyticsEvent"> | string | null
    ipAddress?: StringNullableFilter<"AnalyticsEvent"> | string | null
    userAgent?: StringNullableFilter<"AnalyticsEvent"> | string | null
    timestamp?: DateTimeFilter<"AnalyticsEvent"> | Date | string
    user?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type AnalyticsEventOrderByWithAggregationInput = {
    id?: SortOrder
    eventType?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    userId?: SortOrderInput | SortOrder
    sessionId?: SortOrderInput | SortOrder
    data?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _count?: AnalyticsEventCountOrderByAggregateInput
    _max?: AnalyticsEventMaxOrderByAggregateInput
    _min?: AnalyticsEventMinOrderByAggregateInput
  }

  export type AnalyticsEventScalarWhereWithAggregatesInput = {
    AND?: AnalyticsEventScalarWhereWithAggregatesInput | AnalyticsEventScalarWhereWithAggregatesInput[]
    OR?: AnalyticsEventScalarWhereWithAggregatesInput[]
    NOT?: AnalyticsEventScalarWhereWithAggregatesInput | AnalyticsEventScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"AnalyticsEvent"> | string
    eventType?: StringWithAggregatesFilter<"AnalyticsEvent"> | string
    entityType?: StringWithAggregatesFilter<"AnalyticsEvent"> | string
    entityId?: StringWithAggregatesFilter<"AnalyticsEvent"> | string
    userId?: StringNullableWithAggregatesFilter<"AnalyticsEvent"> | string | null
    sessionId?: StringNullableWithAggregatesFilter<"AnalyticsEvent"> | string | null
    data?: StringNullableWithAggregatesFilter<"AnalyticsEvent"> | string | null
    ipAddress?: StringNullableWithAggregatesFilter<"AnalyticsEvent"> | string | null
    userAgent?: StringNullableWithAggregatesFilter<"AnalyticsEvent"> | string | null
    timestamp?: DateTimeWithAggregatesFilter<"AnalyticsEvent"> | Date | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: ProductCreateNestedManyWithoutUserInput
    validations?: ValidationCreateNestedManyWithoutUserInput
    queueRequestedBy?: ValidationQueueCreateNestedManyWithoutRequestedByInput
    queueAssignedTo?: ValidationQueueCreateNestedManyWithoutAssignedToInput
    queueHistoryActions?: ValidationQueueHistoryCreateNestedManyWithoutPerformedByInput
    analyticsEvents?: AnalyticsEventCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: ProductUncheckedCreateNestedManyWithoutUserInput
    validations?: ValidationUncheckedCreateNestedManyWithoutUserInput
    queueRequestedBy?: ValidationQueueUncheckedCreateNestedManyWithoutRequestedByInput
    queueAssignedTo?: ValidationQueueUncheckedCreateNestedManyWithoutAssignedToInput
    queueHistoryActions?: ValidationQueueHistoryUncheckedCreateNestedManyWithoutPerformedByInput
    analyticsEvents?: AnalyticsEventUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: ProductUpdateManyWithoutUserNestedInput
    validations?: ValidationUpdateManyWithoutUserNestedInput
    queueRequestedBy?: ValidationQueueUpdateManyWithoutRequestedByNestedInput
    queueAssignedTo?: ValidationQueueUpdateManyWithoutAssignedToNestedInput
    queueHistoryActions?: ValidationQueueHistoryUpdateManyWithoutPerformedByNestedInput
    analyticsEvents?: AnalyticsEventUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: ProductUncheckedUpdateManyWithoutUserNestedInput
    validations?: ValidationUncheckedUpdateManyWithoutUserNestedInput
    queueRequestedBy?: ValidationQueueUncheckedUpdateManyWithoutRequestedByNestedInput
    queueAssignedTo?: ValidationQueueUncheckedUpdateManyWithoutAssignedToNestedInput
    queueHistoryActions?: ValidationQueueHistoryUncheckedUpdateManyWithoutPerformedByNestedInput
    analyticsEvents?: AnalyticsEventUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LaboratoryCreateInput = {
    id?: string
    name: string
    accreditation: string
    email: string
    phone?: string | null
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    reports?: ReportCreateNestedManyWithoutLaboratoryInput
  }

  export type LaboratoryUncheckedCreateInput = {
    id?: string
    name: string
    accreditation: string
    email: string
    phone?: string | null
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
    reports?: ReportUncheckedCreateNestedManyWithoutLaboratoryInput
  }

  export type LaboratoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    accreditation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: ReportUpdateManyWithoutLaboratoryNestedInput
  }

  export type LaboratoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    accreditation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: ReportUncheckedUpdateManyWithoutLaboratoryNestedInput
  }

  export type LaboratoryCreateManyInput = {
    id?: string
    name: string
    accreditation: string
    email: string
    phone?: string | null
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LaboratoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    accreditation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LaboratoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    accreditation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductCreateInput = {
    id?: string
    name: string
    brand: string
    category: string
    description?: string | null
    sku: string
    batchNumber?: string | null
    nutritionalInfo?: string | null
    claims?: string | null
    imageUrl?: string | null
    qrCode?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProductsInput
    validations?: ValidationCreateNestedManyWithoutProductInput
    reports?: ReportCreateNestedManyWithoutProductInput
    seals?: ProductSealCreateNestedManyWithoutProductInput
    validationQueue?: ValidationQueueCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateInput = {
    id?: string
    name: string
    brand: string
    category: string
    description?: string | null
    sku: string
    batchNumber?: string | null
    nutritionalInfo?: string | null
    claims?: string | null
    imageUrl?: string | null
    qrCode?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    validations?: ValidationUncheckedCreateNestedManyWithoutProductInput
    reports?: ReportUncheckedCreateNestedManyWithoutProductInput
    seals?: ProductSealUncheckedCreateNestedManyWithoutProductInput
    validationQueue?: ValidationQueueUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sku?: StringFieldUpdateOperationsInput | string
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nutritionalInfo?: NullableStringFieldUpdateOperationsInput | string | null
    claims?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProductsNestedInput
    validations?: ValidationUpdateManyWithoutProductNestedInput
    reports?: ReportUpdateManyWithoutProductNestedInput
    seals?: ProductSealUpdateManyWithoutProductNestedInput
    validationQueue?: ValidationQueueUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sku?: StringFieldUpdateOperationsInput | string
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nutritionalInfo?: NullableStringFieldUpdateOperationsInput | string | null
    claims?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    validations?: ValidationUncheckedUpdateManyWithoutProductNestedInput
    reports?: ReportUncheckedUpdateManyWithoutProductNestedInput
    seals?: ProductSealUncheckedUpdateManyWithoutProductNestedInput
    validationQueue?: ValidationQueueUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateManyInput = {
    id?: string
    name: string
    brand: string
    category: string
    description?: string | null
    sku: string
    batchNumber?: string | null
    nutritionalInfo?: string | null
    claims?: string | null
    imageUrl?: string | null
    qrCode?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type ProductUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sku?: StringFieldUpdateOperationsInput | string
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nutritionalInfo?: NullableStringFieldUpdateOperationsInput | string | null
    claims?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sku?: StringFieldUpdateOperationsInput | string
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nutritionalInfo?: NullableStringFieldUpdateOperationsInput | string | null
    claims?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ReportCreateInput = {
    id?: string
    fileName: string
    originalName: string
    filePath: string
    fileSize: number
    mimeType: string
    analysisType: string
    results: string
    isVerified?: boolean
    verificationHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutReportsInput
    laboratory: LaboratoryCreateNestedOneWithoutReportsInput
    validations?: ValidationCreateNestedManyWithoutReportInput
  }

  export type ReportUncheckedCreateInput = {
    id?: string
    fileName: string
    originalName: string
    filePath: string
    fileSize: number
    mimeType: string
    analysisType: string
    results: string
    isVerified?: boolean
    verificationHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    productId: string
    laboratoryId: string
    validations?: ValidationUncheckedCreateNestedManyWithoutReportInput
  }

  export type ReportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    analysisType?: StringFieldUpdateOperationsInput | string
    results?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutReportsNestedInput
    laboratory?: LaboratoryUpdateOneRequiredWithoutReportsNestedInput
    validations?: ValidationUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    analysisType?: StringFieldUpdateOperationsInput | string
    results?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: StringFieldUpdateOperationsInput | string
    laboratoryId?: StringFieldUpdateOperationsInput | string
    validations?: ValidationUncheckedUpdateManyWithoutReportNestedInput
  }

  export type ReportCreateManyInput = {
    id?: string
    fileName: string
    originalName: string
    filePath: string
    fileSize: number
    mimeType: string
    analysisType: string
    results: string
    isVerified?: boolean
    verificationHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    productId: string
    laboratoryId: string
  }

  export type ReportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    analysisType?: StringFieldUpdateOperationsInput | string
    results?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    analysisType?: StringFieldUpdateOperationsInput | string
    results?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: StringFieldUpdateOperationsInput | string
    laboratoryId?: StringFieldUpdateOperationsInput | string
  }

  export type ValidationCreateInput = {
    id?: string
    status?: string
    type?: string
    claimsValidated?: string | null
    summary?: string | null
    notes?: string | null
    validatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutValidationsInput
    report?: ReportCreateNestedOneWithoutValidationsInput
    user: UserCreateNestedOneWithoutValidationsInput
  }

  export type ValidationUncheckedCreateInput = {
    id?: string
    status?: string
    type?: string
    claimsValidated?: string | null
    summary?: string | null
    notes?: string | null
    validatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    productId: string
    reportId?: string | null
    userId: string
  }

  export type ValidationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    claimsValidated?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutValidationsNestedInput
    report?: ReportUpdateOneWithoutValidationsNestedInput
    user?: UserUpdateOneRequiredWithoutValidationsNestedInput
  }

  export type ValidationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    claimsValidated?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: StringFieldUpdateOperationsInput | string
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ValidationCreateManyInput = {
    id?: string
    status?: string
    type?: string
    claimsValidated?: string | null
    summary?: string | null
    notes?: string | null
    validatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    productId: string
    reportId?: string | null
    userId: string
  }

  export type ValidationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    claimsValidated?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValidationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    claimsValidated?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: StringFieldUpdateOperationsInput | string
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProductSealCreateInput = {
    id?: string
    sealId: string
    certificateNumber?: string | null
    issuedDate?: Date | string | null
    expiryDate?: Date | string | null
    validatingLaboratory?: string | null
    documentUrl?: string | null
    status?: string
    verifiedBy?: string | null
    verifiedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutSealsInput
  }

  export type ProductSealUncheckedCreateInput = {
    id?: string
    productId: string
    sealId: string
    certificateNumber?: string | null
    issuedDate?: Date | string | null
    expiryDate?: Date | string | null
    validatingLaboratory?: string | null
    documentUrl?: string | null
    status?: string
    verifiedBy?: string | null
    verifiedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductSealUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sealId?: StringFieldUpdateOperationsInput | string
    certificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    issuedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatingLaboratory?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutSealsNestedInput
  }

  export type ProductSealUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    sealId?: StringFieldUpdateOperationsInput | string
    certificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    issuedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatingLaboratory?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductSealCreateManyInput = {
    id?: string
    productId: string
    sealId: string
    certificateNumber?: string | null
    issuedDate?: Date | string | null
    expiryDate?: Date | string | null
    validatingLaboratory?: string | null
    documentUrl?: string | null
    status?: string
    verifiedBy?: string | null
    verifiedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductSealUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sealId?: StringFieldUpdateOperationsInput | string
    certificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    issuedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatingLaboratory?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductSealUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    sealId?: StringFieldUpdateOperationsInput | string
    certificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    issuedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatingLaboratory?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QRCodeAccessCreateInput = {
    id?: string
    qrCode: string
    ipAddress?: string | null
    userAgent?: string | null
    location?: string | null
    accessedAt?: Date | string
  }

  export type QRCodeAccessUncheckedCreateInput = {
    id?: string
    qrCode: string
    ipAddress?: string | null
    userAgent?: string | null
    location?: string | null
    accessedAt?: Date | string
  }

  export type QRCodeAccessUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    accessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QRCodeAccessUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    accessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QRCodeAccessCreateManyInput = {
    id?: string
    qrCode: string
    ipAddress?: string | null
    userAgent?: string | null
    location?: string | null
    accessedAt?: Date | string
  }

  export type QRCodeAccessUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    accessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type QRCodeAccessUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    qrCode?: StringFieldUpdateOperationsInput | string
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    location?: NullableStringFieldUpdateOperationsInput | string | null
    accessedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValidationQueueCreateInput = {
    id?: string
    status?: string
    priority?: string
    category: string
    estimatedDuration?: number | null
    actualDuration?: number | null
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    notes?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutValidationQueueInput
    requestedBy: UserCreateNestedOneWithoutQueueRequestedByInput
    assignedTo?: UserCreateNestedOneWithoutQueueAssignedToInput
    history?: ValidationQueueHistoryCreateNestedManyWithoutQueueInput
  }

  export type ValidationQueueUncheckedCreateInput = {
    id?: string
    productId: string
    requestedById: string
    assignedToId?: string | null
    status?: string
    priority?: string
    category: string
    estimatedDuration?: number | null
    actualDuration?: number | null
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    notes?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    history?: ValidationQueueHistoryUncheckedCreateNestedManyWithoutQueueInput
  }

  export type ValidationQueueUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutValidationQueueNestedInput
    requestedBy?: UserUpdateOneRequiredWithoutQueueRequestedByNestedInput
    assignedTo?: UserUpdateOneWithoutQueueAssignedToNestedInput
    history?: ValidationQueueHistoryUpdateManyWithoutQueueNestedInput
  }

  export type ValidationQueueUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    requestedById?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    history?: ValidationQueueHistoryUncheckedUpdateManyWithoutQueueNestedInput
  }

  export type ValidationQueueCreateManyInput = {
    id?: string
    productId: string
    requestedById: string
    assignedToId?: string | null
    status?: string
    priority?: string
    category: string
    estimatedDuration?: number | null
    actualDuration?: number | null
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    notes?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ValidationQueueUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValidationQueueUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    requestedById?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValidationQueueHistoryCreateInput = {
    id?: string
    action: string
    previousStatus?: string | null
    newStatus?: string | null
    reason?: string | null
    metadata?: string | null
    createdAt?: Date | string
    queue: ValidationQueueCreateNestedOneWithoutHistoryInput
    performedBy: UserCreateNestedOneWithoutQueueHistoryActionsInput
  }

  export type ValidationQueueHistoryUncheckedCreateInput = {
    id?: string
    queueId: string
    action: string
    previousStatus?: string | null
    newStatus?: string | null
    performedById: string
    reason?: string | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type ValidationQueueHistoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    previousStatus?: NullableStringFieldUpdateOperationsInput | string | null
    newStatus?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    queue?: ValidationQueueUpdateOneRequiredWithoutHistoryNestedInput
    performedBy?: UserUpdateOneRequiredWithoutQueueHistoryActionsNestedInput
  }

  export type ValidationQueueHistoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    queueId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    previousStatus?: NullableStringFieldUpdateOperationsInput | string | null
    newStatus?: NullableStringFieldUpdateOperationsInput | string | null
    performedById?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValidationQueueHistoryCreateManyInput = {
    id?: string
    queueId: string
    action: string
    previousStatus?: string | null
    newStatus?: string | null
    performedById: string
    reason?: string | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type ValidationQueueHistoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    previousStatus?: NullableStringFieldUpdateOperationsInput | string | null
    newStatus?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValidationQueueHistoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    queueId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    previousStatus?: NullableStringFieldUpdateOperationsInput | string | null
    newStatus?: NullableStringFieldUpdateOperationsInput | string | null
    performedById?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnalyticsEventCreateInput = {
    id?: string
    eventType: string
    entityType: string
    entityId: string
    sessionId?: string | null
    data?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
    user?: UserCreateNestedOneWithoutAnalyticsEventsInput
  }

  export type AnalyticsEventUncheckedCreateInput = {
    id?: string
    eventType: string
    entityType: string
    entityId: string
    userId?: string | null
    sessionId?: string | null
    data?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
  }

  export type AnalyticsEventUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneWithoutAnalyticsEventsNestedInput
  }

  export type AnalyticsEventUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnalyticsEventCreateManyInput = {
    id?: string
    eventType: string
    entityType: string
    entityId: string
    userId?: string | null
    sessionId?: string | null
    data?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
  }

  export type AnalyticsEventUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnalyticsEventUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ProductListRelationFilter = {
    every?: ProductWhereInput
    some?: ProductWhereInput
    none?: ProductWhereInput
  }

  export type ValidationListRelationFilter = {
    every?: ValidationWhereInput
    some?: ValidationWhereInput
    none?: ValidationWhereInput
  }

  export type ValidationQueueListRelationFilter = {
    every?: ValidationQueueWhereInput
    some?: ValidationQueueWhereInput
    none?: ValidationQueueWhereInput
  }

  export type ValidationQueueHistoryListRelationFilter = {
    every?: ValidationQueueHistoryWhereInput
    some?: ValidationQueueHistoryWhereInput
    none?: ValidationQueueHistoryWhereInput
  }

  export type AnalyticsEventListRelationFilter = {
    every?: AnalyticsEventWhereInput
    some?: AnalyticsEventWhereInput
    none?: AnalyticsEventWhereInput
  }

  export type ProductOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ValidationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ValidationQueueOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ValidationQueueHistoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type AnalyticsEventOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    password?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ReportListRelationFilter = {
    every?: ReportWhereInput
    some?: ReportWhereInput
    none?: ReportWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LaboratoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    accreditation?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LaboratoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    accreditation?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type LaboratoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    accreditation?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    address?: SortOrder
    isActive?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type ProductSealListRelationFilter = {
    every?: ProductSealWhereInput
    some?: ProductSealWhereInput
    none?: ProductSealWhereInput
  }

  export type ProductSealOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProductCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    category?: SortOrder
    description?: SortOrder
    sku?: SortOrder
    batchNumber?: SortOrder
    nutritionalInfo?: SortOrder
    claims?: SortOrder
    imageUrl?: SortOrder
    qrCode?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type ProductMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    category?: SortOrder
    description?: SortOrder
    sku?: SortOrder
    batchNumber?: SortOrder
    nutritionalInfo?: SortOrder
    claims?: SortOrder
    imageUrl?: SortOrder
    qrCode?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type ProductMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    brand?: SortOrder
    category?: SortOrder
    description?: SortOrder
    sku?: SortOrder
    batchNumber?: SortOrder
    nutritionalInfo?: SortOrder
    claims?: SortOrder
    imageUrl?: SortOrder
    qrCode?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type ProductRelationFilter = {
    is?: ProductWhereInput
    isNot?: ProductWhereInput
  }

  export type LaboratoryRelationFilter = {
    is?: LaboratoryWhereInput
    isNot?: LaboratoryWhereInput
  }

  export type ReportCountOrderByAggregateInput = {
    id?: SortOrder
    fileName?: SortOrder
    originalName?: SortOrder
    filePath?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    analysisType?: SortOrder
    results?: SortOrder
    isVerified?: SortOrder
    verificationHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    productId?: SortOrder
    laboratoryId?: SortOrder
  }

  export type ReportAvgOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type ReportMaxOrderByAggregateInput = {
    id?: SortOrder
    fileName?: SortOrder
    originalName?: SortOrder
    filePath?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    analysisType?: SortOrder
    results?: SortOrder
    isVerified?: SortOrder
    verificationHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    productId?: SortOrder
    laboratoryId?: SortOrder
  }

  export type ReportMinOrderByAggregateInput = {
    id?: SortOrder
    fileName?: SortOrder
    originalName?: SortOrder
    filePath?: SortOrder
    fileSize?: SortOrder
    mimeType?: SortOrder
    analysisType?: SortOrder
    results?: SortOrder
    isVerified?: SortOrder
    verificationHash?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    productId?: SortOrder
    laboratoryId?: SortOrder
  }

  export type ReportSumOrderByAggregateInput = {
    fileSize?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type ReportNullableRelationFilter = {
    is?: ReportWhereInput | null
    isNot?: ReportWhereInput | null
  }

  export type ValidationCountOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    type?: SortOrder
    claimsValidated?: SortOrder
    summary?: SortOrder
    notes?: SortOrder
    validatedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    productId?: SortOrder
    reportId?: SortOrder
    userId?: SortOrder
  }

  export type ValidationMaxOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    type?: SortOrder
    claimsValidated?: SortOrder
    summary?: SortOrder
    notes?: SortOrder
    validatedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    productId?: SortOrder
    reportId?: SortOrder
    userId?: SortOrder
  }

  export type ValidationMinOrderByAggregateInput = {
    id?: SortOrder
    status?: SortOrder
    type?: SortOrder
    claimsValidated?: SortOrder
    summary?: SortOrder
    notes?: SortOrder
    validatedAt?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    productId?: SortOrder
    reportId?: SortOrder
    userId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type ProductSealCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    sealId?: SortOrder
    certificateNumber?: SortOrder
    issuedDate?: SortOrder
    expiryDate?: SortOrder
    validatingLaboratory?: SortOrder
    documentUrl?: SortOrder
    status?: SortOrder
    verifiedBy?: SortOrder
    verifiedAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductSealMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    sealId?: SortOrder
    certificateNumber?: SortOrder
    issuedDate?: SortOrder
    expiryDate?: SortOrder
    validatingLaboratory?: SortOrder
    documentUrl?: SortOrder
    status?: SortOrder
    verifiedBy?: SortOrder
    verifiedAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ProductSealMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    sealId?: SortOrder
    certificateNumber?: SortOrder
    issuedDate?: SortOrder
    expiryDate?: SortOrder
    validatingLaboratory?: SortOrder
    documentUrl?: SortOrder
    status?: SortOrder
    verifiedBy?: SortOrder
    verifiedAt?: SortOrder
    notes?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type QRCodeAccessCountOrderByAggregateInput = {
    id?: SortOrder
    qrCode?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    location?: SortOrder
    accessedAt?: SortOrder
  }

  export type QRCodeAccessMaxOrderByAggregateInput = {
    id?: SortOrder
    qrCode?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    location?: SortOrder
    accessedAt?: SortOrder
  }

  export type QRCodeAccessMinOrderByAggregateInput = {
    id?: SortOrder
    qrCode?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    location?: SortOrder
    accessedAt?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type ValidationQueueCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    requestedById?: SortOrder
    assignedToId?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    category?: SortOrder
    estimatedDuration?: SortOrder
    actualDuration?: SortOrder
    assignedAt?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    dueDate?: SortOrder
    notes?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ValidationQueueAvgOrderByAggregateInput = {
    estimatedDuration?: SortOrder
    actualDuration?: SortOrder
  }

  export type ValidationQueueMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    requestedById?: SortOrder
    assignedToId?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    category?: SortOrder
    estimatedDuration?: SortOrder
    actualDuration?: SortOrder
    assignedAt?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    dueDate?: SortOrder
    notes?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ValidationQueueMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    requestedById?: SortOrder
    assignedToId?: SortOrder
    status?: SortOrder
    priority?: SortOrder
    category?: SortOrder
    estimatedDuration?: SortOrder
    actualDuration?: SortOrder
    assignedAt?: SortOrder
    startedAt?: SortOrder
    completedAt?: SortOrder
    dueDate?: SortOrder
    notes?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type ValidationQueueSumOrderByAggregateInput = {
    estimatedDuration?: SortOrder
    actualDuration?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type ValidationQueueRelationFilter = {
    is?: ValidationQueueWhereInput
    isNot?: ValidationQueueWhereInput
  }

  export type ValidationQueueHistoryCountOrderByAggregateInput = {
    id?: SortOrder
    queueId?: SortOrder
    action?: SortOrder
    previousStatus?: SortOrder
    newStatus?: SortOrder
    performedById?: SortOrder
    reason?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type ValidationQueueHistoryMaxOrderByAggregateInput = {
    id?: SortOrder
    queueId?: SortOrder
    action?: SortOrder
    previousStatus?: SortOrder
    newStatus?: SortOrder
    performedById?: SortOrder
    reason?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type ValidationQueueHistoryMinOrderByAggregateInput = {
    id?: SortOrder
    queueId?: SortOrder
    action?: SortOrder
    previousStatus?: SortOrder
    newStatus?: SortOrder
    performedById?: SortOrder
    reason?: SortOrder
    metadata?: SortOrder
    createdAt?: SortOrder
  }

  export type AnalyticsEventCountOrderByAggregateInput = {
    id?: SortOrder
    eventType?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    userId?: SortOrder
    sessionId?: SortOrder
    data?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    timestamp?: SortOrder
  }

  export type AnalyticsEventMaxOrderByAggregateInput = {
    id?: SortOrder
    eventType?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    userId?: SortOrder
    sessionId?: SortOrder
    data?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    timestamp?: SortOrder
  }

  export type AnalyticsEventMinOrderByAggregateInput = {
    id?: SortOrder
    eventType?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    userId?: SortOrder
    sessionId?: SortOrder
    data?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    timestamp?: SortOrder
  }

  export type ProductCreateNestedManyWithoutUserInput = {
    create?: XOR<ProductCreateWithoutUserInput, ProductUncheckedCreateWithoutUserInput> | ProductCreateWithoutUserInput[] | ProductUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutUserInput | ProductCreateOrConnectWithoutUserInput[]
    createMany?: ProductCreateManyUserInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ValidationCreateNestedManyWithoutUserInput = {
    create?: XOR<ValidationCreateWithoutUserInput, ValidationUncheckedCreateWithoutUserInput> | ValidationCreateWithoutUserInput[] | ValidationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ValidationCreateOrConnectWithoutUserInput | ValidationCreateOrConnectWithoutUserInput[]
    createMany?: ValidationCreateManyUserInputEnvelope
    connect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
  }

  export type ValidationQueueCreateNestedManyWithoutRequestedByInput = {
    create?: XOR<ValidationQueueCreateWithoutRequestedByInput, ValidationQueueUncheckedCreateWithoutRequestedByInput> | ValidationQueueCreateWithoutRequestedByInput[] | ValidationQueueUncheckedCreateWithoutRequestedByInput[]
    connectOrCreate?: ValidationQueueCreateOrConnectWithoutRequestedByInput | ValidationQueueCreateOrConnectWithoutRequestedByInput[]
    createMany?: ValidationQueueCreateManyRequestedByInputEnvelope
    connect?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
  }

  export type ValidationQueueCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<ValidationQueueCreateWithoutAssignedToInput, ValidationQueueUncheckedCreateWithoutAssignedToInput> | ValidationQueueCreateWithoutAssignedToInput[] | ValidationQueueUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: ValidationQueueCreateOrConnectWithoutAssignedToInput | ValidationQueueCreateOrConnectWithoutAssignedToInput[]
    createMany?: ValidationQueueCreateManyAssignedToInputEnvelope
    connect?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
  }

  export type ValidationQueueHistoryCreateNestedManyWithoutPerformedByInput = {
    create?: XOR<ValidationQueueHistoryCreateWithoutPerformedByInput, ValidationQueueHistoryUncheckedCreateWithoutPerformedByInput> | ValidationQueueHistoryCreateWithoutPerformedByInput[] | ValidationQueueHistoryUncheckedCreateWithoutPerformedByInput[]
    connectOrCreate?: ValidationQueueHistoryCreateOrConnectWithoutPerformedByInput | ValidationQueueHistoryCreateOrConnectWithoutPerformedByInput[]
    createMany?: ValidationQueueHistoryCreateManyPerformedByInputEnvelope
    connect?: ValidationQueueHistoryWhereUniqueInput | ValidationQueueHistoryWhereUniqueInput[]
  }

  export type AnalyticsEventCreateNestedManyWithoutUserInput = {
    create?: XOR<AnalyticsEventCreateWithoutUserInput, AnalyticsEventUncheckedCreateWithoutUserInput> | AnalyticsEventCreateWithoutUserInput[] | AnalyticsEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnalyticsEventCreateOrConnectWithoutUserInput | AnalyticsEventCreateOrConnectWithoutUserInput[]
    createMany?: AnalyticsEventCreateManyUserInputEnvelope
    connect?: AnalyticsEventWhereUniqueInput | AnalyticsEventWhereUniqueInput[]
  }

  export type ProductUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProductCreateWithoutUserInput, ProductUncheckedCreateWithoutUserInput> | ProductCreateWithoutUserInput[] | ProductUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutUserInput | ProductCreateOrConnectWithoutUserInput[]
    createMany?: ProductCreateManyUserInputEnvelope
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
  }

  export type ValidationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ValidationCreateWithoutUserInput, ValidationUncheckedCreateWithoutUserInput> | ValidationCreateWithoutUserInput[] | ValidationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ValidationCreateOrConnectWithoutUserInput | ValidationCreateOrConnectWithoutUserInput[]
    createMany?: ValidationCreateManyUserInputEnvelope
    connect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
  }

  export type ValidationQueueUncheckedCreateNestedManyWithoutRequestedByInput = {
    create?: XOR<ValidationQueueCreateWithoutRequestedByInput, ValidationQueueUncheckedCreateWithoutRequestedByInput> | ValidationQueueCreateWithoutRequestedByInput[] | ValidationQueueUncheckedCreateWithoutRequestedByInput[]
    connectOrCreate?: ValidationQueueCreateOrConnectWithoutRequestedByInput | ValidationQueueCreateOrConnectWithoutRequestedByInput[]
    createMany?: ValidationQueueCreateManyRequestedByInputEnvelope
    connect?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
  }

  export type ValidationQueueUncheckedCreateNestedManyWithoutAssignedToInput = {
    create?: XOR<ValidationQueueCreateWithoutAssignedToInput, ValidationQueueUncheckedCreateWithoutAssignedToInput> | ValidationQueueCreateWithoutAssignedToInput[] | ValidationQueueUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: ValidationQueueCreateOrConnectWithoutAssignedToInput | ValidationQueueCreateOrConnectWithoutAssignedToInput[]
    createMany?: ValidationQueueCreateManyAssignedToInputEnvelope
    connect?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
  }

  export type ValidationQueueHistoryUncheckedCreateNestedManyWithoutPerformedByInput = {
    create?: XOR<ValidationQueueHistoryCreateWithoutPerformedByInput, ValidationQueueHistoryUncheckedCreateWithoutPerformedByInput> | ValidationQueueHistoryCreateWithoutPerformedByInput[] | ValidationQueueHistoryUncheckedCreateWithoutPerformedByInput[]
    connectOrCreate?: ValidationQueueHistoryCreateOrConnectWithoutPerformedByInput | ValidationQueueHistoryCreateOrConnectWithoutPerformedByInput[]
    createMany?: ValidationQueueHistoryCreateManyPerformedByInputEnvelope
    connect?: ValidationQueueHistoryWhereUniqueInput | ValidationQueueHistoryWhereUniqueInput[]
  }

  export type AnalyticsEventUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AnalyticsEventCreateWithoutUserInput, AnalyticsEventUncheckedCreateWithoutUserInput> | AnalyticsEventCreateWithoutUserInput[] | AnalyticsEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnalyticsEventCreateOrConnectWithoutUserInput | AnalyticsEventCreateOrConnectWithoutUserInput[]
    createMany?: AnalyticsEventCreateManyUserInputEnvelope
    connect?: AnalyticsEventWhereUniqueInput | AnalyticsEventWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ProductUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProductCreateWithoutUserInput, ProductUncheckedCreateWithoutUserInput> | ProductCreateWithoutUserInput[] | ProductUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutUserInput | ProductCreateOrConnectWithoutUserInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutUserInput | ProductUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProductCreateManyUserInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutUserInput | ProductUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutUserInput | ProductUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ValidationUpdateManyWithoutUserNestedInput = {
    create?: XOR<ValidationCreateWithoutUserInput, ValidationUncheckedCreateWithoutUserInput> | ValidationCreateWithoutUserInput[] | ValidationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ValidationCreateOrConnectWithoutUserInput | ValidationCreateOrConnectWithoutUserInput[]
    upsert?: ValidationUpsertWithWhereUniqueWithoutUserInput | ValidationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ValidationCreateManyUserInputEnvelope
    set?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    disconnect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    delete?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    connect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    update?: ValidationUpdateWithWhereUniqueWithoutUserInput | ValidationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ValidationUpdateManyWithWhereWithoutUserInput | ValidationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ValidationScalarWhereInput | ValidationScalarWhereInput[]
  }

  export type ValidationQueueUpdateManyWithoutRequestedByNestedInput = {
    create?: XOR<ValidationQueueCreateWithoutRequestedByInput, ValidationQueueUncheckedCreateWithoutRequestedByInput> | ValidationQueueCreateWithoutRequestedByInput[] | ValidationQueueUncheckedCreateWithoutRequestedByInput[]
    connectOrCreate?: ValidationQueueCreateOrConnectWithoutRequestedByInput | ValidationQueueCreateOrConnectWithoutRequestedByInput[]
    upsert?: ValidationQueueUpsertWithWhereUniqueWithoutRequestedByInput | ValidationQueueUpsertWithWhereUniqueWithoutRequestedByInput[]
    createMany?: ValidationQueueCreateManyRequestedByInputEnvelope
    set?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
    disconnect?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
    delete?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
    connect?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
    update?: ValidationQueueUpdateWithWhereUniqueWithoutRequestedByInput | ValidationQueueUpdateWithWhereUniqueWithoutRequestedByInput[]
    updateMany?: ValidationQueueUpdateManyWithWhereWithoutRequestedByInput | ValidationQueueUpdateManyWithWhereWithoutRequestedByInput[]
    deleteMany?: ValidationQueueScalarWhereInput | ValidationQueueScalarWhereInput[]
  }

  export type ValidationQueueUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<ValidationQueueCreateWithoutAssignedToInput, ValidationQueueUncheckedCreateWithoutAssignedToInput> | ValidationQueueCreateWithoutAssignedToInput[] | ValidationQueueUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: ValidationQueueCreateOrConnectWithoutAssignedToInput | ValidationQueueCreateOrConnectWithoutAssignedToInput[]
    upsert?: ValidationQueueUpsertWithWhereUniqueWithoutAssignedToInput | ValidationQueueUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: ValidationQueueCreateManyAssignedToInputEnvelope
    set?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
    disconnect?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
    delete?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
    connect?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
    update?: ValidationQueueUpdateWithWhereUniqueWithoutAssignedToInput | ValidationQueueUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: ValidationQueueUpdateManyWithWhereWithoutAssignedToInput | ValidationQueueUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: ValidationQueueScalarWhereInput | ValidationQueueScalarWhereInput[]
  }

  export type ValidationQueueHistoryUpdateManyWithoutPerformedByNestedInput = {
    create?: XOR<ValidationQueueHistoryCreateWithoutPerformedByInput, ValidationQueueHistoryUncheckedCreateWithoutPerformedByInput> | ValidationQueueHistoryCreateWithoutPerformedByInput[] | ValidationQueueHistoryUncheckedCreateWithoutPerformedByInput[]
    connectOrCreate?: ValidationQueueHistoryCreateOrConnectWithoutPerformedByInput | ValidationQueueHistoryCreateOrConnectWithoutPerformedByInput[]
    upsert?: ValidationQueueHistoryUpsertWithWhereUniqueWithoutPerformedByInput | ValidationQueueHistoryUpsertWithWhereUniqueWithoutPerformedByInput[]
    createMany?: ValidationQueueHistoryCreateManyPerformedByInputEnvelope
    set?: ValidationQueueHistoryWhereUniqueInput | ValidationQueueHistoryWhereUniqueInput[]
    disconnect?: ValidationQueueHistoryWhereUniqueInput | ValidationQueueHistoryWhereUniqueInput[]
    delete?: ValidationQueueHistoryWhereUniqueInput | ValidationQueueHistoryWhereUniqueInput[]
    connect?: ValidationQueueHistoryWhereUniqueInput | ValidationQueueHistoryWhereUniqueInput[]
    update?: ValidationQueueHistoryUpdateWithWhereUniqueWithoutPerformedByInput | ValidationQueueHistoryUpdateWithWhereUniqueWithoutPerformedByInput[]
    updateMany?: ValidationQueueHistoryUpdateManyWithWhereWithoutPerformedByInput | ValidationQueueHistoryUpdateManyWithWhereWithoutPerformedByInput[]
    deleteMany?: ValidationQueueHistoryScalarWhereInput | ValidationQueueHistoryScalarWhereInput[]
  }

  export type AnalyticsEventUpdateManyWithoutUserNestedInput = {
    create?: XOR<AnalyticsEventCreateWithoutUserInput, AnalyticsEventUncheckedCreateWithoutUserInput> | AnalyticsEventCreateWithoutUserInput[] | AnalyticsEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnalyticsEventCreateOrConnectWithoutUserInput | AnalyticsEventCreateOrConnectWithoutUserInput[]
    upsert?: AnalyticsEventUpsertWithWhereUniqueWithoutUserInput | AnalyticsEventUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AnalyticsEventCreateManyUserInputEnvelope
    set?: AnalyticsEventWhereUniqueInput | AnalyticsEventWhereUniqueInput[]
    disconnect?: AnalyticsEventWhereUniqueInput | AnalyticsEventWhereUniqueInput[]
    delete?: AnalyticsEventWhereUniqueInput | AnalyticsEventWhereUniqueInput[]
    connect?: AnalyticsEventWhereUniqueInput | AnalyticsEventWhereUniqueInput[]
    update?: AnalyticsEventUpdateWithWhereUniqueWithoutUserInput | AnalyticsEventUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AnalyticsEventUpdateManyWithWhereWithoutUserInput | AnalyticsEventUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AnalyticsEventScalarWhereInput | AnalyticsEventScalarWhereInput[]
  }

  export type ProductUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProductCreateWithoutUserInput, ProductUncheckedCreateWithoutUserInput> | ProductCreateWithoutUserInput[] | ProductUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProductCreateOrConnectWithoutUserInput | ProductCreateOrConnectWithoutUserInput[]
    upsert?: ProductUpsertWithWhereUniqueWithoutUserInput | ProductUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProductCreateManyUserInputEnvelope
    set?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    disconnect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    delete?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    connect?: ProductWhereUniqueInput | ProductWhereUniqueInput[]
    update?: ProductUpdateWithWhereUniqueWithoutUserInput | ProductUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProductUpdateManyWithWhereWithoutUserInput | ProductUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProductScalarWhereInput | ProductScalarWhereInput[]
  }

  export type ValidationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ValidationCreateWithoutUserInput, ValidationUncheckedCreateWithoutUserInput> | ValidationCreateWithoutUserInput[] | ValidationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ValidationCreateOrConnectWithoutUserInput | ValidationCreateOrConnectWithoutUserInput[]
    upsert?: ValidationUpsertWithWhereUniqueWithoutUserInput | ValidationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ValidationCreateManyUserInputEnvelope
    set?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    disconnect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    delete?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    connect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    update?: ValidationUpdateWithWhereUniqueWithoutUserInput | ValidationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ValidationUpdateManyWithWhereWithoutUserInput | ValidationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ValidationScalarWhereInput | ValidationScalarWhereInput[]
  }

  export type ValidationQueueUncheckedUpdateManyWithoutRequestedByNestedInput = {
    create?: XOR<ValidationQueueCreateWithoutRequestedByInput, ValidationQueueUncheckedCreateWithoutRequestedByInput> | ValidationQueueCreateWithoutRequestedByInput[] | ValidationQueueUncheckedCreateWithoutRequestedByInput[]
    connectOrCreate?: ValidationQueueCreateOrConnectWithoutRequestedByInput | ValidationQueueCreateOrConnectWithoutRequestedByInput[]
    upsert?: ValidationQueueUpsertWithWhereUniqueWithoutRequestedByInput | ValidationQueueUpsertWithWhereUniqueWithoutRequestedByInput[]
    createMany?: ValidationQueueCreateManyRequestedByInputEnvelope
    set?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
    disconnect?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
    delete?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
    connect?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
    update?: ValidationQueueUpdateWithWhereUniqueWithoutRequestedByInput | ValidationQueueUpdateWithWhereUniqueWithoutRequestedByInput[]
    updateMany?: ValidationQueueUpdateManyWithWhereWithoutRequestedByInput | ValidationQueueUpdateManyWithWhereWithoutRequestedByInput[]
    deleteMany?: ValidationQueueScalarWhereInput | ValidationQueueScalarWhereInput[]
  }

  export type ValidationQueueUncheckedUpdateManyWithoutAssignedToNestedInput = {
    create?: XOR<ValidationQueueCreateWithoutAssignedToInput, ValidationQueueUncheckedCreateWithoutAssignedToInput> | ValidationQueueCreateWithoutAssignedToInput[] | ValidationQueueUncheckedCreateWithoutAssignedToInput[]
    connectOrCreate?: ValidationQueueCreateOrConnectWithoutAssignedToInput | ValidationQueueCreateOrConnectWithoutAssignedToInput[]
    upsert?: ValidationQueueUpsertWithWhereUniqueWithoutAssignedToInput | ValidationQueueUpsertWithWhereUniqueWithoutAssignedToInput[]
    createMany?: ValidationQueueCreateManyAssignedToInputEnvelope
    set?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
    disconnect?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
    delete?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
    connect?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
    update?: ValidationQueueUpdateWithWhereUniqueWithoutAssignedToInput | ValidationQueueUpdateWithWhereUniqueWithoutAssignedToInput[]
    updateMany?: ValidationQueueUpdateManyWithWhereWithoutAssignedToInput | ValidationQueueUpdateManyWithWhereWithoutAssignedToInput[]
    deleteMany?: ValidationQueueScalarWhereInput | ValidationQueueScalarWhereInput[]
  }

  export type ValidationQueueHistoryUncheckedUpdateManyWithoutPerformedByNestedInput = {
    create?: XOR<ValidationQueueHistoryCreateWithoutPerformedByInput, ValidationQueueHistoryUncheckedCreateWithoutPerformedByInput> | ValidationQueueHistoryCreateWithoutPerformedByInput[] | ValidationQueueHistoryUncheckedCreateWithoutPerformedByInput[]
    connectOrCreate?: ValidationQueueHistoryCreateOrConnectWithoutPerformedByInput | ValidationQueueHistoryCreateOrConnectWithoutPerformedByInput[]
    upsert?: ValidationQueueHistoryUpsertWithWhereUniqueWithoutPerformedByInput | ValidationQueueHistoryUpsertWithWhereUniqueWithoutPerformedByInput[]
    createMany?: ValidationQueueHistoryCreateManyPerformedByInputEnvelope
    set?: ValidationQueueHistoryWhereUniqueInput | ValidationQueueHistoryWhereUniqueInput[]
    disconnect?: ValidationQueueHistoryWhereUniqueInput | ValidationQueueHistoryWhereUniqueInput[]
    delete?: ValidationQueueHistoryWhereUniqueInput | ValidationQueueHistoryWhereUniqueInput[]
    connect?: ValidationQueueHistoryWhereUniqueInput | ValidationQueueHistoryWhereUniqueInput[]
    update?: ValidationQueueHistoryUpdateWithWhereUniqueWithoutPerformedByInput | ValidationQueueHistoryUpdateWithWhereUniqueWithoutPerformedByInput[]
    updateMany?: ValidationQueueHistoryUpdateManyWithWhereWithoutPerformedByInput | ValidationQueueHistoryUpdateManyWithWhereWithoutPerformedByInput[]
    deleteMany?: ValidationQueueHistoryScalarWhereInput | ValidationQueueHistoryScalarWhereInput[]
  }

  export type AnalyticsEventUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AnalyticsEventCreateWithoutUserInput, AnalyticsEventUncheckedCreateWithoutUserInput> | AnalyticsEventCreateWithoutUserInput[] | AnalyticsEventUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AnalyticsEventCreateOrConnectWithoutUserInput | AnalyticsEventCreateOrConnectWithoutUserInput[]
    upsert?: AnalyticsEventUpsertWithWhereUniqueWithoutUserInput | AnalyticsEventUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AnalyticsEventCreateManyUserInputEnvelope
    set?: AnalyticsEventWhereUniqueInput | AnalyticsEventWhereUniqueInput[]
    disconnect?: AnalyticsEventWhereUniqueInput | AnalyticsEventWhereUniqueInput[]
    delete?: AnalyticsEventWhereUniqueInput | AnalyticsEventWhereUniqueInput[]
    connect?: AnalyticsEventWhereUniqueInput | AnalyticsEventWhereUniqueInput[]
    update?: AnalyticsEventUpdateWithWhereUniqueWithoutUserInput | AnalyticsEventUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AnalyticsEventUpdateManyWithWhereWithoutUserInput | AnalyticsEventUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AnalyticsEventScalarWhereInput | AnalyticsEventScalarWhereInput[]
  }

  export type ReportCreateNestedManyWithoutLaboratoryInput = {
    create?: XOR<ReportCreateWithoutLaboratoryInput, ReportUncheckedCreateWithoutLaboratoryInput> | ReportCreateWithoutLaboratoryInput[] | ReportUncheckedCreateWithoutLaboratoryInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutLaboratoryInput | ReportCreateOrConnectWithoutLaboratoryInput[]
    createMany?: ReportCreateManyLaboratoryInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutLaboratoryInput = {
    create?: XOR<ReportCreateWithoutLaboratoryInput, ReportUncheckedCreateWithoutLaboratoryInput> | ReportCreateWithoutLaboratoryInput[] | ReportUncheckedCreateWithoutLaboratoryInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutLaboratoryInput | ReportCreateOrConnectWithoutLaboratoryInput[]
    createMany?: ReportCreateManyLaboratoryInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type ReportUpdateManyWithoutLaboratoryNestedInput = {
    create?: XOR<ReportCreateWithoutLaboratoryInput, ReportUncheckedCreateWithoutLaboratoryInput> | ReportCreateWithoutLaboratoryInput[] | ReportUncheckedCreateWithoutLaboratoryInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutLaboratoryInput | ReportCreateOrConnectWithoutLaboratoryInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutLaboratoryInput | ReportUpsertWithWhereUniqueWithoutLaboratoryInput[]
    createMany?: ReportCreateManyLaboratoryInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutLaboratoryInput | ReportUpdateWithWhereUniqueWithoutLaboratoryInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutLaboratoryInput | ReportUpdateManyWithWhereWithoutLaboratoryInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutLaboratoryNestedInput = {
    create?: XOR<ReportCreateWithoutLaboratoryInput, ReportUncheckedCreateWithoutLaboratoryInput> | ReportCreateWithoutLaboratoryInput[] | ReportUncheckedCreateWithoutLaboratoryInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutLaboratoryInput | ReportCreateOrConnectWithoutLaboratoryInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutLaboratoryInput | ReportUpsertWithWhereUniqueWithoutLaboratoryInput[]
    createMany?: ReportCreateManyLaboratoryInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutLaboratoryInput | ReportUpdateWithWhereUniqueWithoutLaboratoryInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutLaboratoryInput | ReportUpdateManyWithWhereWithoutLaboratoryInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutProductsInput = {
    create?: XOR<UserCreateWithoutProductsInput, UserUncheckedCreateWithoutProductsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProductsInput
    connect?: UserWhereUniqueInput
  }

  export type ValidationCreateNestedManyWithoutProductInput = {
    create?: XOR<ValidationCreateWithoutProductInput, ValidationUncheckedCreateWithoutProductInput> | ValidationCreateWithoutProductInput[] | ValidationUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ValidationCreateOrConnectWithoutProductInput | ValidationCreateOrConnectWithoutProductInput[]
    createMany?: ValidationCreateManyProductInputEnvelope
    connect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
  }

  export type ReportCreateNestedManyWithoutProductInput = {
    create?: XOR<ReportCreateWithoutProductInput, ReportUncheckedCreateWithoutProductInput> | ReportCreateWithoutProductInput[] | ReportUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutProductInput | ReportCreateOrConnectWithoutProductInput[]
    createMany?: ReportCreateManyProductInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type ProductSealCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductSealCreateWithoutProductInput, ProductSealUncheckedCreateWithoutProductInput> | ProductSealCreateWithoutProductInput[] | ProductSealUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductSealCreateOrConnectWithoutProductInput | ProductSealCreateOrConnectWithoutProductInput[]
    createMany?: ProductSealCreateManyProductInputEnvelope
    connect?: ProductSealWhereUniqueInput | ProductSealWhereUniqueInput[]
  }

  export type ValidationQueueCreateNestedManyWithoutProductInput = {
    create?: XOR<ValidationQueueCreateWithoutProductInput, ValidationQueueUncheckedCreateWithoutProductInput> | ValidationQueueCreateWithoutProductInput[] | ValidationQueueUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ValidationQueueCreateOrConnectWithoutProductInput | ValidationQueueCreateOrConnectWithoutProductInput[]
    createMany?: ValidationQueueCreateManyProductInputEnvelope
    connect?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
  }

  export type ValidationUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ValidationCreateWithoutProductInput, ValidationUncheckedCreateWithoutProductInput> | ValidationCreateWithoutProductInput[] | ValidationUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ValidationCreateOrConnectWithoutProductInput | ValidationCreateOrConnectWithoutProductInput[]
    createMany?: ValidationCreateManyProductInputEnvelope
    connect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ReportCreateWithoutProductInput, ReportUncheckedCreateWithoutProductInput> | ReportCreateWithoutProductInput[] | ReportUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutProductInput | ReportCreateOrConnectWithoutProductInput[]
    createMany?: ReportCreateManyProductInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type ProductSealUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ProductSealCreateWithoutProductInput, ProductSealUncheckedCreateWithoutProductInput> | ProductSealCreateWithoutProductInput[] | ProductSealUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductSealCreateOrConnectWithoutProductInput | ProductSealCreateOrConnectWithoutProductInput[]
    createMany?: ProductSealCreateManyProductInputEnvelope
    connect?: ProductSealWhereUniqueInput | ProductSealWhereUniqueInput[]
  }

  export type ValidationQueueUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<ValidationQueueCreateWithoutProductInput, ValidationQueueUncheckedCreateWithoutProductInput> | ValidationQueueCreateWithoutProductInput[] | ValidationQueueUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ValidationQueueCreateOrConnectWithoutProductInput | ValidationQueueCreateOrConnectWithoutProductInput[]
    createMany?: ValidationQueueCreateManyProductInputEnvelope
    connect?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<UserCreateWithoutProductsInput, UserUncheckedCreateWithoutProductsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProductsInput
    upsert?: UserUpsertWithoutProductsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProductsInput, UserUpdateWithoutProductsInput>, UserUncheckedUpdateWithoutProductsInput>
  }

  export type ValidationUpdateManyWithoutProductNestedInput = {
    create?: XOR<ValidationCreateWithoutProductInput, ValidationUncheckedCreateWithoutProductInput> | ValidationCreateWithoutProductInput[] | ValidationUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ValidationCreateOrConnectWithoutProductInput | ValidationCreateOrConnectWithoutProductInput[]
    upsert?: ValidationUpsertWithWhereUniqueWithoutProductInput | ValidationUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ValidationCreateManyProductInputEnvelope
    set?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    disconnect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    delete?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    connect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    update?: ValidationUpdateWithWhereUniqueWithoutProductInput | ValidationUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ValidationUpdateManyWithWhereWithoutProductInput | ValidationUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ValidationScalarWhereInput | ValidationScalarWhereInput[]
  }

  export type ReportUpdateManyWithoutProductNestedInput = {
    create?: XOR<ReportCreateWithoutProductInput, ReportUncheckedCreateWithoutProductInput> | ReportCreateWithoutProductInput[] | ReportUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutProductInput | ReportCreateOrConnectWithoutProductInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutProductInput | ReportUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ReportCreateManyProductInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutProductInput | ReportUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutProductInput | ReportUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type ProductSealUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductSealCreateWithoutProductInput, ProductSealUncheckedCreateWithoutProductInput> | ProductSealCreateWithoutProductInput[] | ProductSealUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductSealCreateOrConnectWithoutProductInput | ProductSealCreateOrConnectWithoutProductInput[]
    upsert?: ProductSealUpsertWithWhereUniqueWithoutProductInput | ProductSealUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductSealCreateManyProductInputEnvelope
    set?: ProductSealWhereUniqueInput | ProductSealWhereUniqueInput[]
    disconnect?: ProductSealWhereUniqueInput | ProductSealWhereUniqueInput[]
    delete?: ProductSealWhereUniqueInput | ProductSealWhereUniqueInput[]
    connect?: ProductSealWhereUniqueInput | ProductSealWhereUniqueInput[]
    update?: ProductSealUpdateWithWhereUniqueWithoutProductInput | ProductSealUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductSealUpdateManyWithWhereWithoutProductInput | ProductSealUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductSealScalarWhereInput | ProductSealScalarWhereInput[]
  }

  export type ValidationQueueUpdateManyWithoutProductNestedInput = {
    create?: XOR<ValidationQueueCreateWithoutProductInput, ValidationQueueUncheckedCreateWithoutProductInput> | ValidationQueueCreateWithoutProductInput[] | ValidationQueueUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ValidationQueueCreateOrConnectWithoutProductInput | ValidationQueueCreateOrConnectWithoutProductInput[]
    upsert?: ValidationQueueUpsertWithWhereUniqueWithoutProductInput | ValidationQueueUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ValidationQueueCreateManyProductInputEnvelope
    set?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
    disconnect?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
    delete?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
    connect?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
    update?: ValidationQueueUpdateWithWhereUniqueWithoutProductInput | ValidationQueueUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ValidationQueueUpdateManyWithWhereWithoutProductInput | ValidationQueueUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ValidationQueueScalarWhereInput | ValidationQueueScalarWhereInput[]
  }

  export type ValidationUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ValidationCreateWithoutProductInput, ValidationUncheckedCreateWithoutProductInput> | ValidationCreateWithoutProductInput[] | ValidationUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ValidationCreateOrConnectWithoutProductInput | ValidationCreateOrConnectWithoutProductInput[]
    upsert?: ValidationUpsertWithWhereUniqueWithoutProductInput | ValidationUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ValidationCreateManyProductInputEnvelope
    set?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    disconnect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    delete?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    connect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    update?: ValidationUpdateWithWhereUniqueWithoutProductInput | ValidationUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ValidationUpdateManyWithWhereWithoutProductInput | ValidationUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ValidationScalarWhereInput | ValidationScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ReportCreateWithoutProductInput, ReportUncheckedCreateWithoutProductInput> | ReportCreateWithoutProductInput[] | ReportUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutProductInput | ReportCreateOrConnectWithoutProductInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutProductInput | ReportUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ReportCreateManyProductInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutProductInput | ReportUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutProductInput | ReportUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type ProductSealUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ProductSealCreateWithoutProductInput, ProductSealUncheckedCreateWithoutProductInput> | ProductSealCreateWithoutProductInput[] | ProductSealUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ProductSealCreateOrConnectWithoutProductInput | ProductSealCreateOrConnectWithoutProductInput[]
    upsert?: ProductSealUpsertWithWhereUniqueWithoutProductInput | ProductSealUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ProductSealCreateManyProductInputEnvelope
    set?: ProductSealWhereUniqueInput | ProductSealWhereUniqueInput[]
    disconnect?: ProductSealWhereUniqueInput | ProductSealWhereUniqueInput[]
    delete?: ProductSealWhereUniqueInput | ProductSealWhereUniqueInput[]
    connect?: ProductSealWhereUniqueInput | ProductSealWhereUniqueInput[]
    update?: ProductSealUpdateWithWhereUniqueWithoutProductInput | ProductSealUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ProductSealUpdateManyWithWhereWithoutProductInput | ProductSealUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ProductSealScalarWhereInput | ProductSealScalarWhereInput[]
  }

  export type ValidationQueueUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<ValidationQueueCreateWithoutProductInput, ValidationQueueUncheckedCreateWithoutProductInput> | ValidationQueueCreateWithoutProductInput[] | ValidationQueueUncheckedCreateWithoutProductInput[]
    connectOrCreate?: ValidationQueueCreateOrConnectWithoutProductInput | ValidationQueueCreateOrConnectWithoutProductInput[]
    upsert?: ValidationQueueUpsertWithWhereUniqueWithoutProductInput | ValidationQueueUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: ValidationQueueCreateManyProductInputEnvelope
    set?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
    disconnect?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
    delete?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
    connect?: ValidationQueueWhereUniqueInput | ValidationQueueWhereUniqueInput[]
    update?: ValidationQueueUpdateWithWhereUniqueWithoutProductInput | ValidationQueueUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: ValidationQueueUpdateManyWithWhereWithoutProductInput | ValidationQueueUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: ValidationQueueScalarWhereInput | ValidationQueueScalarWhereInput[]
  }

  export type ProductCreateNestedOneWithoutReportsInput = {
    create?: XOR<ProductCreateWithoutReportsInput, ProductUncheckedCreateWithoutReportsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutReportsInput
    connect?: ProductWhereUniqueInput
  }

  export type LaboratoryCreateNestedOneWithoutReportsInput = {
    create?: XOR<LaboratoryCreateWithoutReportsInput, LaboratoryUncheckedCreateWithoutReportsInput>
    connectOrCreate?: LaboratoryCreateOrConnectWithoutReportsInput
    connect?: LaboratoryWhereUniqueInput
  }

  export type ValidationCreateNestedManyWithoutReportInput = {
    create?: XOR<ValidationCreateWithoutReportInput, ValidationUncheckedCreateWithoutReportInput> | ValidationCreateWithoutReportInput[] | ValidationUncheckedCreateWithoutReportInput[]
    connectOrCreate?: ValidationCreateOrConnectWithoutReportInput | ValidationCreateOrConnectWithoutReportInput[]
    createMany?: ValidationCreateManyReportInputEnvelope
    connect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
  }

  export type ValidationUncheckedCreateNestedManyWithoutReportInput = {
    create?: XOR<ValidationCreateWithoutReportInput, ValidationUncheckedCreateWithoutReportInput> | ValidationCreateWithoutReportInput[] | ValidationUncheckedCreateWithoutReportInput[]
    connectOrCreate?: ValidationCreateOrConnectWithoutReportInput | ValidationCreateOrConnectWithoutReportInput[]
    createMany?: ValidationCreateManyReportInputEnvelope
    connect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProductUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<ProductCreateWithoutReportsInput, ProductUncheckedCreateWithoutReportsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutReportsInput
    upsert?: ProductUpsertWithoutReportsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutReportsInput, ProductUpdateWithoutReportsInput>, ProductUncheckedUpdateWithoutReportsInput>
  }

  export type LaboratoryUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<LaboratoryCreateWithoutReportsInput, LaboratoryUncheckedCreateWithoutReportsInput>
    connectOrCreate?: LaboratoryCreateOrConnectWithoutReportsInput
    upsert?: LaboratoryUpsertWithoutReportsInput
    connect?: LaboratoryWhereUniqueInput
    update?: XOR<XOR<LaboratoryUpdateToOneWithWhereWithoutReportsInput, LaboratoryUpdateWithoutReportsInput>, LaboratoryUncheckedUpdateWithoutReportsInput>
  }

  export type ValidationUpdateManyWithoutReportNestedInput = {
    create?: XOR<ValidationCreateWithoutReportInput, ValidationUncheckedCreateWithoutReportInput> | ValidationCreateWithoutReportInput[] | ValidationUncheckedCreateWithoutReportInput[]
    connectOrCreate?: ValidationCreateOrConnectWithoutReportInput | ValidationCreateOrConnectWithoutReportInput[]
    upsert?: ValidationUpsertWithWhereUniqueWithoutReportInput | ValidationUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: ValidationCreateManyReportInputEnvelope
    set?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    disconnect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    delete?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    connect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    update?: ValidationUpdateWithWhereUniqueWithoutReportInput | ValidationUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: ValidationUpdateManyWithWhereWithoutReportInput | ValidationUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: ValidationScalarWhereInput | ValidationScalarWhereInput[]
  }

  export type ValidationUncheckedUpdateManyWithoutReportNestedInput = {
    create?: XOR<ValidationCreateWithoutReportInput, ValidationUncheckedCreateWithoutReportInput> | ValidationCreateWithoutReportInput[] | ValidationUncheckedCreateWithoutReportInput[]
    connectOrCreate?: ValidationCreateOrConnectWithoutReportInput | ValidationCreateOrConnectWithoutReportInput[]
    upsert?: ValidationUpsertWithWhereUniqueWithoutReportInput | ValidationUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: ValidationCreateManyReportInputEnvelope
    set?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    disconnect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    delete?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    connect?: ValidationWhereUniqueInput | ValidationWhereUniqueInput[]
    update?: ValidationUpdateWithWhereUniqueWithoutReportInput | ValidationUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: ValidationUpdateManyWithWhereWithoutReportInput | ValidationUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: ValidationScalarWhereInput | ValidationScalarWhereInput[]
  }

  export type ProductCreateNestedOneWithoutValidationsInput = {
    create?: XOR<ProductCreateWithoutValidationsInput, ProductUncheckedCreateWithoutValidationsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutValidationsInput
    connect?: ProductWhereUniqueInput
  }

  export type ReportCreateNestedOneWithoutValidationsInput = {
    create?: XOR<ReportCreateWithoutValidationsInput, ReportUncheckedCreateWithoutValidationsInput>
    connectOrCreate?: ReportCreateOrConnectWithoutValidationsInput
    connect?: ReportWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutValidationsInput = {
    create?: XOR<UserCreateWithoutValidationsInput, UserUncheckedCreateWithoutValidationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutValidationsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type ProductUpdateOneRequiredWithoutValidationsNestedInput = {
    create?: XOR<ProductCreateWithoutValidationsInput, ProductUncheckedCreateWithoutValidationsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutValidationsInput
    upsert?: ProductUpsertWithoutValidationsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutValidationsInput, ProductUpdateWithoutValidationsInput>, ProductUncheckedUpdateWithoutValidationsInput>
  }

  export type ReportUpdateOneWithoutValidationsNestedInput = {
    create?: XOR<ReportCreateWithoutValidationsInput, ReportUncheckedCreateWithoutValidationsInput>
    connectOrCreate?: ReportCreateOrConnectWithoutValidationsInput
    upsert?: ReportUpsertWithoutValidationsInput
    disconnect?: ReportWhereInput | boolean
    delete?: ReportWhereInput | boolean
    connect?: ReportWhereUniqueInput
    update?: XOR<XOR<ReportUpdateToOneWithWhereWithoutValidationsInput, ReportUpdateWithoutValidationsInput>, ReportUncheckedUpdateWithoutValidationsInput>
  }

  export type UserUpdateOneRequiredWithoutValidationsNestedInput = {
    create?: XOR<UserCreateWithoutValidationsInput, UserUncheckedCreateWithoutValidationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutValidationsInput
    upsert?: UserUpsertWithoutValidationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutValidationsInput, UserUpdateWithoutValidationsInput>, UserUncheckedUpdateWithoutValidationsInput>
  }

  export type ProductCreateNestedOneWithoutSealsInput = {
    create?: XOR<ProductCreateWithoutSealsInput, ProductUncheckedCreateWithoutSealsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutSealsInput
    connect?: ProductWhereUniqueInput
  }

  export type ProductUpdateOneRequiredWithoutSealsNestedInput = {
    create?: XOR<ProductCreateWithoutSealsInput, ProductUncheckedCreateWithoutSealsInput>
    connectOrCreate?: ProductCreateOrConnectWithoutSealsInput
    upsert?: ProductUpsertWithoutSealsInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutSealsInput, ProductUpdateWithoutSealsInput>, ProductUncheckedUpdateWithoutSealsInput>
  }

  export type ProductCreateNestedOneWithoutValidationQueueInput = {
    create?: XOR<ProductCreateWithoutValidationQueueInput, ProductUncheckedCreateWithoutValidationQueueInput>
    connectOrCreate?: ProductCreateOrConnectWithoutValidationQueueInput
    connect?: ProductWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutQueueRequestedByInput = {
    create?: XOR<UserCreateWithoutQueueRequestedByInput, UserUncheckedCreateWithoutQueueRequestedByInput>
    connectOrCreate?: UserCreateOrConnectWithoutQueueRequestedByInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutQueueAssignedToInput = {
    create?: XOR<UserCreateWithoutQueueAssignedToInput, UserUncheckedCreateWithoutQueueAssignedToInput>
    connectOrCreate?: UserCreateOrConnectWithoutQueueAssignedToInput
    connect?: UserWhereUniqueInput
  }

  export type ValidationQueueHistoryCreateNestedManyWithoutQueueInput = {
    create?: XOR<ValidationQueueHistoryCreateWithoutQueueInput, ValidationQueueHistoryUncheckedCreateWithoutQueueInput> | ValidationQueueHistoryCreateWithoutQueueInput[] | ValidationQueueHistoryUncheckedCreateWithoutQueueInput[]
    connectOrCreate?: ValidationQueueHistoryCreateOrConnectWithoutQueueInput | ValidationQueueHistoryCreateOrConnectWithoutQueueInput[]
    createMany?: ValidationQueueHistoryCreateManyQueueInputEnvelope
    connect?: ValidationQueueHistoryWhereUniqueInput | ValidationQueueHistoryWhereUniqueInput[]
  }

  export type ValidationQueueHistoryUncheckedCreateNestedManyWithoutQueueInput = {
    create?: XOR<ValidationQueueHistoryCreateWithoutQueueInput, ValidationQueueHistoryUncheckedCreateWithoutQueueInput> | ValidationQueueHistoryCreateWithoutQueueInput[] | ValidationQueueHistoryUncheckedCreateWithoutQueueInput[]
    connectOrCreate?: ValidationQueueHistoryCreateOrConnectWithoutQueueInput | ValidationQueueHistoryCreateOrConnectWithoutQueueInput[]
    createMany?: ValidationQueueHistoryCreateManyQueueInputEnvelope
    connect?: ValidationQueueHistoryWhereUniqueInput | ValidationQueueHistoryWhereUniqueInput[]
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ProductUpdateOneRequiredWithoutValidationQueueNestedInput = {
    create?: XOR<ProductCreateWithoutValidationQueueInput, ProductUncheckedCreateWithoutValidationQueueInput>
    connectOrCreate?: ProductCreateOrConnectWithoutValidationQueueInput
    upsert?: ProductUpsertWithoutValidationQueueInput
    connect?: ProductWhereUniqueInput
    update?: XOR<XOR<ProductUpdateToOneWithWhereWithoutValidationQueueInput, ProductUpdateWithoutValidationQueueInput>, ProductUncheckedUpdateWithoutValidationQueueInput>
  }

  export type UserUpdateOneRequiredWithoutQueueRequestedByNestedInput = {
    create?: XOR<UserCreateWithoutQueueRequestedByInput, UserUncheckedCreateWithoutQueueRequestedByInput>
    connectOrCreate?: UserCreateOrConnectWithoutQueueRequestedByInput
    upsert?: UserUpsertWithoutQueueRequestedByInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutQueueRequestedByInput, UserUpdateWithoutQueueRequestedByInput>, UserUncheckedUpdateWithoutQueueRequestedByInput>
  }

  export type UserUpdateOneWithoutQueueAssignedToNestedInput = {
    create?: XOR<UserCreateWithoutQueueAssignedToInput, UserUncheckedCreateWithoutQueueAssignedToInput>
    connectOrCreate?: UserCreateOrConnectWithoutQueueAssignedToInput
    upsert?: UserUpsertWithoutQueueAssignedToInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutQueueAssignedToInput, UserUpdateWithoutQueueAssignedToInput>, UserUncheckedUpdateWithoutQueueAssignedToInput>
  }

  export type ValidationQueueHistoryUpdateManyWithoutQueueNestedInput = {
    create?: XOR<ValidationQueueHistoryCreateWithoutQueueInput, ValidationQueueHistoryUncheckedCreateWithoutQueueInput> | ValidationQueueHistoryCreateWithoutQueueInput[] | ValidationQueueHistoryUncheckedCreateWithoutQueueInput[]
    connectOrCreate?: ValidationQueueHistoryCreateOrConnectWithoutQueueInput | ValidationQueueHistoryCreateOrConnectWithoutQueueInput[]
    upsert?: ValidationQueueHistoryUpsertWithWhereUniqueWithoutQueueInput | ValidationQueueHistoryUpsertWithWhereUniqueWithoutQueueInput[]
    createMany?: ValidationQueueHistoryCreateManyQueueInputEnvelope
    set?: ValidationQueueHistoryWhereUniqueInput | ValidationQueueHistoryWhereUniqueInput[]
    disconnect?: ValidationQueueHistoryWhereUniqueInput | ValidationQueueHistoryWhereUniqueInput[]
    delete?: ValidationQueueHistoryWhereUniqueInput | ValidationQueueHistoryWhereUniqueInput[]
    connect?: ValidationQueueHistoryWhereUniqueInput | ValidationQueueHistoryWhereUniqueInput[]
    update?: ValidationQueueHistoryUpdateWithWhereUniqueWithoutQueueInput | ValidationQueueHistoryUpdateWithWhereUniqueWithoutQueueInput[]
    updateMany?: ValidationQueueHistoryUpdateManyWithWhereWithoutQueueInput | ValidationQueueHistoryUpdateManyWithWhereWithoutQueueInput[]
    deleteMany?: ValidationQueueHistoryScalarWhereInput | ValidationQueueHistoryScalarWhereInput[]
  }

  export type ValidationQueueHistoryUncheckedUpdateManyWithoutQueueNestedInput = {
    create?: XOR<ValidationQueueHistoryCreateWithoutQueueInput, ValidationQueueHistoryUncheckedCreateWithoutQueueInput> | ValidationQueueHistoryCreateWithoutQueueInput[] | ValidationQueueHistoryUncheckedCreateWithoutQueueInput[]
    connectOrCreate?: ValidationQueueHistoryCreateOrConnectWithoutQueueInput | ValidationQueueHistoryCreateOrConnectWithoutQueueInput[]
    upsert?: ValidationQueueHistoryUpsertWithWhereUniqueWithoutQueueInput | ValidationQueueHistoryUpsertWithWhereUniqueWithoutQueueInput[]
    createMany?: ValidationQueueHistoryCreateManyQueueInputEnvelope
    set?: ValidationQueueHistoryWhereUniqueInput | ValidationQueueHistoryWhereUniqueInput[]
    disconnect?: ValidationQueueHistoryWhereUniqueInput | ValidationQueueHistoryWhereUniqueInput[]
    delete?: ValidationQueueHistoryWhereUniqueInput | ValidationQueueHistoryWhereUniqueInput[]
    connect?: ValidationQueueHistoryWhereUniqueInput | ValidationQueueHistoryWhereUniqueInput[]
    update?: ValidationQueueHistoryUpdateWithWhereUniqueWithoutQueueInput | ValidationQueueHistoryUpdateWithWhereUniqueWithoutQueueInput[]
    updateMany?: ValidationQueueHistoryUpdateManyWithWhereWithoutQueueInput | ValidationQueueHistoryUpdateManyWithWhereWithoutQueueInput[]
    deleteMany?: ValidationQueueHistoryScalarWhereInput | ValidationQueueHistoryScalarWhereInput[]
  }

  export type ValidationQueueCreateNestedOneWithoutHistoryInput = {
    create?: XOR<ValidationQueueCreateWithoutHistoryInput, ValidationQueueUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: ValidationQueueCreateOrConnectWithoutHistoryInput
    connect?: ValidationQueueWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutQueueHistoryActionsInput = {
    create?: XOR<UserCreateWithoutQueueHistoryActionsInput, UserUncheckedCreateWithoutQueueHistoryActionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutQueueHistoryActionsInput
    connect?: UserWhereUniqueInput
  }

  export type ValidationQueueUpdateOneRequiredWithoutHistoryNestedInput = {
    create?: XOR<ValidationQueueCreateWithoutHistoryInput, ValidationQueueUncheckedCreateWithoutHistoryInput>
    connectOrCreate?: ValidationQueueCreateOrConnectWithoutHistoryInput
    upsert?: ValidationQueueUpsertWithoutHistoryInput
    connect?: ValidationQueueWhereUniqueInput
    update?: XOR<XOR<ValidationQueueUpdateToOneWithWhereWithoutHistoryInput, ValidationQueueUpdateWithoutHistoryInput>, ValidationQueueUncheckedUpdateWithoutHistoryInput>
  }

  export type UserUpdateOneRequiredWithoutQueueHistoryActionsNestedInput = {
    create?: XOR<UserCreateWithoutQueueHistoryActionsInput, UserUncheckedCreateWithoutQueueHistoryActionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutQueueHistoryActionsInput
    upsert?: UserUpsertWithoutQueueHistoryActionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutQueueHistoryActionsInput, UserUpdateWithoutQueueHistoryActionsInput>, UserUncheckedUpdateWithoutQueueHistoryActionsInput>
  }

  export type UserCreateNestedOneWithoutAnalyticsEventsInput = {
    create?: XOR<UserCreateWithoutAnalyticsEventsInput, UserUncheckedCreateWithoutAnalyticsEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnalyticsEventsInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutAnalyticsEventsNestedInput = {
    create?: XOR<UserCreateWithoutAnalyticsEventsInput, UserUncheckedCreateWithoutAnalyticsEventsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAnalyticsEventsInput
    upsert?: UserUpsertWithoutAnalyticsEventsInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAnalyticsEventsInput, UserUpdateWithoutAnalyticsEventsInput>, UserUncheckedUpdateWithoutAnalyticsEventsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type ProductCreateWithoutUserInput = {
    id?: string
    name: string
    brand: string
    category: string
    description?: string | null
    sku: string
    batchNumber?: string | null
    nutritionalInfo?: string | null
    claims?: string | null
    imageUrl?: string | null
    qrCode?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    validations?: ValidationCreateNestedManyWithoutProductInput
    reports?: ReportCreateNestedManyWithoutProductInput
    seals?: ProductSealCreateNestedManyWithoutProductInput
    validationQueue?: ValidationQueueCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    brand: string
    category: string
    description?: string | null
    sku: string
    batchNumber?: string | null
    nutritionalInfo?: string | null
    claims?: string | null
    imageUrl?: string | null
    qrCode?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    validations?: ValidationUncheckedCreateNestedManyWithoutProductInput
    reports?: ReportUncheckedCreateNestedManyWithoutProductInput
    seals?: ProductSealUncheckedCreateNestedManyWithoutProductInput
    validationQueue?: ValidationQueueUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutUserInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutUserInput, ProductUncheckedCreateWithoutUserInput>
  }

  export type ProductCreateManyUserInputEnvelope = {
    data: ProductCreateManyUserInput | ProductCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ValidationCreateWithoutUserInput = {
    id?: string
    status?: string
    type?: string
    claimsValidated?: string | null
    summary?: string | null
    notes?: string | null
    validatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutValidationsInput
    report?: ReportCreateNestedOneWithoutValidationsInput
  }

  export type ValidationUncheckedCreateWithoutUserInput = {
    id?: string
    status?: string
    type?: string
    claimsValidated?: string | null
    summary?: string | null
    notes?: string | null
    validatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    productId: string
    reportId?: string | null
  }

  export type ValidationCreateOrConnectWithoutUserInput = {
    where: ValidationWhereUniqueInput
    create: XOR<ValidationCreateWithoutUserInput, ValidationUncheckedCreateWithoutUserInput>
  }

  export type ValidationCreateManyUserInputEnvelope = {
    data: ValidationCreateManyUserInput | ValidationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ValidationQueueCreateWithoutRequestedByInput = {
    id?: string
    status?: string
    priority?: string
    category: string
    estimatedDuration?: number | null
    actualDuration?: number | null
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    notes?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutValidationQueueInput
    assignedTo?: UserCreateNestedOneWithoutQueueAssignedToInput
    history?: ValidationQueueHistoryCreateNestedManyWithoutQueueInput
  }

  export type ValidationQueueUncheckedCreateWithoutRequestedByInput = {
    id?: string
    productId: string
    assignedToId?: string | null
    status?: string
    priority?: string
    category: string
    estimatedDuration?: number | null
    actualDuration?: number | null
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    notes?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    history?: ValidationQueueHistoryUncheckedCreateNestedManyWithoutQueueInput
  }

  export type ValidationQueueCreateOrConnectWithoutRequestedByInput = {
    where: ValidationQueueWhereUniqueInput
    create: XOR<ValidationQueueCreateWithoutRequestedByInput, ValidationQueueUncheckedCreateWithoutRequestedByInput>
  }

  export type ValidationQueueCreateManyRequestedByInputEnvelope = {
    data: ValidationQueueCreateManyRequestedByInput | ValidationQueueCreateManyRequestedByInput[]
    skipDuplicates?: boolean
  }

  export type ValidationQueueCreateWithoutAssignedToInput = {
    id?: string
    status?: string
    priority?: string
    category: string
    estimatedDuration?: number | null
    actualDuration?: number | null
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    notes?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutValidationQueueInput
    requestedBy: UserCreateNestedOneWithoutQueueRequestedByInput
    history?: ValidationQueueHistoryCreateNestedManyWithoutQueueInput
  }

  export type ValidationQueueUncheckedCreateWithoutAssignedToInput = {
    id?: string
    productId: string
    requestedById: string
    status?: string
    priority?: string
    category: string
    estimatedDuration?: number | null
    actualDuration?: number | null
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    notes?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    history?: ValidationQueueHistoryUncheckedCreateNestedManyWithoutQueueInput
  }

  export type ValidationQueueCreateOrConnectWithoutAssignedToInput = {
    where: ValidationQueueWhereUniqueInput
    create: XOR<ValidationQueueCreateWithoutAssignedToInput, ValidationQueueUncheckedCreateWithoutAssignedToInput>
  }

  export type ValidationQueueCreateManyAssignedToInputEnvelope = {
    data: ValidationQueueCreateManyAssignedToInput | ValidationQueueCreateManyAssignedToInput[]
    skipDuplicates?: boolean
  }

  export type ValidationQueueHistoryCreateWithoutPerformedByInput = {
    id?: string
    action: string
    previousStatus?: string | null
    newStatus?: string | null
    reason?: string | null
    metadata?: string | null
    createdAt?: Date | string
    queue: ValidationQueueCreateNestedOneWithoutHistoryInput
  }

  export type ValidationQueueHistoryUncheckedCreateWithoutPerformedByInput = {
    id?: string
    queueId: string
    action: string
    previousStatus?: string | null
    newStatus?: string | null
    reason?: string | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type ValidationQueueHistoryCreateOrConnectWithoutPerformedByInput = {
    where: ValidationQueueHistoryWhereUniqueInput
    create: XOR<ValidationQueueHistoryCreateWithoutPerformedByInput, ValidationQueueHistoryUncheckedCreateWithoutPerformedByInput>
  }

  export type ValidationQueueHistoryCreateManyPerformedByInputEnvelope = {
    data: ValidationQueueHistoryCreateManyPerformedByInput | ValidationQueueHistoryCreateManyPerformedByInput[]
    skipDuplicates?: boolean
  }

  export type AnalyticsEventCreateWithoutUserInput = {
    id?: string
    eventType: string
    entityType: string
    entityId: string
    sessionId?: string | null
    data?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
  }

  export type AnalyticsEventUncheckedCreateWithoutUserInput = {
    id?: string
    eventType: string
    entityType: string
    entityId: string
    sessionId?: string | null
    data?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
  }

  export type AnalyticsEventCreateOrConnectWithoutUserInput = {
    where: AnalyticsEventWhereUniqueInput
    create: XOR<AnalyticsEventCreateWithoutUserInput, AnalyticsEventUncheckedCreateWithoutUserInput>
  }

  export type AnalyticsEventCreateManyUserInputEnvelope = {
    data: AnalyticsEventCreateManyUserInput | AnalyticsEventCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithWhereUniqueWithoutUserInput = {
    where: ProductWhereUniqueInput
    update: XOR<ProductUpdateWithoutUserInput, ProductUncheckedUpdateWithoutUserInput>
    create: XOR<ProductCreateWithoutUserInput, ProductUncheckedCreateWithoutUserInput>
  }

  export type ProductUpdateWithWhereUniqueWithoutUserInput = {
    where: ProductWhereUniqueInput
    data: XOR<ProductUpdateWithoutUserInput, ProductUncheckedUpdateWithoutUserInput>
  }

  export type ProductUpdateManyWithWhereWithoutUserInput = {
    where: ProductScalarWhereInput
    data: XOR<ProductUpdateManyMutationInput, ProductUncheckedUpdateManyWithoutUserInput>
  }

  export type ProductScalarWhereInput = {
    AND?: ProductScalarWhereInput | ProductScalarWhereInput[]
    OR?: ProductScalarWhereInput[]
    NOT?: ProductScalarWhereInput | ProductScalarWhereInput[]
    id?: StringFilter<"Product"> | string
    name?: StringFilter<"Product"> | string
    brand?: StringFilter<"Product"> | string
    category?: StringFilter<"Product"> | string
    description?: StringNullableFilter<"Product"> | string | null
    sku?: StringFilter<"Product"> | string
    batchNumber?: StringNullableFilter<"Product"> | string | null
    nutritionalInfo?: StringNullableFilter<"Product"> | string | null
    claims?: StringNullableFilter<"Product"> | string | null
    imageUrl?: StringNullableFilter<"Product"> | string | null
    qrCode?: StringNullableFilter<"Product"> | string | null
    status?: StringFilter<"Product"> | string
    createdAt?: DateTimeFilter<"Product"> | Date | string
    updatedAt?: DateTimeFilter<"Product"> | Date | string
    userId?: StringFilter<"Product"> | string
  }

  export type ValidationUpsertWithWhereUniqueWithoutUserInput = {
    where: ValidationWhereUniqueInput
    update: XOR<ValidationUpdateWithoutUserInput, ValidationUncheckedUpdateWithoutUserInput>
    create: XOR<ValidationCreateWithoutUserInput, ValidationUncheckedCreateWithoutUserInput>
  }

  export type ValidationUpdateWithWhereUniqueWithoutUserInput = {
    where: ValidationWhereUniqueInput
    data: XOR<ValidationUpdateWithoutUserInput, ValidationUncheckedUpdateWithoutUserInput>
  }

  export type ValidationUpdateManyWithWhereWithoutUserInput = {
    where: ValidationScalarWhereInput
    data: XOR<ValidationUpdateManyMutationInput, ValidationUncheckedUpdateManyWithoutUserInput>
  }

  export type ValidationScalarWhereInput = {
    AND?: ValidationScalarWhereInput | ValidationScalarWhereInput[]
    OR?: ValidationScalarWhereInput[]
    NOT?: ValidationScalarWhereInput | ValidationScalarWhereInput[]
    id?: StringFilter<"Validation"> | string
    status?: StringFilter<"Validation"> | string
    type?: StringFilter<"Validation"> | string
    claimsValidated?: StringNullableFilter<"Validation"> | string | null
    summary?: StringNullableFilter<"Validation"> | string | null
    notes?: StringNullableFilter<"Validation"> | string | null
    validatedAt?: DateTimeNullableFilter<"Validation"> | Date | string | null
    createdAt?: DateTimeFilter<"Validation"> | Date | string
    updatedAt?: DateTimeFilter<"Validation"> | Date | string
    productId?: StringFilter<"Validation"> | string
    reportId?: StringNullableFilter<"Validation"> | string | null
    userId?: StringFilter<"Validation"> | string
  }

  export type ValidationQueueUpsertWithWhereUniqueWithoutRequestedByInput = {
    where: ValidationQueueWhereUniqueInput
    update: XOR<ValidationQueueUpdateWithoutRequestedByInput, ValidationQueueUncheckedUpdateWithoutRequestedByInput>
    create: XOR<ValidationQueueCreateWithoutRequestedByInput, ValidationQueueUncheckedCreateWithoutRequestedByInput>
  }

  export type ValidationQueueUpdateWithWhereUniqueWithoutRequestedByInput = {
    where: ValidationQueueWhereUniqueInput
    data: XOR<ValidationQueueUpdateWithoutRequestedByInput, ValidationQueueUncheckedUpdateWithoutRequestedByInput>
  }

  export type ValidationQueueUpdateManyWithWhereWithoutRequestedByInput = {
    where: ValidationQueueScalarWhereInput
    data: XOR<ValidationQueueUpdateManyMutationInput, ValidationQueueUncheckedUpdateManyWithoutRequestedByInput>
  }

  export type ValidationQueueScalarWhereInput = {
    AND?: ValidationQueueScalarWhereInput | ValidationQueueScalarWhereInput[]
    OR?: ValidationQueueScalarWhereInput[]
    NOT?: ValidationQueueScalarWhereInput | ValidationQueueScalarWhereInput[]
    id?: StringFilter<"ValidationQueue"> | string
    productId?: StringFilter<"ValidationQueue"> | string
    requestedById?: StringFilter<"ValidationQueue"> | string
    assignedToId?: StringNullableFilter<"ValidationQueue"> | string | null
    status?: StringFilter<"ValidationQueue"> | string
    priority?: StringFilter<"ValidationQueue"> | string
    category?: StringFilter<"ValidationQueue"> | string
    estimatedDuration?: IntNullableFilter<"ValidationQueue"> | number | null
    actualDuration?: IntNullableFilter<"ValidationQueue"> | number | null
    assignedAt?: DateTimeNullableFilter<"ValidationQueue"> | Date | string | null
    startedAt?: DateTimeNullableFilter<"ValidationQueue"> | Date | string | null
    completedAt?: DateTimeNullableFilter<"ValidationQueue"> | Date | string | null
    dueDate?: DateTimeNullableFilter<"ValidationQueue"> | Date | string | null
    notes?: StringNullableFilter<"ValidationQueue"> | string | null
    metadata?: StringNullableFilter<"ValidationQueue"> | string | null
    createdAt?: DateTimeFilter<"ValidationQueue"> | Date | string
    updatedAt?: DateTimeFilter<"ValidationQueue"> | Date | string
  }

  export type ValidationQueueUpsertWithWhereUniqueWithoutAssignedToInput = {
    where: ValidationQueueWhereUniqueInput
    update: XOR<ValidationQueueUpdateWithoutAssignedToInput, ValidationQueueUncheckedUpdateWithoutAssignedToInput>
    create: XOR<ValidationQueueCreateWithoutAssignedToInput, ValidationQueueUncheckedCreateWithoutAssignedToInput>
  }

  export type ValidationQueueUpdateWithWhereUniqueWithoutAssignedToInput = {
    where: ValidationQueueWhereUniqueInput
    data: XOR<ValidationQueueUpdateWithoutAssignedToInput, ValidationQueueUncheckedUpdateWithoutAssignedToInput>
  }

  export type ValidationQueueUpdateManyWithWhereWithoutAssignedToInput = {
    where: ValidationQueueScalarWhereInput
    data: XOR<ValidationQueueUpdateManyMutationInput, ValidationQueueUncheckedUpdateManyWithoutAssignedToInput>
  }

  export type ValidationQueueHistoryUpsertWithWhereUniqueWithoutPerformedByInput = {
    where: ValidationQueueHistoryWhereUniqueInput
    update: XOR<ValidationQueueHistoryUpdateWithoutPerformedByInput, ValidationQueueHistoryUncheckedUpdateWithoutPerformedByInput>
    create: XOR<ValidationQueueHistoryCreateWithoutPerformedByInput, ValidationQueueHistoryUncheckedCreateWithoutPerformedByInput>
  }

  export type ValidationQueueHistoryUpdateWithWhereUniqueWithoutPerformedByInput = {
    where: ValidationQueueHistoryWhereUniqueInput
    data: XOR<ValidationQueueHistoryUpdateWithoutPerformedByInput, ValidationQueueHistoryUncheckedUpdateWithoutPerformedByInput>
  }

  export type ValidationQueueHistoryUpdateManyWithWhereWithoutPerformedByInput = {
    where: ValidationQueueHistoryScalarWhereInput
    data: XOR<ValidationQueueHistoryUpdateManyMutationInput, ValidationQueueHistoryUncheckedUpdateManyWithoutPerformedByInput>
  }

  export type ValidationQueueHistoryScalarWhereInput = {
    AND?: ValidationQueueHistoryScalarWhereInput | ValidationQueueHistoryScalarWhereInput[]
    OR?: ValidationQueueHistoryScalarWhereInput[]
    NOT?: ValidationQueueHistoryScalarWhereInput | ValidationQueueHistoryScalarWhereInput[]
    id?: StringFilter<"ValidationQueueHistory"> | string
    queueId?: StringFilter<"ValidationQueueHistory"> | string
    action?: StringFilter<"ValidationQueueHistory"> | string
    previousStatus?: StringNullableFilter<"ValidationQueueHistory"> | string | null
    newStatus?: StringNullableFilter<"ValidationQueueHistory"> | string | null
    performedById?: StringFilter<"ValidationQueueHistory"> | string
    reason?: StringNullableFilter<"ValidationQueueHistory"> | string | null
    metadata?: StringNullableFilter<"ValidationQueueHistory"> | string | null
    createdAt?: DateTimeFilter<"ValidationQueueHistory"> | Date | string
  }

  export type AnalyticsEventUpsertWithWhereUniqueWithoutUserInput = {
    where: AnalyticsEventWhereUniqueInput
    update: XOR<AnalyticsEventUpdateWithoutUserInput, AnalyticsEventUncheckedUpdateWithoutUserInput>
    create: XOR<AnalyticsEventCreateWithoutUserInput, AnalyticsEventUncheckedCreateWithoutUserInput>
  }

  export type AnalyticsEventUpdateWithWhereUniqueWithoutUserInput = {
    where: AnalyticsEventWhereUniqueInput
    data: XOR<AnalyticsEventUpdateWithoutUserInput, AnalyticsEventUncheckedUpdateWithoutUserInput>
  }

  export type AnalyticsEventUpdateManyWithWhereWithoutUserInput = {
    where: AnalyticsEventScalarWhereInput
    data: XOR<AnalyticsEventUpdateManyMutationInput, AnalyticsEventUncheckedUpdateManyWithoutUserInput>
  }

  export type AnalyticsEventScalarWhereInput = {
    AND?: AnalyticsEventScalarWhereInput | AnalyticsEventScalarWhereInput[]
    OR?: AnalyticsEventScalarWhereInput[]
    NOT?: AnalyticsEventScalarWhereInput | AnalyticsEventScalarWhereInput[]
    id?: StringFilter<"AnalyticsEvent"> | string
    eventType?: StringFilter<"AnalyticsEvent"> | string
    entityType?: StringFilter<"AnalyticsEvent"> | string
    entityId?: StringFilter<"AnalyticsEvent"> | string
    userId?: StringNullableFilter<"AnalyticsEvent"> | string | null
    sessionId?: StringNullableFilter<"AnalyticsEvent"> | string | null
    data?: StringNullableFilter<"AnalyticsEvent"> | string | null
    ipAddress?: StringNullableFilter<"AnalyticsEvent"> | string | null
    userAgent?: StringNullableFilter<"AnalyticsEvent"> | string | null
    timestamp?: DateTimeFilter<"AnalyticsEvent"> | Date | string
  }

  export type ReportCreateWithoutLaboratoryInput = {
    id?: string
    fileName: string
    originalName: string
    filePath: string
    fileSize: number
    mimeType: string
    analysisType: string
    results: string
    isVerified?: boolean
    verificationHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutReportsInput
    validations?: ValidationCreateNestedManyWithoutReportInput
  }

  export type ReportUncheckedCreateWithoutLaboratoryInput = {
    id?: string
    fileName: string
    originalName: string
    filePath: string
    fileSize: number
    mimeType: string
    analysisType: string
    results: string
    isVerified?: boolean
    verificationHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    productId: string
    validations?: ValidationUncheckedCreateNestedManyWithoutReportInput
  }

  export type ReportCreateOrConnectWithoutLaboratoryInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutLaboratoryInput, ReportUncheckedCreateWithoutLaboratoryInput>
  }

  export type ReportCreateManyLaboratoryInputEnvelope = {
    data: ReportCreateManyLaboratoryInput | ReportCreateManyLaboratoryInput[]
    skipDuplicates?: boolean
  }

  export type ReportUpsertWithWhereUniqueWithoutLaboratoryInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutLaboratoryInput, ReportUncheckedUpdateWithoutLaboratoryInput>
    create: XOR<ReportCreateWithoutLaboratoryInput, ReportUncheckedCreateWithoutLaboratoryInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutLaboratoryInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutLaboratoryInput, ReportUncheckedUpdateWithoutLaboratoryInput>
  }

  export type ReportUpdateManyWithWhereWithoutLaboratoryInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutLaboratoryInput>
  }

  export type ReportScalarWhereInput = {
    AND?: ReportScalarWhereInput | ReportScalarWhereInput[]
    OR?: ReportScalarWhereInput[]
    NOT?: ReportScalarWhereInput | ReportScalarWhereInput[]
    id?: StringFilter<"Report"> | string
    fileName?: StringFilter<"Report"> | string
    originalName?: StringFilter<"Report"> | string
    filePath?: StringFilter<"Report"> | string
    fileSize?: IntFilter<"Report"> | number
    mimeType?: StringFilter<"Report"> | string
    analysisType?: StringFilter<"Report"> | string
    results?: StringFilter<"Report"> | string
    isVerified?: BoolFilter<"Report"> | boolean
    verificationHash?: StringNullableFilter<"Report"> | string | null
    createdAt?: DateTimeFilter<"Report"> | Date | string
    updatedAt?: DateTimeFilter<"Report"> | Date | string
    productId?: StringFilter<"Report"> | string
    laboratoryId?: StringFilter<"Report"> | string
  }

  export type UserCreateWithoutProductsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    validations?: ValidationCreateNestedManyWithoutUserInput
    queueRequestedBy?: ValidationQueueCreateNestedManyWithoutRequestedByInput
    queueAssignedTo?: ValidationQueueCreateNestedManyWithoutAssignedToInput
    queueHistoryActions?: ValidationQueueHistoryCreateNestedManyWithoutPerformedByInput
    analyticsEvents?: AnalyticsEventCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProductsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    validations?: ValidationUncheckedCreateNestedManyWithoutUserInput
    queueRequestedBy?: ValidationQueueUncheckedCreateNestedManyWithoutRequestedByInput
    queueAssignedTo?: ValidationQueueUncheckedCreateNestedManyWithoutAssignedToInput
    queueHistoryActions?: ValidationQueueHistoryUncheckedCreateNestedManyWithoutPerformedByInput
    analyticsEvents?: AnalyticsEventUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProductsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProductsInput, UserUncheckedCreateWithoutProductsInput>
  }

  export type ValidationCreateWithoutProductInput = {
    id?: string
    status?: string
    type?: string
    claimsValidated?: string | null
    summary?: string | null
    notes?: string | null
    validatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    report?: ReportCreateNestedOneWithoutValidationsInput
    user: UserCreateNestedOneWithoutValidationsInput
  }

  export type ValidationUncheckedCreateWithoutProductInput = {
    id?: string
    status?: string
    type?: string
    claimsValidated?: string | null
    summary?: string | null
    notes?: string | null
    validatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reportId?: string | null
    userId: string
  }

  export type ValidationCreateOrConnectWithoutProductInput = {
    where: ValidationWhereUniqueInput
    create: XOR<ValidationCreateWithoutProductInput, ValidationUncheckedCreateWithoutProductInput>
  }

  export type ValidationCreateManyProductInputEnvelope = {
    data: ValidationCreateManyProductInput | ValidationCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type ReportCreateWithoutProductInput = {
    id?: string
    fileName: string
    originalName: string
    filePath: string
    fileSize: number
    mimeType: string
    analysisType: string
    results: string
    isVerified?: boolean
    verificationHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    laboratory: LaboratoryCreateNestedOneWithoutReportsInput
    validations?: ValidationCreateNestedManyWithoutReportInput
  }

  export type ReportUncheckedCreateWithoutProductInput = {
    id?: string
    fileName: string
    originalName: string
    filePath: string
    fileSize: number
    mimeType: string
    analysisType: string
    results: string
    isVerified?: boolean
    verificationHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    laboratoryId: string
    validations?: ValidationUncheckedCreateNestedManyWithoutReportInput
  }

  export type ReportCreateOrConnectWithoutProductInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutProductInput, ReportUncheckedCreateWithoutProductInput>
  }

  export type ReportCreateManyProductInputEnvelope = {
    data: ReportCreateManyProductInput | ReportCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type ProductSealCreateWithoutProductInput = {
    id?: string
    sealId: string
    certificateNumber?: string | null
    issuedDate?: Date | string | null
    expiryDate?: Date | string | null
    validatingLaboratory?: string | null
    documentUrl?: string | null
    status?: string
    verifiedBy?: string | null
    verifiedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductSealUncheckedCreateWithoutProductInput = {
    id?: string
    sealId: string
    certificateNumber?: string | null
    issuedDate?: Date | string | null
    expiryDate?: Date | string | null
    validatingLaboratory?: string | null
    documentUrl?: string | null
    status?: string
    verifiedBy?: string | null
    verifiedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ProductSealCreateOrConnectWithoutProductInput = {
    where: ProductSealWhereUniqueInput
    create: XOR<ProductSealCreateWithoutProductInput, ProductSealUncheckedCreateWithoutProductInput>
  }

  export type ProductSealCreateManyProductInputEnvelope = {
    data: ProductSealCreateManyProductInput | ProductSealCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type ValidationQueueCreateWithoutProductInput = {
    id?: string
    status?: string
    priority?: string
    category: string
    estimatedDuration?: number | null
    actualDuration?: number | null
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    notes?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    requestedBy: UserCreateNestedOneWithoutQueueRequestedByInput
    assignedTo?: UserCreateNestedOneWithoutQueueAssignedToInput
    history?: ValidationQueueHistoryCreateNestedManyWithoutQueueInput
  }

  export type ValidationQueueUncheckedCreateWithoutProductInput = {
    id?: string
    requestedById: string
    assignedToId?: string | null
    status?: string
    priority?: string
    category: string
    estimatedDuration?: number | null
    actualDuration?: number | null
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    notes?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    history?: ValidationQueueHistoryUncheckedCreateNestedManyWithoutQueueInput
  }

  export type ValidationQueueCreateOrConnectWithoutProductInput = {
    where: ValidationQueueWhereUniqueInput
    create: XOR<ValidationQueueCreateWithoutProductInput, ValidationQueueUncheckedCreateWithoutProductInput>
  }

  export type ValidationQueueCreateManyProductInputEnvelope = {
    data: ValidationQueueCreateManyProductInput | ValidationQueueCreateManyProductInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutProductsInput = {
    update: XOR<UserUpdateWithoutProductsInput, UserUncheckedUpdateWithoutProductsInput>
    create: XOR<UserCreateWithoutProductsInput, UserUncheckedCreateWithoutProductsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProductsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProductsInput, UserUncheckedUpdateWithoutProductsInput>
  }

  export type UserUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validations?: ValidationUpdateManyWithoutUserNestedInput
    queueRequestedBy?: ValidationQueueUpdateManyWithoutRequestedByNestedInput
    queueAssignedTo?: ValidationQueueUpdateManyWithoutAssignedToNestedInput
    queueHistoryActions?: ValidationQueueHistoryUpdateManyWithoutPerformedByNestedInput
    analyticsEvents?: AnalyticsEventUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProductsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validations?: ValidationUncheckedUpdateManyWithoutUserNestedInput
    queueRequestedBy?: ValidationQueueUncheckedUpdateManyWithoutRequestedByNestedInput
    queueAssignedTo?: ValidationQueueUncheckedUpdateManyWithoutAssignedToNestedInput
    queueHistoryActions?: ValidationQueueHistoryUncheckedUpdateManyWithoutPerformedByNestedInput
    analyticsEvents?: AnalyticsEventUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ValidationUpsertWithWhereUniqueWithoutProductInput = {
    where: ValidationWhereUniqueInput
    update: XOR<ValidationUpdateWithoutProductInput, ValidationUncheckedUpdateWithoutProductInput>
    create: XOR<ValidationCreateWithoutProductInput, ValidationUncheckedCreateWithoutProductInput>
  }

  export type ValidationUpdateWithWhereUniqueWithoutProductInput = {
    where: ValidationWhereUniqueInput
    data: XOR<ValidationUpdateWithoutProductInput, ValidationUncheckedUpdateWithoutProductInput>
  }

  export type ValidationUpdateManyWithWhereWithoutProductInput = {
    where: ValidationScalarWhereInput
    data: XOR<ValidationUpdateManyMutationInput, ValidationUncheckedUpdateManyWithoutProductInput>
  }

  export type ReportUpsertWithWhereUniqueWithoutProductInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutProductInput, ReportUncheckedUpdateWithoutProductInput>
    create: XOR<ReportCreateWithoutProductInput, ReportUncheckedCreateWithoutProductInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutProductInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutProductInput, ReportUncheckedUpdateWithoutProductInput>
  }

  export type ReportUpdateManyWithWhereWithoutProductInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductSealUpsertWithWhereUniqueWithoutProductInput = {
    where: ProductSealWhereUniqueInput
    update: XOR<ProductSealUpdateWithoutProductInput, ProductSealUncheckedUpdateWithoutProductInput>
    create: XOR<ProductSealCreateWithoutProductInput, ProductSealUncheckedCreateWithoutProductInput>
  }

  export type ProductSealUpdateWithWhereUniqueWithoutProductInput = {
    where: ProductSealWhereUniqueInput
    data: XOR<ProductSealUpdateWithoutProductInput, ProductSealUncheckedUpdateWithoutProductInput>
  }

  export type ProductSealUpdateManyWithWhereWithoutProductInput = {
    where: ProductSealScalarWhereInput
    data: XOR<ProductSealUpdateManyMutationInput, ProductSealUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductSealScalarWhereInput = {
    AND?: ProductSealScalarWhereInput | ProductSealScalarWhereInput[]
    OR?: ProductSealScalarWhereInput[]
    NOT?: ProductSealScalarWhereInput | ProductSealScalarWhereInput[]
    id?: StringFilter<"ProductSeal"> | string
    productId?: StringFilter<"ProductSeal"> | string
    sealId?: StringFilter<"ProductSeal"> | string
    certificateNumber?: StringNullableFilter<"ProductSeal"> | string | null
    issuedDate?: DateTimeNullableFilter<"ProductSeal"> | Date | string | null
    expiryDate?: DateTimeNullableFilter<"ProductSeal"> | Date | string | null
    validatingLaboratory?: StringNullableFilter<"ProductSeal"> | string | null
    documentUrl?: StringNullableFilter<"ProductSeal"> | string | null
    status?: StringFilter<"ProductSeal"> | string
    verifiedBy?: StringNullableFilter<"ProductSeal"> | string | null
    verifiedAt?: DateTimeNullableFilter<"ProductSeal"> | Date | string | null
    notes?: StringNullableFilter<"ProductSeal"> | string | null
    createdAt?: DateTimeFilter<"ProductSeal"> | Date | string
    updatedAt?: DateTimeFilter<"ProductSeal"> | Date | string
  }

  export type ValidationQueueUpsertWithWhereUniqueWithoutProductInput = {
    where: ValidationQueueWhereUniqueInput
    update: XOR<ValidationQueueUpdateWithoutProductInput, ValidationQueueUncheckedUpdateWithoutProductInput>
    create: XOR<ValidationQueueCreateWithoutProductInput, ValidationQueueUncheckedCreateWithoutProductInput>
  }

  export type ValidationQueueUpdateWithWhereUniqueWithoutProductInput = {
    where: ValidationQueueWhereUniqueInput
    data: XOR<ValidationQueueUpdateWithoutProductInput, ValidationQueueUncheckedUpdateWithoutProductInput>
  }

  export type ValidationQueueUpdateManyWithWhereWithoutProductInput = {
    where: ValidationQueueScalarWhereInput
    data: XOR<ValidationQueueUpdateManyMutationInput, ValidationQueueUncheckedUpdateManyWithoutProductInput>
  }

  export type ProductCreateWithoutReportsInput = {
    id?: string
    name: string
    brand: string
    category: string
    description?: string | null
    sku: string
    batchNumber?: string | null
    nutritionalInfo?: string | null
    claims?: string | null
    imageUrl?: string | null
    qrCode?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProductsInput
    validations?: ValidationCreateNestedManyWithoutProductInput
    seals?: ProductSealCreateNestedManyWithoutProductInput
    validationQueue?: ValidationQueueCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutReportsInput = {
    id?: string
    name: string
    brand: string
    category: string
    description?: string | null
    sku: string
    batchNumber?: string | null
    nutritionalInfo?: string | null
    claims?: string | null
    imageUrl?: string | null
    qrCode?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    validations?: ValidationUncheckedCreateNestedManyWithoutProductInput
    seals?: ProductSealUncheckedCreateNestedManyWithoutProductInput
    validationQueue?: ValidationQueueUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutReportsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutReportsInput, ProductUncheckedCreateWithoutReportsInput>
  }

  export type LaboratoryCreateWithoutReportsInput = {
    id?: string
    name: string
    accreditation: string
    email: string
    phone?: string | null
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LaboratoryUncheckedCreateWithoutReportsInput = {
    id?: string
    name: string
    accreditation: string
    email: string
    phone?: string | null
    address?: string | null
    isActive?: boolean
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type LaboratoryCreateOrConnectWithoutReportsInput = {
    where: LaboratoryWhereUniqueInput
    create: XOR<LaboratoryCreateWithoutReportsInput, LaboratoryUncheckedCreateWithoutReportsInput>
  }

  export type ValidationCreateWithoutReportInput = {
    id?: string
    status?: string
    type?: string
    claimsValidated?: string | null
    summary?: string | null
    notes?: string | null
    validatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutValidationsInput
    user: UserCreateNestedOneWithoutValidationsInput
  }

  export type ValidationUncheckedCreateWithoutReportInput = {
    id?: string
    status?: string
    type?: string
    claimsValidated?: string | null
    summary?: string | null
    notes?: string | null
    validatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    productId: string
    userId: string
  }

  export type ValidationCreateOrConnectWithoutReportInput = {
    where: ValidationWhereUniqueInput
    create: XOR<ValidationCreateWithoutReportInput, ValidationUncheckedCreateWithoutReportInput>
  }

  export type ValidationCreateManyReportInputEnvelope = {
    data: ValidationCreateManyReportInput | ValidationCreateManyReportInput[]
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithoutReportsInput = {
    update: XOR<ProductUpdateWithoutReportsInput, ProductUncheckedUpdateWithoutReportsInput>
    create: XOR<ProductCreateWithoutReportsInput, ProductUncheckedCreateWithoutReportsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutReportsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutReportsInput, ProductUncheckedUpdateWithoutReportsInput>
  }

  export type ProductUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sku?: StringFieldUpdateOperationsInput | string
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nutritionalInfo?: NullableStringFieldUpdateOperationsInput | string | null
    claims?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProductsNestedInput
    validations?: ValidationUpdateManyWithoutProductNestedInput
    seals?: ProductSealUpdateManyWithoutProductNestedInput
    validationQueue?: ValidationQueueUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sku?: StringFieldUpdateOperationsInput | string
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nutritionalInfo?: NullableStringFieldUpdateOperationsInput | string | null
    claims?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    validations?: ValidationUncheckedUpdateManyWithoutProductNestedInput
    seals?: ProductSealUncheckedUpdateManyWithoutProductNestedInput
    validationQueue?: ValidationQueueUncheckedUpdateManyWithoutProductNestedInput
  }

  export type LaboratoryUpsertWithoutReportsInput = {
    update: XOR<LaboratoryUpdateWithoutReportsInput, LaboratoryUncheckedUpdateWithoutReportsInput>
    create: XOR<LaboratoryCreateWithoutReportsInput, LaboratoryUncheckedCreateWithoutReportsInput>
    where?: LaboratoryWhereInput
  }

  export type LaboratoryUpdateToOneWithWhereWithoutReportsInput = {
    where?: LaboratoryWhereInput
    data: XOR<LaboratoryUpdateWithoutReportsInput, LaboratoryUncheckedUpdateWithoutReportsInput>
  }

  export type LaboratoryUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    accreditation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LaboratoryUncheckedUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    accreditation?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    phone?: NullableStringFieldUpdateOperationsInput | string | null
    address?: NullableStringFieldUpdateOperationsInput | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValidationUpsertWithWhereUniqueWithoutReportInput = {
    where: ValidationWhereUniqueInput
    update: XOR<ValidationUpdateWithoutReportInput, ValidationUncheckedUpdateWithoutReportInput>
    create: XOR<ValidationCreateWithoutReportInput, ValidationUncheckedCreateWithoutReportInput>
  }

  export type ValidationUpdateWithWhereUniqueWithoutReportInput = {
    where: ValidationWhereUniqueInput
    data: XOR<ValidationUpdateWithoutReportInput, ValidationUncheckedUpdateWithoutReportInput>
  }

  export type ValidationUpdateManyWithWhereWithoutReportInput = {
    where: ValidationScalarWhereInput
    data: XOR<ValidationUpdateManyMutationInput, ValidationUncheckedUpdateManyWithoutReportInput>
  }

  export type ProductCreateWithoutValidationsInput = {
    id?: string
    name: string
    brand: string
    category: string
    description?: string | null
    sku: string
    batchNumber?: string | null
    nutritionalInfo?: string | null
    claims?: string | null
    imageUrl?: string | null
    qrCode?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProductsInput
    reports?: ReportCreateNestedManyWithoutProductInput
    seals?: ProductSealCreateNestedManyWithoutProductInput
    validationQueue?: ValidationQueueCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutValidationsInput = {
    id?: string
    name: string
    brand: string
    category: string
    description?: string | null
    sku: string
    batchNumber?: string | null
    nutritionalInfo?: string | null
    claims?: string | null
    imageUrl?: string | null
    qrCode?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    reports?: ReportUncheckedCreateNestedManyWithoutProductInput
    seals?: ProductSealUncheckedCreateNestedManyWithoutProductInput
    validationQueue?: ValidationQueueUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutValidationsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutValidationsInput, ProductUncheckedCreateWithoutValidationsInput>
  }

  export type ReportCreateWithoutValidationsInput = {
    id?: string
    fileName: string
    originalName: string
    filePath: string
    fileSize: number
    mimeType: string
    analysisType: string
    results: string
    isVerified?: boolean
    verificationHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutReportsInput
    laboratory: LaboratoryCreateNestedOneWithoutReportsInput
  }

  export type ReportUncheckedCreateWithoutValidationsInput = {
    id?: string
    fileName: string
    originalName: string
    filePath: string
    fileSize: number
    mimeType: string
    analysisType: string
    results: string
    isVerified?: boolean
    verificationHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    productId: string
    laboratoryId: string
  }

  export type ReportCreateOrConnectWithoutValidationsInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutValidationsInput, ReportUncheckedCreateWithoutValidationsInput>
  }

  export type UserCreateWithoutValidationsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: ProductCreateNestedManyWithoutUserInput
    queueRequestedBy?: ValidationQueueCreateNestedManyWithoutRequestedByInput
    queueAssignedTo?: ValidationQueueCreateNestedManyWithoutAssignedToInput
    queueHistoryActions?: ValidationQueueHistoryCreateNestedManyWithoutPerformedByInput
    analyticsEvents?: AnalyticsEventCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutValidationsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: ProductUncheckedCreateNestedManyWithoutUserInput
    queueRequestedBy?: ValidationQueueUncheckedCreateNestedManyWithoutRequestedByInput
    queueAssignedTo?: ValidationQueueUncheckedCreateNestedManyWithoutAssignedToInput
    queueHistoryActions?: ValidationQueueHistoryUncheckedCreateNestedManyWithoutPerformedByInput
    analyticsEvents?: AnalyticsEventUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutValidationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutValidationsInput, UserUncheckedCreateWithoutValidationsInput>
  }

  export type ProductUpsertWithoutValidationsInput = {
    update: XOR<ProductUpdateWithoutValidationsInput, ProductUncheckedUpdateWithoutValidationsInput>
    create: XOR<ProductCreateWithoutValidationsInput, ProductUncheckedCreateWithoutValidationsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutValidationsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutValidationsInput, ProductUncheckedUpdateWithoutValidationsInput>
  }

  export type ProductUpdateWithoutValidationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sku?: StringFieldUpdateOperationsInput | string
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nutritionalInfo?: NullableStringFieldUpdateOperationsInput | string | null
    claims?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProductsNestedInput
    reports?: ReportUpdateManyWithoutProductNestedInput
    seals?: ProductSealUpdateManyWithoutProductNestedInput
    validationQueue?: ValidationQueueUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutValidationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sku?: StringFieldUpdateOperationsInput | string
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nutritionalInfo?: NullableStringFieldUpdateOperationsInput | string | null
    claims?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    reports?: ReportUncheckedUpdateManyWithoutProductNestedInput
    seals?: ProductSealUncheckedUpdateManyWithoutProductNestedInput
    validationQueue?: ValidationQueueUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ReportUpsertWithoutValidationsInput = {
    update: XOR<ReportUpdateWithoutValidationsInput, ReportUncheckedUpdateWithoutValidationsInput>
    create: XOR<ReportCreateWithoutValidationsInput, ReportUncheckedCreateWithoutValidationsInput>
    where?: ReportWhereInput
  }

  export type ReportUpdateToOneWithWhereWithoutValidationsInput = {
    where?: ReportWhereInput
    data: XOR<ReportUpdateWithoutValidationsInput, ReportUncheckedUpdateWithoutValidationsInput>
  }

  export type ReportUpdateWithoutValidationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    analysisType?: StringFieldUpdateOperationsInput | string
    results?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutReportsNestedInput
    laboratory?: LaboratoryUpdateOneRequiredWithoutReportsNestedInput
  }

  export type ReportUncheckedUpdateWithoutValidationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    analysisType?: StringFieldUpdateOperationsInput | string
    results?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: StringFieldUpdateOperationsInput | string
    laboratoryId?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutValidationsInput = {
    update: XOR<UserUpdateWithoutValidationsInput, UserUncheckedUpdateWithoutValidationsInput>
    create: XOR<UserCreateWithoutValidationsInput, UserUncheckedCreateWithoutValidationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutValidationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutValidationsInput, UserUncheckedUpdateWithoutValidationsInput>
  }

  export type UserUpdateWithoutValidationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: ProductUpdateManyWithoutUserNestedInput
    queueRequestedBy?: ValidationQueueUpdateManyWithoutRequestedByNestedInput
    queueAssignedTo?: ValidationQueueUpdateManyWithoutAssignedToNestedInput
    queueHistoryActions?: ValidationQueueHistoryUpdateManyWithoutPerformedByNestedInput
    analyticsEvents?: AnalyticsEventUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutValidationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: ProductUncheckedUpdateManyWithoutUserNestedInput
    queueRequestedBy?: ValidationQueueUncheckedUpdateManyWithoutRequestedByNestedInput
    queueAssignedTo?: ValidationQueueUncheckedUpdateManyWithoutAssignedToNestedInput
    queueHistoryActions?: ValidationQueueHistoryUncheckedUpdateManyWithoutPerformedByNestedInput
    analyticsEvents?: AnalyticsEventUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProductCreateWithoutSealsInput = {
    id?: string
    name: string
    brand: string
    category: string
    description?: string | null
    sku: string
    batchNumber?: string | null
    nutritionalInfo?: string | null
    claims?: string | null
    imageUrl?: string | null
    qrCode?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProductsInput
    validations?: ValidationCreateNestedManyWithoutProductInput
    reports?: ReportCreateNestedManyWithoutProductInput
    validationQueue?: ValidationQueueCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutSealsInput = {
    id?: string
    name: string
    brand: string
    category: string
    description?: string | null
    sku: string
    batchNumber?: string | null
    nutritionalInfo?: string | null
    claims?: string | null
    imageUrl?: string | null
    qrCode?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    validations?: ValidationUncheckedCreateNestedManyWithoutProductInput
    reports?: ReportUncheckedCreateNestedManyWithoutProductInput
    validationQueue?: ValidationQueueUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutSealsInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutSealsInput, ProductUncheckedCreateWithoutSealsInput>
  }

  export type ProductUpsertWithoutSealsInput = {
    update: XOR<ProductUpdateWithoutSealsInput, ProductUncheckedUpdateWithoutSealsInput>
    create: XOR<ProductCreateWithoutSealsInput, ProductUncheckedCreateWithoutSealsInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutSealsInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutSealsInput, ProductUncheckedUpdateWithoutSealsInput>
  }

  export type ProductUpdateWithoutSealsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sku?: StringFieldUpdateOperationsInput | string
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nutritionalInfo?: NullableStringFieldUpdateOperationsInput | string | null
    claims?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProductsNestedInput
    validations?: ValidationUpdateManyWithoutProductNestedInput
    reports?: ReportUpdateManyWithoutProductNestedInput
    validationQueue?: ValidationQueueUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutSealsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sku?: StringFieldUpdateOperationsInput | string
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nutritionalInfo?: NullableStringFieldUpdateOperationsInput | string | null
    claims?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    validations?: ValidationUncheckedUpdateManyWithoutProductNestedInput
    reports?: ReportUncheckedUpdateManyWithoutProductNestedInput
    validationQueue?: ValidationQueueUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductCreateWithoutValidationQueueInput = {
    id?: string
    name: string
    brand: string
    category: string
    description?: string | null
    sku: string
    batchNumber?: string | null
    nutritionalInfo?: string | null
    claims?: string | null
    imageUrl?: string | null
    qrCode?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutProductsInput
    validations?: ValidationCreateNestedManyWithoutProductInput
    reports?: ReportCreateNestedManyWithoutProductInput
    seals?: ProductSealCreateNestedManyWithoutProductInput
  }

  export type ProductUncheckedCreateWithoutValidationQueueInput = {
    id?: string
    name: string
    brand: string
    category: string
    description?: string | null
    sku: string
    batchNumber?: string | null
    nutritionalInfo?: string | null
    claims?: string | null
    imageUrl?: string | null
    qrCode?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    validations?: ValidationUncheckedCreateNestedManyWithoutProductInput
    reports?: ReportUncheckedCreateNestedManyWithoutProductInput
    seals?: ProductSealUncheckedCreateNestedManyWithoutProductInput
  }

  export type ProductCreateOrConnectWithoutValidationQueueInput = {
    where: ProductWhereUniqueInput
    create: XOR<ProductCreateWithoutValidationQueueInput, ProductUncheckedCreateWithoutValidationQueueInput>
  }

  export type UserCreateWithoutQueueRequestedByInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: ProductCreateNestedManyWithoutUserInput
    validations?: ValidationCreateNestedManyWithoutUserInput
    queueAssignedTo?: ValidationQueueCreateNestedManyWithoutAssignedToInput
    queueHistoryActions?: ValidationQueueHistoryCreateNestedManyWithoutPerformedByInput
    analyticsEvents?: AnalyticsEventCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutQueueRequestedByInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: ProductUncheckedCreateNestedManyWithoutUserInput
    validations?: ValidationUncheckedCreateNestedManyWithoutUserInput
    queueAssignedTo?: ValidationQueueUncheckedCreateNestedManyWithoutAssignedToInput
    queueHistoryActions?: ValidationQueueHistoryUncheckedCreateNestedManyWithoutPerformedByInput
    analyticsEvents?: AnalyticsEventUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutQueueRequestedByInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutQueueRequestedByInput, UserUncheckedCreateWithoutQueueRequestedByInput>
  }

  export type UserCreateWithoutQueueAssignedToInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: ProductCreateNestedManyWithoutUserInput
    validations?: ValidationCreateNestedManyWithoutUserInput
    queueRequestedBy?: ValidationQueueCreateNestedManyWithoutRequestedByInput
    queueHistoryActions?: ValidationQueueHistoryCreateNestedManyWithoutPerformedByInput
    analyticsEvents?: AnalyticsEventCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutQueueAssignedToInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: ProductUncheckedCreateNestedManyWithoutUserInput
    validations?: ValidationUncheckedCreateNestedManyWithoutUserInput
    queueRequestedBy?: ValidationQueueUncheckedCreateNestedManyWithoutRequestedByInput
    queueHistoryActions?: ValidationQueueHistoryUncheckedCreateNestedManyWithoutPerformedByInput
    analyticsEvents?: AnalyticsEventUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutQueueAssignedToInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutQueueAssignedToInput, UserUncheckedCreateWithoutQueueAssignedToInput>
  }

  export type ValidationQueueHistoryCreateWithoutQueueInput = {
    id?: string
    action: string
    previousStatus?: string | null
    newStatus?: string | null
    reason?: string | null
    metadata?: string | null
    createdAt?: Date | string
    performedBy: UserCreateNestedOneWithoutQueueHistoryActionsInput
  }

  export type ValidationQueueHistoryUncheckedCreateWithoutQueueInput = {
    id?: string
    action: string
    previousStatus?: string | null
    newStatus?: string | null
    performedById: string
    reason?: string | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type ValidationQueueHistoryCreateOrConnectWithoutQueueInput = {
    where: ValidationQueueHistoryWhereUniqueInput
    create: XOR<ValidationQueueHistoryCreateWithoutQueueInput, ValidationQueueHistoryUncheckedCreateWithoutQueueInput>
  }

  export type ValidationQueueHistoryCreateManyQueueInputEnvelope = {
    data: ValidationQueueHistoryCreateManyQueueInput | ValidationQueueHistoryCreateManyQueueInput[]
    skipDuplicates?: boolean
  }

  export type ProductUpsertWithoutValidationQueueInput = {
    update: XOR<ProductUpdateWithoutValidationQueueInput, ProductUncheckedUpdateWithoutValidationQueueInput>
    create: XOR<ProductCreateWithoutValidationQueueInput, ProductUncheckedCreateWithoutValidationQueueInput>
    where?: ProductWhereInput
  }

  export type ProductUpdateToOneWithWhereWithoutValidationQueueInput = {
    where?: ProductWhereInput
    data: XOR<ProductUpdateWithoutValidationQueueInput, ProductUncheckedUpdateWithoutValidationQueueInput>
  }

  export type ProductUpdateWithoutValidationQueueInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sku?: StringFieldUpdateOperationsInput | string
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nutritionalInfo?: NullableStringFieldUpdateOperationsInput | string | null
    claims?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutProductsNestedInput
    validations?: ValidationUpdateManyWithoutProductNestedInput
    reports?: ReportUpdateManyWithoutProductNestedInput
    seals?: ProductSealUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutValidationQueueInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sku?: StringFieldUpdateOperationsInput | string
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nutritionalInfo?: NullableStringFieldUpdateOperationsInput | string | null
    claims?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    validations?: ValidationUncheckedUpdateManyWithoutProductNestedInput
    reports?: ReportUncheckedUpdateManyWithoutProductNestedInput
    seals?: ProductSealUncheckedUpdateManyWithoutProductNestedInput
  }

  export type UserUpsertWithoutQueueRequestedByInput = {
    update: XOR<UserUpdateWithoutQueueRequestedByInput, UserUncheckedUpdateWithoutQueueRequestedByInput>
    create: XOR<UserCreateWithoutQueueRequestedByInput, UserUncheckedCreateWithoutQueueRequestedByInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutQueueRequestedByInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutQueueRequestedByInput, UserUncheckedUpdateWithoutQueueRequestedByInput>
  }

  export type UserUpdateWithoutQueueRequestedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: ProductUpdateManyWithoutUserNestedInput
    validations?: ValidationUpdateManyWithoutUserNestedInput
    queueAssignedTo?: ValidationQueueUpdateManyWithoutAssignedToNestedInput
    queueHistoryActions?: ValidationQueueHistoryUpdateManyWithoutPerformedByNestedInput
    analyticsEvents?: AnalyticsEventUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutQueueRequestedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: ProductUncheckedUpdateManyWithoutUserNestedInput
    validations?: ValidationUncheckedUpdateManyWithoutUserNestedInput
    queueAssignedTo?: ValidationQueueUncheckedUpdateManyWithoutAssignedToNestedInput
    queueHistoryActions?: ValidationQueueHistoryUncheckedUpdateManyWithoutPerformedByNestedInput
    analyticsEvents?: AnalyticsEventUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutQueueAssignedToInput = {
    update: XOR<UserUpdateWithoutQueueAssignedToInput, UserUncheckedUpdateWithoutQueueAssignedToInput>
    create: XOR<UserCreateWithoutQueueAssignedToInput, UserUncheckedCreateWithoutQueueAssignedToInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutQueueAssignedToInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutQueueAssignedToInput, UserUncheckedUpdateWithoutQueueAssignedToInput>
  }

  export type UserUpdateWithoutQueueAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: ProductUpdateManyWithoutUserNestedInput
    validations?: ValidationUpdateManyWithoutUserNestedInput
    queueRequestedBy?: ValidationQueueUpdateManyWithoutRequestedByNestedInput
    queueHistoryActions?: ValidationQueueHistoryUpdateManyWithoutPerformedByNestedInput
    analyticsEvents?: AnalyticsEventUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutQueueAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: ProductUncheckedUpdateManyWithoutUserNestedInput
    validations?: ValidationUncheckedUpdateManyWithoutUserNestedInput
    queueRequestedBy?: ValidationQueueUncheckedUpdateManyWithoutRequestedByNestedInput
    queueHistoryActions?: ValidationQueueHistoryUncheckedUpdateManyWithoutPerformedByNestedInput
    analyticsEvents?: AnalyticsEventUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ValidationQueueHistoryUpsertWithWhereUniqueWithoutQueueInput = {
    where: ValidationQueueHistoryWhereUniqueInput
    update: XOR<ValidationQueueHistoryUpdateWithoutQueueInput, ValidationQueueHistoryUncheckedUpdateWithoutQueueInput>
    create: XOR<ValidationQueueHistoryCreateWithoutQueueInput, ValidationQueueHistoryUncheckedCreateWithoutQueueInput>
  }

  export type ValidationQueueHistoryUpdateWithWhereUniqueWithoutQueueInput = {
    where: ValidationQueueHistoryWhereUniqueInput
    data: XOR<ValidationQueueHistoryUpdateWithoutQueueInput, ValidationQueueHistoryUncheckedUpdateWithoutQueueInput>
  }

  export type ValidationQueueHistoryUpdateManyWithWhereWithoutQueueInput = {
    where: ValidationQueueHistoryScalarWhereInput
    data: XOR<ValidationQueueHistoryUpdateManyMutationInput, ValidationQueueHistoryUncheckedUpdateManyWithoutQueueInput>
  }

  export type ValidationQueueCreateWithoutHistoryInput = {
    id?: string
    status?: string
    priority?: string
    category: string
    estimatedDuration?: number | null
    actualDuration?: number | null
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    notes?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    product: ProductCreateNestedOneWithoutValidationQueueInput
    requestedBy: UserCreateNestedOneWithoutQueueRequestedByInput
    assignedTo?: UserCreateNestedOneWithoutQueueAssignedToInput
  }

  export type ValidationQueueUncheckedCreateWithoutHistoryInput = {
    id?: string
    productId: string
    requestedById: string
    assignedToId?: string | null
    status?: string
    priority?: string
    category: string
    estimatedDuration?: number | null
    actualDuration?: number | null
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    notes?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ValidationQueueCreateOrConnectWithoutHistoryInput = {
    where: ValidationQueueWhereUniqueInput
    create: XOR<ValidationQueueCreateWithoutHistoryInput, ValidationQueueUncheckedCreateWithoutHistoryInput>
  }

  export type UserCreateWithoutQueueHistoryActionsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: ProductCreateNestedManyWithoutUserInput
    validations?: ValidationCreateNestedManyWithoutUserInput
    queueRequestedBy?: ValidationQueueCreateNestedManyWithoutRequestedByInput
    queueAssignedTo?: ValidationQueueCreateNestedManyWithoutAssignedToInput
    analyticsEvents?: AnalyticsEventCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutQueueHistoryActionsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: ProductUncheckedCreateNestedManyWithoutUserInput
    validations?: ValidationUncheckedCreateNestedManyWithoutUserInput
    queueRequestedBy?: ValidationQueueUncheckedCreateNestedManyWithoutRequestedByInput
    queueAssignedTo?: ValidationQueueUncheckedCreateNestedManyWithoutAssignedToInput
    analyticsEvents?: AnalyticsEventUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutQueueHistoryActionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutQueueHistoryActionsInput, UserUncheckedCreateWithoutQueueHistoryActionsInput>
  }

  export type ValidationQueueUpsertWithoutHistoryInput = {
    update: XOR<ValidationQueueUpdateWithoutHistoryInput, ValidationQueueUncheckedUpdateWithoutHistoryInput>
    create: XOR<ValidationQueueCreateWithoutHistoryInput, ValidationQueueUncheckedCreateWithoutHistoryInput>
    where?: ValidationQueueWhereInput
  }

  export type ValidationQueueUpdateToOneWithWhereWithoutHistoryInput = {
    where?: ValidationQueueWhereInput
    data: XOR<ValidationQueueUpdateWithoutHistoryInput, ValidationQueueUncheckedUpdateWithoutHistoryInput>
  }

  export type ValidationQueueUpdateWithoutHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutValidationQueueNestedInput
    requestedBy?: UserUpdateOneRequiredWithoutQueueRequestedByNestedInput
    assignedTo?: UserUpdateOneWithoutQueueAssignedToNestedInput
  }

  export type ValidationQueueUncheckedUpdateWithoutHistoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    requestedById?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutQueueHistoryActionsInput = {
    update: XOR<UserUpdateWithoutQueueHistoryActionsInput, UserUncheckedUpdateWithoutQueueHistoryActionsInput>
    create: XOR<UserCreateWithoutQueueHistoryActionsInput, UserUncheckedCreateWithoutQueueHistoryActionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutQueueHistoryActionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutQueueHistoryActionsInput, UserUncheckedUpdateWithoutQueueHistoryActionsInput>
  }

  export type UserUpdateWithoutQueueHistoryActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: ProductUpdateManyWithoutUserNestedInput
    validations?: ValidationUpdateManyWithoutUserNestedInput
    queueRequestedBy?: ValidationQueueUpdateManyWithoutRequestedByNestedInput
    queueAssignedTo?: ValidationQueueUpdateManyWithoutAssignedToNestedInput
    analyticsEvents?: AnalyticsEventUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutQueueHistoryActionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: ProductUncheckedUpdateManyWithoutUserNestedInput
    validations?: ValidationUncheckedUpdateManyWithoutUserNestedInput
    queueRequestedBy?: ValidationQueueUncheckedUpdateManyWithoutRequestedByNestedInput
    queueAssignedTo?: ValidationQueueUncheckedUpdateManyWithoutAssignedToNestedInput
    analyticsEvents?: AnalyticsEventUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAnalyticsEventsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: ProductCreateNestedManyWithoutUserInput
    validations?: ValidationCreateNestedManyWithoutUserInput
    queueRequestedBy?: ValidationQueueCreateNestedManyWithoutRequestedByInput
    queueAssignedTo?: ValidationQueueCreateNestedManyWithoutAssignedToInput
    queueHistoryActions?: ValidationQueueHistoryCreateNestedManyWithoutPerformedByInput
  }

  export type UserUncheckedCreateWithoutAnalyticsEventsInput = {
    id?: string
    email: string
    password: string
    name: string
    role?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    products?: ProductUncheckedCreateNestedManyWithoutUserInput
    validations?: ValidationUncheckedCreateNestedManyWithoutUserInput
    queueRequestedBy?: ValidationQueueUncheckedCreateNestedManyWithoutRequestedByInput
    queueAssignedTo?: ValidationQueueUncheckedCreateNestedManyWithoutAssignedToInput
    queueHistoryActions?: ValidationQueueHistoryUncheckedCreateNestedManyWithoutPerformedByInput
  }

  export type UserCreateOrConnectWithoutAnalyticsEventsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAnalyticsEventsInput, UserUncheckedCreateWithoutAnalyticsEventsInput>
  }

  export type UserUpsertWithoutAnalyticsEventsInput = {
    update: XOR<UserUpdateWithoutAnalyticsEventsInput, UserUncheckedUpdateWithoutAnalyticsEventsInput>
    create: XOR<UserCreateWithoutAnalyticsEventsInput, UserUncheckedCreateWithoutAnalyticsEventsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAnalyticsEventsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAnalyticsEventsInput, UserUncheckedUpdateWithoutAnalyticsEventsInput>
  }

  export type UserUpdateWithoutAnalyticsEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: ProductUpdateManyWithoutUserNestedInput
    validations?: ValidationUpdateManyWithoutUserNestedInput
    queueRequestedBy?: ValidationQueueUpdateManyWithoutRequestedByNestedInput
    queueAssignedTo?: ValidationQueueUpdateManyWithoutAssignedToNestedInput
    queueHistoryActions?: ValidationQueueHistoryUpdateManyWithoutPerformedByNestedInput
  }

  export type UserUncheckedUpdateWithoutAnalyticsEventsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    products?: ProductUncheckedUpdateManyWithoutUserNestedInput
    validations?: ValidationUncheckedUpdateManyWithoutUserNestedInput
    queueRequestedBy?: ValidationQueueUncheckedUpdateManyWithoutRequestedByNestedInput
    queueAssignedTo?: ValidationQueueUncheckedUpdateManyWithoutAssignedToNestedInput
    queueHistoryActions?: ValidationQueueHistoryUncheckedUpdateManyWithoutPerformedByNestedInput
  }

  export type ProductCreateManyUserInput = {
    id?: string
    name: string
    brand: string
    category: string
    description?: string | null
    sku: string
    batchNumber?: string | null
    nutritionalInfo?: string | null
    claims?: string | null
    imageUrl?: string | null
    qrCode?: string | null
    status?: string
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ValidationCreateManyUserInput = {
    id?: string
    status?: string
    type?: string
    claimsValidated?: string | null
    summary?: string | null
    notes?: string | null
    validatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    productId: string
    reportId?: string | null
  }

  export type ValidationQueueCreateManyRequestedByInput = {
    id?: string
    productId: string
    assignedToId?: string | null
    status?: string
    priority?: string
    category: string
    estimatedDuration?: number | null
    actualDuration?: number | null
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    notes?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ValidationQueueCreateManyAssignedToInput = {
    id?: string
    productId: string
    requestedById: string
    status?: string
    priority?: string
    category: string
    estimatedDuration?: number | null
    actualDuration?: number | null
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    notes?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ValidationQueueHistoryCreateManyPerformedByInput = {
    id?: string
    queueId: string
    action: string
    previousStatus?: string | null
    newStatus?: string | null
    reason?: string | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type AnalyticsEventCreateManyUserInput = {
    id?: string
    eventType: string
    entityType: string
    entityId: string
    sessionId?: string | null
    data?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    timestamp?: Date | string
  }

  export type ProductUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sku?: StringFieldUpdateOperationsInput | string
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nutritionalInfo?: NullableStringFieldUpdateOperationsInput | string | null
    claims?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validations?: ValidationUpdateManyWithoutProductNestedInput
    reports?: ReportUpdateManyWithoutProductNestedInput
    seals?: ProductSealUpdateManyWithoutProductNestedInput
    validationQueue?: ValidationQueueUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sku?: StringFieldUpdateOperationsInput | string
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nutritionalInfo?: NullableStringFieldUpdateOperationsInput | string | null
    claims?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    validations?: ValidationUncheckedUpdateManyWithoutProductNestedInput
    reports?: ReportUncheckedUpdateManyWithoutProductNestedInput
    seals?: ProductSealUncheckedUpdateManyWithoutProductNestedInput
    validationQueue?: ValidationQueueUncheckedUpdateManyWithoutProductNestedInput
  }

  export type ProductUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    brand?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    sku?: StringFieldUpdateOperationsInput | string
    batchNumber?: NullableStringFieldUpdateOperationsInput | string | null
    nutritionalInfo?: NullableStringFieldUpdateOperationsInput | string | null
    claims?: NullableStringFieldUpdateOperationsInput | string | null
    imageUrl?: NullableStringFieldUpdateOperationsInput | string | null
    qrCode?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValidationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    claimsValidated?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutValidationsNestedInput
    report?: ReportUpdateOneWithoutValidationsNestedInput
  }

  export type ValidationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    claimsValidated?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: StringFieldUpdateOperationsInput | string
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ValidationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    claimsValidated?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: StringFieldUpdateOperationsInput | string
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ValidationQueueUpdateWithoutRequestedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutValidationQueueNestedInput
    assignedTo?: UserUpdateOneWithoutQueueAssignedToNestedInput
    history?: ValidationQueueHistoryUpdateManyWithoutQueueNestedInput
  }

  export type ValidationQueueUncheckedUpdateWithoutRequestedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    history?: ValidationQueueHistoryUncheckedUpdateManyWithoutQueueNestedInput
  }

  export type ValidationQueueUncheckedUpdateManyWithoutRequestedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValidationQueueUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutValidationQueueNestedInput
    requestedBy?: UserUpdateOneRequiredWithoutQueueRequestedByNestedInput
    history?: ValidationQueueHistoryUpdateManyWithoutQueueNestedInput
  }

  export type ValidationQueueUncheckedUpdateWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    requestedById?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    history?: ValidationQueueHistoryUncheckedUpdateManyWithoutQueueNestedInput
  }

  export type ValidationQueueUncheckedUpdateManyWithoutAssignedToInput = {
    id?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
    requestedById?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValidationQueueHistoryUpdateWithoutPerformedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    previousStatus?: NullableStringFieldUpdateOperationsInput | string | null
    newStatus?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    queue?: ValidationQueueUpdateOneRequiredWithoutHistoryNestedInput
  }

  export type ValidationQueueHistoryUncheckedUpdateWithoutPerformedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    queueId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    previousStatus?: NullableStringFieldUpdateOperationsInput | string | null
    newStatus?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValidationQueueHistoryUncheckedUpdateManyWithoutPerformedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    queueId?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    previousStatus?: NullableStringFieldUpdateOperationsInput | string | null
    newStatus?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnalyticsEventUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnalyticsEventUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AnalyticsEventUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    eventType?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: StringFieldUpdateOperationsInput | string
    sessionId?: NullableStringFieldUpdateOperationsInput | string | null
    data?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportCreateManyLaboratoryInput = {
    id?: string
    fileName: string
    originalName: string
    filePath: string
    fileSize: number
    mimeType: string
    analysisType: string
    results: string
    isVerified?: boolean
    verificationHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    productId: string
  }

  export type ReportUpdateWithoutLaboratoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    analysisType?: StringFieldUpdateOperationsInput | string
    results?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutReportsNestedInput
    validations?: ValidationUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateWithoutLaboratoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    analysisType?: StringFieldUpdateOperationsInput | string
    results?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: StringFieldUpdateOperationsInput | string
    validations?: ValidationUncheckedUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateManyWithoutLaboratoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    analysisType?: StringFieldUpdateOperationsInput | string
    results?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type ValidationCreateManyProductInput = {
    id?: string
    status?: string
    type?: string
    claimsValidated?: string | null
    summary?: string | null
    notes?: string | null
    validatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reportId?: string | null
    userId: string
  }

  export type ReportCreateManyProductInput = {
    id?: string
    fileName: string
    originalName: string
    filePath: string
    fileSize: number
    mimeType: string
    analysisType: string
    results: string
    isVerified?: boolean
    verificationHash?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    laboratoryId: string
  }

  export type ProductSealCreateManyProductInput = {
    id?: string
    sealId: string
    certificateNumber?: string | null
    issuedDate?: Date | string | null
    expiryDate?: Date | string | null
    validatingLaboratory?: string | null
    documentUrl?: string | null
    status?: string
    verifiedBy?: string | null
    verifiedAt?: Date | string | null
    notes?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ValidationQueueCreateManyProductInput = {
    id?: string
    requestedById: string
    assignedToId?: string | null
    status?: string
    priority?: string
    category: string
    estimatedDuration?: number | null
    actualDuration?: number | null
    assignedAt?: Date | string | null
    startedAt?: Date | string | null
    completedAt?: Date | string | null
    dueDate?: Date | string | null
    notes?: string | null
    metadata?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ValidationUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    claimsValidated?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    report?: ReportUpdateOneWithoutValidationsNestedInput
    user?: UserUpdateOneRequiredWithoutValidationsNestedInput
  }

  export type ValidationUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    claimsValidated?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ValidationUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    claimsValidated?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ReportUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    analysisType?: StringFieldUpdateOperationsInput | string
    results?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    laboratory?: LaboratoryUpdateOneRequiredWithoutReportsNestedInput
    validations?: ValidationUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    analysisType?: StringFieldUpdateOperationsInput | string
    results?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    laboratoryId?: StringFieldUpdateOperationsInput | string
    validations?: ValidationUncheckedUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    fileName?: StringFieldUpdateOperationsInput | string
    originalName?: StringFieldUpdateOperationsInput | string
    filePath?: StringFieldUpdateOperationsInput | string
    fileSize?: IntFieldUpdateOperationsInput | number
    mimeType?: StringFieldUpdateOperationsInput | string
    analysisType?: StringFieldUpdateOperationsInput | string
    results?: StringFieldUpdateOperationsInput | string
    isVerified?: BoolFieldUpdateOperationsInput | boolean
    verificationHash?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    laboratoryId?: StringFieldUpdateOperationsInput | string
  }

  export type ProductSealUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    sealId?: StringFieldUpdateOperationsInput | string
    certificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    issuedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatingLaboratory?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductSealUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    sealId?: StringFieldUpdateOperationsInput | string
    certificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    issuedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatingLaboratory?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProductSealUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    sealId?: StringFieldUpdateOperationsInput | string
    certificateNumber?: NullableStringFieldUpdateOperationsInput | string | null
    issuedDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    expiryDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    validatingLaboratory?: NullableStringFieldUpdateOperationsInput | string | null
    documentUrl?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    verifiedBy?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValidationQueueUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    requestedBy?: UserUpdateOneRequiredWithoutQueueRequestedByNestedInput
    assignedTo?: UserUpdateOneWithoutQueueAssignedToNestedInput
    history?: ValidationQueueHistoryUpdateManyWithoutQueueNestedInput
  }

  export type ValidationQueueUncheckedUpdateWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestedById?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    history?: ValidationQueueHistoryUncheckedUpdateManyWithoutQueueNestedInput
  }

  export type ValidationQueueUncheckedUpdateManyWithoutProductInput = {
    id?: StringFieldUpdateOperationsInput | string
    requestedById?: StringFieldUpdateOperationsInput | string
    assignedToId?: NullableStringFieldUpdateOperationsInput | string | null
    status?: StringFieldUpdateOperationsInput | string
    priority?: StringFieldUpdateOperationsInput | string
    category?: StringFieldUpdateOperationsInput | string
    estimatedDuration?: NullableIntFieldUpdateOperationsInput | number | null
    actualDuration?: NullableIntFieldUpdateOperationsInput | number | null
    assignedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    startedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    completedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    dueDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValidationCreateManyReportInput = {
    id?: string
    status?: string
    type?: string
    claimsValidated?: string | null
    summary?: string | null
    notes?: string | null
    validatedAt?: Date | string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    productId: string
    userId: string
  }

  export type ValidationUpdateWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    claimsValidated?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    product?: ProductUpdateOneRequiredWithoutValidationsNestedInput
    user?: UserUpdateOneRequiredWithoutValidationsNestedInput
  }

  export type ValidationUncheckedUpdateWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    claimsValidated?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ValidationUncheckedUpdateManyWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    status?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    claimsValidated?: NullableStringFieldUpdateOperationsInput | string | null
    summary?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NullableStringFieldUpdateOperationsInput | string | null
    validatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    productId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ValidationQueueHistoryCreateManyQueueInput = {
    id?: string
    action: string
    previousStatus?: string | null
    newStatus?: string | null
    performedById: string
    reason?: string | null
    metadata?: string | null
    createdAt?: Date | string
  }

  export type ValidationQueueHistoryUpdateWithoutQueueInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    previousStatus?: NullableStringFieldUpdateOperationsInput | string | null
    newStatus?: NullableStringFieldUpdateOperationsInput | string | null
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    performedBy?: UserUpdateOneRequiredWithoutQueueHistoryActionsNestedInput
  }

  export type ValidationQueueHistoryUncheckedUpdateWithoutQueueInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    previousStatus?: NullableStringFieldUpdateOperationsInput | string | null
    newStatus?: NullableStringFieldUpdateOperationsInput | string | null
    performedById?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ValidationQueueHistoryUncheckedUpdateManyWithoutQueueInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    previousStatus?: NullableStringFieldUpdateOperationsInput | string | null
    newStatus?: NullableStringFieldUpdateOperationsInput | string | null
    performedById?: StringFieldUpdateOperationsInput | string
    reason?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LaboratoryCountOutputTypeDefaultArgs instead
     */
    export type LaboratoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LaboratoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductCountOutputTypeDefaultArgs instead
     */
    export type ProductCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReportCountOutputTypeDefaultArgs instead
     */
    export type ReportCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReportCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ValidationQueueCountOutputTypeDefaultArgs instead
     */
    export type ValidationQueueCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ValidationQueueCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use LaboratoryDefaultArgs instead
     */
    export type LaboratoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = LaboratoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductDefaultArgs instead
     */
    export type ProductArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ReportDefaultArgs instead
     */
    export type ReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ReportDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ValidationDefaultArgs instead
     */
    export type ValidationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ValidationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductSealDefaultArgs instead
     */
    export type ProductSealArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProductSealDefaultArgs<ExtArgs>
    /**
     * @deprecated Use QRCodeAccessDefaultArgs instead
     */
    export type QRCodeAccessArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = QRCodeAccessDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ValidationQueueDefaultArgs instead
     */
    export type ValidationQueueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ValidationQueueDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ValidationQueueHistoryDefaultArgs instead
     */
    export type ValidationQueueHistoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ValidationQueueHistoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AnalyticsEventDefaultArgs instead
     */
    export type AnalyticsEventArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AnalyticsEventDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}