name: Deploy to Production

on:
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  NODE_VERSION: '18.x'

jobs:
  # Pre-deployment checks
  pre-deploy:
    name: Pre-deployment Checks
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Check deployment conditions
        id: check
        run: |
          # Check if all required secrets are set
          if [[ -z "${{ secrets.DEPLOY_HOST }}" || -z "${{ secrets.DEPLOY_USER }}" || -z "${{ secrets.DEPLOY_KEY }}" ]]; then
            echo "Missing deployment secrets"
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if it's a hotfix or regular deployment
          if [[ "${{ github.event_name }}" == "workflow_dispatch" || "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
          fi

  # Database backup before deployment
  backup:
    name: Backup Database
    runs-on: ubuntu-latest
    needs: pre-deploy
    if: needs.pre-deploy.outputs.should-deploy == 'true'
    
    steps:
      - name: Backup production database
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            cd /var/www/truelabel
            ./scripts/backup.sh
            
      - name: Verify backup
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            # Check if backup was created successfully
            BACKUP_FILE=$(find /var/backups/truelabel/database -name "db_backup_*.sql.gz" -mmin -5 | head -n1)
            if [ -z "$BACKUP_FILE" ]; then
              echo "Backup verification failed!"
              exit 1
            fi
            echo "Backup verified: $BACKUP_FILE"

  # Build and prepare artifacts
  build:
    name: Build Applications
    runs-on: ubuntu-latest
    needs: backup
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            */node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          
      - name: Install dependencies
        run: npm run install:all
        
      - name: Build client
        env:
          VITE_API_BASE_URL: https://api.yourdomain.com/api/v1
          VITE_QR_BASE_URL: https://yourdomain.com
          VITE_ENVIRONMENT: production
        run: |
          cd client
          npm run build
          
      - name: Build server
        run: |
          cd server
          npm run build
          
      - name: Create deployment package
        run: |
          # Create deployment directory
          mkdir -p deploy
          
          # Copy built files
          cp -r client/dist deploy/client
          cp -r server/dist deploy/server
          cp -r server/prisma deploy/server/
          cp server/package*.json deploy/server/
          cp ecosystem.config.js deploy/
          
          # Create deployment info
          echo "{
            \"version\": \"$(git rev-parse --short HEAD)\",
            \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
            \"branch\": \"$(git branch --show-current)\",
            \"author\": \"$(git log -1 --pretty=format:'%an')\"
          }" > deploy/deployment-info.json
          
          # Create tarball
          tar -czf deployment.tar.gz deploy/
          
      - name: Upload deployment artifact
        uses: actions/upload-artifact@v3
        with:
          name: deployment-package
          path: deployment.tar.gz
          retention-days: 7

  # Deploy to server
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'production' }}
    runs-on: ubuntu-latest
    needs: build
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
      - name: Download deployment package
        uses: actions/download-artifact@v3
        with:
          name: deployment-package
          
      - name: Transfer files to server
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          source: deployment.tar.gz
          target: /tmp/
          
      - name: Deploy application
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            set -e
            
            # Extract deployment package
            cd /tmp
            tar -xzf deployment.tar.gz
            
            # Stop services
            cd /var/www/truelabel
            pm2 stop ecosystem.config.js || true
            
            # Backup current version
            if [ -d "dist.backup" ]; then
              rm -rf dist.backup.old
              mv dist.backup dist.backup.old
            fi
            cp -r client/dist client/dist.backup || true
            cp -r server/dist server/dist.backup || true
            
            # Deploy new version
            cp -r /tmp/deploy/client/* client/
            cp -r /tmp/deploy/server/* server/
            cp /tmp/deploy/ecosystem.config.js .
            
            # Install production dependencies
            cd server
            npm ci --production
            
            # Run migrations
            npx prisma migrate deploy
            
            # Start services
            cd /var/www/truelabel
            pm2 start ecosystem.config.js --env production
            pm2 save
            
            # Cleanup
            rm -rf /tmp/deployment.tar.gz /tmp/deploy

  # Post-deployment tasks
  post-deploy:
    name: Post-deployment Tasks
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
      - name: Health check
        run: |
          # Wait for services to start
          sleep 30
          
          # Check API health
          response=$(curl -s -o /dev/null -w "%{http_code}" https://api.yourdomain.com/health)
          if [ $response -ne 200 ]; then
            echo "Health check failed! Status: $response"
            exit 1
          fi
          echo "API health check passed"
          
          # Check frontend
          response=$(curl -s -o /dev/null -w "%{http_code}" https://yourdomain.com)
          if [ $response -ne 200 ]; then
            echo "Frontend check failed! Status: $response"
            exit 1
          fi
          echo "Frontend check passed"
          
      - name: Run smoke tests
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            cd /var/www/truelabel/server
            npm run test:smoke || echo "Smoke tests completed"
            
      - name: Clear CDN cache
        run: |
          # Clear Cloudflare cache (if using)
          if [ ! -z "${{ secrets.CLOUDFLARE_API_TOKEN }}" ]; then
            curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
              -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
              -H "Content-Type: application/json" \
              --data '{"purge_everything":true}'
          fi
          
      - name: Update deployment status
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            # Log deployment
            echo "[$(date)] Deployment completed - Version: ${{ github.sha }}" >> /var/log/truelabel/deployments.log
            
            # Update deployment info
            cd /var/www/truelabel
            echo "{
              \"version\": \"${{ github.sha }}\",
              \"timestamp\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
              \"deployer\": \"${{ github.actor }}\",
              \"status\": \"success\"
            }" > current-deployment.json

  # Rollback on failure
  rollback:
    name: Rollback Deployment
    runs-on: ubuntu-latest
    needs: [deploy, post-deploy]
    if: failure()
    
    steps:
      - name: Rollback to previous version
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          script: |
            cd /var/www/truelabel
            
            # Stop services
            pm2 stop ecosystem.config.js
            
            # Restore previous version
            if [ -d "client/dist.backup" ]; then
              rm -rf client/dist
              mv client/dist.backup client/dist
            fi
            
            if [ -d "server/dist.backup" ]; then
              rm -rf server/dist
              mv server/dist.backup server/dist
            fi
            
            # Restart services
            pm2 start ecosystem.config.js --env production
            
            echo "Rollback completed"
            
      - name: Notify rollback
        uses: 8398a7/action-slack@v3
        with:
          status: custom
          custom_payload: |
            {
              text: "🚨 Deployment Failed - Rollback Executed",
              attachments: [{
                color: 'danger',
                fields: [
                  { title: 'Environment', value: '${{ github.event.inputs.environment || 'production' }}', short: true },
                  { title: 'Version', value: '${{ github.sha }}', short: true },
                  { title: 'Deployer', value: '${{ github.actor }}', short: true },
                  { title: 'Status', value: 'Rolled Back', short: true }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}

  # Notify deployment status
  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy, post-deploy]
    if: always()
    
    steps:
      - name: Send deployment notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          custom_payload: |
            {
              text: '${{ job.status }}' == 'success' ? '✅ Deployment Successful' : '❌ Deployment Failed',
              attachments: [{
                color: '${{ job.status }}' == 'success' ? 'good' : 'danger',
                fields: [
                  { title: 'Environment', value: '${{ github.event.inputs.environment || 'production' }}', short: true },
                  { title: 'Version', value: '${{ github.sha }}', short: true },
                  { title: 'Branch', value: '${{ github.ref_name }}', short: true },
                  { title: 'Deployer', value: '${{ github.actor }}', short: true },
                  { title: 'Time', value: '<!date^${{ github.event.head_commit.timestamp || github.event.repository.updated_at }}^{date_short_pretty} {time}|deployment time>', short: true }
                ]
              }]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}