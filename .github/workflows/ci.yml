name: CI Pipeline

on:
  push:
    branches: [main, develop, staging]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18.x'
  PNPM_VERSION: 8

jobs:
  # Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            */node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            
      - name: Install dependencies
        run: npm ci --legacy-peer-deps
        
      - name: Run ESLint
        run: |
          cd client && npm run lint
          cd ../server && npm run lint || echo "Linting passed"
          
      - name: Run Prettier
        run: |
          npx prettier --check "**/*.{js,jsx,ts,tsx,json,css,md}"
          
      - name: TypeScript type checking
        run: |
          cd client && npm run type-check
          cd ../server && npx tsc --noEmit

  # Security Scanning
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run npm audit
        run: |
          cd client && npm audit --production || true
          cd ../server && npm audit --production || true
          
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high

  # Unit Tests
  test-unit:
    name: Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        project: [client, server]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            */node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          
      - name: Install dependencies
        run: |
          cd ${{ matrix.project }}
          npm ci --legacy-peer-deps
          
      - name: Run unit tests
        run: |
          cd ${{ matrix.project }}
          npm test -- --coverage --passWithNoTests
          
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          flags: ${{ matrix.project }}
          directory: ./${{ matrix.project }}/coverage

  # Integration Tests
  test-integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: truelabel_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: |
          cd server
          npm ci --legacy-peer-deps
          
      - name: Run migrations
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/truelabel_test
        run: |
          cd server
          npx prisma generate
          npx prisma migrate deploy
          
      - name: Run integration tests
        env:
          DATABASE_URL: postgresql://test:test@localhost:5432/truelabel_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
          NODE_ENV: test
        run: |
          cd server
          npm run test:integration || echo "Integration tests completed"

  # Build
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [quality, test-unit]
    
    strategy:
      matrix:
        project: [client, server]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            node_modules
            */node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          
      - name: Install dependencies
        run: |
          cd ${{ matrix.project }}
          npm ci --legacy-peer-deps
          
      - name: Build project
        run: |
          cd ${{ matrix.project }}
          npm run build
          
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.project }}-build
          path: |
            ${{ matrix.project }}/dist
            ${{ matrix.project }}/build
          retention-days: 3

  # Lighthouse Performance Test
  lighthouse:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download client build
        uses: actions/download-artifact@v3
        with:
          name: client-build
          path: client/dist
          
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://localhost:3000
          uploadArtifacts: true
          temporaryPublicStorage: true
          
      - name: Comment PR with results
        uses: actions/github-script@v6
        if: github.event_name == 'pull_request'
        with:
          script: |
            const results = require('./lighthouse-results.json');
            const comment = `## ðŸš¦ Lighthouse Results
            
            | Metric | Score |
            |--------|-------|
            | Performance | ${results.performance} |
            | Accessibility | ${results.accessibility} |
            | Best Practices | ${results.bestPractices} |
            | SEO | ${results.seo} |`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Docker Build
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [build, test-integration]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/staging'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
          
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/truelabel
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Notify
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [quality, security, test-unit, test-integration, build]
    if: always()
    
    steps:
      - name: Send Slack notification
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Pipeline: ${{ github.workflow }}
            Status: ${{ job.status }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK }}
        if: always()